#! /usr/bin/env sh

export LC_ALL
LC_ALL=C

Echo() {
	printf '%s\n' "${*}"
}

Usage() {
	Echo "Usage: ${0##*/} [options] args-for-make
Available options are
  -q  quiet
  -n  Stop after ./configure, i.e. do not run make
  -e  Keep environment - do not modify LDFLAGS, CXXFLAGS, CFLAGS
  -0  Do not pass --enable-separate-* to ./configure
  -1/2/3 Generate 1/2/3 binaries for eix-{,diff,update}
  -4  Enable separate tools
  -p  Use pedantic warnings when modifying flags
  -P  Use pedantic warnings except -Wno-sign-conversion
  -u  Define NOT_FULL_USE
  -s  With sqlite
  -S  Without sqlite
  -b  With bzlib
  -B  Without bzlib
  -C  Avoid CCACHE
  -X  Clear CCACHE
  -y  Use -std=c++0x
  -Y  Use -std=gnu++0x
  -jX Use -jX (currently ${jarg})
  -c OPT Add OPT to ./configure
  -Q  Do not --enable-quickcheck
  -d  With --enable-debugging
  -O  Pass --enable-strong-optimization --enable-security
  -r  Change also directory permissions to root (for fakeroot-ng)"
	exit ${1:-1}
}

Info() {
	${quiet} && return
	Echo "${*}"
}

Die() {
	Echo "${0##*/}: ${1}"
	exit ${2:-1}
}

SetCcache() {
	dircc='/usr/lib/ccache/bin'
	test -d "${dircc}" || return
	case ":${PATH}:" in
	*":${dircc}:"*) return;;
	esac
	if [ -n "${PATH}" ]
	then	Info "PATH=${dircc}:\${PATH}"
		PATH="${dircc}:${PATH}"
		export PATH
	fi
	[ -n "${CCACHE_DIR}" ] && return
	for dircc in "${HOME}/.ccache" ../ccache ../../ccache
	do	[ -z "${dircc}" ] || ! test -d "${dircc}" && continue
		testcc=`cd -P -- "${dircc}" >/dev/null 2>&1 && \
				printf '%sA' "${PWD}"` && \
			testcc=${testcc%A} && [ -n "${testcc}" ] \
			&& test -d "${testcc}" && break
	done
	[ -z "${testcc}" ] && return
	Info "CCACHE_DIR=${testcc}"
	export CCACHE_DIR CCACHE_COMPRESS
	CCACHE_DIR=${testcc}
	CCACHE_COMPRESS='true'
	${clear_ccache} || return 0
	Info "Clearing CCACHE"
	ccache -C
}

quiet=false
earlystop=false
keepenv=false
not_full_use=false
pedantic=false
separate_all=:
use_chown=false
jarg='-j3'
use_ccache=:
configure_extra='--prefix=/usr --sysconfdir=/etc'
optimization=false
quickcheck=:
clear_ccache=false
stdcxx=''
debugging=false
wnosign=false
OPTIND=1
while getopts 'q01234nepPusSbBrOQCXyYdc:j:hH?' opt
do	case ${opt} in
	q) quiet=:;;
	0) separate_all=false;;
	1) configure_extra="${configure_extra} --disable-separate-binaries";;
	2) configure_extra="${configure_extra} --enable-separate-update";;
	3) configure_extra="${configure_extra} --enable-separate-binaries";;
	4) configure_extra="${configure_extra} --enable-separate-tools";;
	n) earlystop=:;;
	e) keepenv=:;;
	p) pedantic=:;;
	P) wnosign=:;;
	u) not_full_use=:;;
	s) configure_extra="${configure_extra} --with-sqlite";;
	S) configure_extra="${configure_extra} --without-sqlite";;
	b) configure_extra="${configure_extra} --with-bzip2";;
	B) configure_extra="${configure_extra} --without-bzip2";;
	r) use_chown=:;;
	O) optimization=:;;
	Q) quickcheck=false;;
	C) use_ccache=false;;
	X) clear_ccache=:;;
	y) stdcxx='-std=c++0x';;
	Y) stdcxx='-std=gnu++0x';;
	d) debugging=:;;
	c) configure_extra="${configure_extra} ${OPTARG}";;
	j) [ -n "${OPTARG}" ] && jarg='-j${OPTARG}' || jarg='';;
	*) Usage 0;;
	esac
done
if [ ${OPTIND} -gt 1 ]
then	( eval '[ "$(( 0 + 1 ))" = 1 ]' ) >/dev/null 2>&1 && \
	eval 'shift "$(( ${OPTIND} - 1 ))"' || shift "`expr ${OPTIND} - 1`"
fi

${quickcheck} && configure_extra="${configure_extra} --enable-quickcheck"
${separate_all} && configure_extra="${configure_extra} --enable-separate-binaries --enable-separate-tools"
${optimization} && configure_extra="${configure_extra} --enable-strong-optimization --enable-security"
${debugging} && configure_extra="${configure_extra} --enable-debugging"

${quiet} && quietredirect='>/dev/null' || quietredirect=''

if ${use_chown}
then	ls /root >/dev/null 2>&1 && \
		Die "You should not really be root when you use -r" 2
	chown -R root:root .
fi

${use_ccache} && SetCcache

if ! ${keepenv}
then	CFLAGS=`portageq envvar CFLAGS`
	CXXFLAGS=`portageq envvar CXXFLAGS`
	LDFLAGS=`portageq envvar LDFLAGS`
	CPPFLAGS=`portageq envvar CPPFLAGS`
	export CFLAGS CXXFLAGS LDFLAGS CPPFLAGS
	${not_full_use} && CXXFLAGS="${CXXFLAGS} -DNOT_FULL_USE"
	[ -n "${stdcxx}" ] && CXXFLAGS="${CXXFLAGS} ${stdcxx}"
	if ${pedantic} || ${wnosign}
	then	configure_extra="${configure_extra} --enable-strong-warnings"
		${wnosign} && CXXFLAGS="${CXXFLAGS} -Wno-sign-conversion"
	else	configure_extra="${configure_extra} --enable-warnings"
		#CXXFLAGS="${CXXFLAGS} -Werror"
	fi
fi
Info "CXXFLAGS=${CXXFLAGS}
LDFLAGS=${LDFLAGS}
CPPFLAGS=${CPPFLAGS}"
if ! test -e Makefile
then	if ! test -e configure || ! test -e Makefile.in
	then	Info "Running autotools..."
		eval ./autogen.sh ${quietredirect} || Die "autogen failed"
	fi
	Info "Running configure" ${configure_extra}
	eval ./configure ${configure_extra} ${quietredirect} || \
		Die "configure failed"
fi
${earlystop} && {
	exec make ${jarg} config.h
	Die "cannot exec make"
}
Info "Making ${*}..."
command -v make >/dev/null 2>&1 || Die "cannot find make"
if ${quiet}
then	exec make ${jarg} "${@}" >/dev/null
else	exec make ${jarg} "${@}"
fi
