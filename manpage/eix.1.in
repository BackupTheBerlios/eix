.TH "eix" "1" "$Date$" "@PACKAGE_STRING@" ""
.\" {{{ NAME
.SH "NAME"
.B eix
- a set of utilities for searching, diffing and updating a binary cache of your local portage-trees
.\" }}}

.\" {{{ SYNOPSIS
.SH "SYNOPSIS"
.B eix
[I<common options>] [I<OPTIONS>] I<EXPRESSION> [[B<-a>|B<-o>|B<--and>|B<--or>] I<EXPRESSION> ...]
.PP
An I<EXPRESSION> consists of local options (described below) and a pattern
(which may be omitted, i.e. empty).

.B update-eix
[I<common options>] [I<update-eix options>]

.B diff-eix
[I<common options>] I<OLD-CACHE> [I<NEW-CACHE>]

.B eix-sync

.BR "eix-test-obsolete " [ detail | repo | no-repo | I<check_always_overlays> ]

.B update-eix-remote

.B update-eix-layman

.B update-eix-functions.sh
.\" }}}

.\" {{{ DESCRIPTION
.SH "DESCRIPTION"
B<update-eix> generates a binary cache from your local portage-tree and overlays.
B<eix> searches this cache for packages that match the criteria you specified.
B<diff-eix> compares two binary caches and finds packages that were added, removed or for
which the highest stable versions has changed.

All of these programs and scripts read the configuration files described later.
B<eix-sync> has an additional separate configuration file.

B<eix-sync> can sync the portage/overlay trees and compare them with the old cache
using B<diff-eix>.
To get more help on B<eix-sync> call B<eix-sync -h> and see the documentation
of I</etc/eix-sync.conf> below.

B<eix-test-obsolete> is a script which calls B<eix> several times to display
the output of B<eix -tTc> in a more organized manner.
Note that the results of B<eix-test-obsolete> depend on setting of the
B<REDUNDANT_IF_*> and B<NONEXISTENT_IF_*> variables.
The defaults of these variables are set such that - if in doubt - the package is output.
An exception of this rule is B<REDUNDANT_IF_MIXED> whose default was
changed in eix-0.10.4 because the previous default has confused some people.
In case you are wondering why some package is shown by B<eix-test-obsolete>,
you can use the argument B<detail> which shows even more details.

If you pass B<eix-test-obsolete> the particular argument B<repo> or B<no-repo>,
it will display all package versions which have been installed with/without
repository data (which is only created by >=portage-2.1.3).
To avoid false heuristic assumptions about the overlays used for versions
without repository files, you might want to set B<CHECK_INSTALLED_OVERLAYS=true>
(see below) which unfortunately slows things down dramatically.
If B<eix-test-obsolete> is called with any argument not mentioned above,
it will temporarily set B<CHECK_INSTALLED_OVERLAYS=true> for your convenience.

B<update-eix-remote> can sync an eix database from an external server and
add/remove it to the current database.
Note that to keep such remote data across update-eix calls
you might want to set B<KEEP_VIRTUALS=true> in @SYSCONFDIR@/eixrc.
To get more help on B<update-eix-remote> call B<update-eix-remote -h>.

B<update-eix-layman> can add or remove local layman overlays to the current database.
To get more help on B<update-eix-layman> call B<update-eix-layman -h>.

B<update-eix-functions.sh> are helper functions used by B<update-eix-remote>
and B<update-eix-layman>.
You might want to use them for your own similar scripts.
.\" }}}

.\" {{{ OPTIONS
.SH "OPTIONS"
.\" {{{ -------- Common options
.SS Common options
These options are common to B<eix>, B<diff-eix>, and B<update-eix>.
.TP
.BR -h ", " --help
Print a help screen and exit.
.TP
.BR -Q ", " --quick "   (toggle)    (not for B<update-eix>)"
Do (not) read the slots of installed versions which cannot be guessed
(i.e. installed versions of packages with at least two different slots
for which the installed version is not in the database anymore).
Note that with this option, eix and diff-eix might report false positives
for up-/downgrade recommendations for these packages.
.TP
.BR --care "    (not for B<update-eix>)"
This deactivates --quick, and moreover, slots of installed version are
always read instead of relying on the guess of the slot.
This will in particular make sure that you get an up-/downgrade
recommendation if a slot name of an installed version changes.
Note that this will dramatically decrease the speed at the first call.
(If your filesystem has a reasonable cache, later calls are almost not
slower than without this option.)
.TP
.BR -q ", " --quiet "   (toggle)"
Produce no output on stderr and stdout (fatal errors which occur at the
beginning of execution are printed to stderr, regardless of this option).
.TP
.B --dump
Show the current eixrc-variables, and their defaults as comments.
.TP
.B --dump-defaults
Show the defaults of the eixrc-variables, and their current values as comments.
.TP
.BI "--print " VAR
Print the specified variable I<VAR> of eixrc or of portage settings,
completely expanded as it would be used internally by eix.
This is mainly used internally for scripts.
.TP
.B --print-all-useflags
print all IUSE words used in some version.
.TP
.B --print-all-keywords
print all KEYWORDS used in some version.
.TP
.B --print-all-slots
print all SLOT strings used in some version.
.TP
.B --print-all-provides
print all PROVIDE words used in some package.
.TP
.B --print-all-licenses
print all LICENSE strings used in some package.
.TP
.B --print-world-sets
print the world sets.
.TP
.BR -V ", " --version
Print version and exit.
.TP
.BR -n ", " --nocolor
Disables the use of ANSI color codes. This is useful for terminals that do not support ANSI colors.
(This is automatically turned on if stdout is no tty, but can be overridden by using --force-color)
.TP
.BR -F ", " --force-color
The opposite of --nocolor.
.\" }}}

.\" {{{ -------- Output options
.SS Output options
.TP
.BR -x ", " --versionsort "    (toggle)"
Prints available versions sorted by slots/versions.
If sorted by slots, each new slot starts in a new line.
.TP
.BR -l ", " --versionlines "   (toggle)"
Prints available versions in a (vertical) list.
Moreover, the IUSE data is printed for each version
(and not collected for the whole package).
.TP
.BR -c ", " --compact "   (toggle)"
Causes eix to use a compact layout for search results. Useful for obtaining a better
overview in the case of a long list of results, and also to help speed up searching over
slow connections such as a serial console.
.TP
.BR -v ", " --verbose "   (toggle)"
Use a verbose layout with additional information about search results such as the license
of a package.
.TP
.BR -* ", " --pure-packages "   (toggle)"
(do not forget quoting if you use the short form from within a shell.)
Omit printing of additional information (overlay names, number of found packages) after the packages.
This might be useful for some shell scripts parsing the output
.TP
.BR --only-names "   (toggle)"
As "-*", but additionally print only the category and name of the packages found.
.\" }}}

.\" {{{ -------- Options for eix
.SS Special options for B<eix>
.TP
.BR -t ", " --test-non-matching
Before other output, print entries of /etc/portage/package.* which do not
match any existing version in the package database or which apparently have
no meaning because they are empty (see B<TEST_FOR_EMPTY>).

This option also lists all installed packages whose name is not in the database.

Note that this is essentially different from B<-T> (see below).
The latter only tests for packages B<in the database> whether redundant
entries in /etc/portage/package.* exist or whether the installed versions
are available, respectively.

This option is best combined with B<-T> to clean up /etc/portage/package.*

Or you can combine it with B<-e> to have no other output.

If you have a reason to exclude certain entries/packages from this test,
you can write those entries into a file /etc/portage/package.*.nonexistent
where *=keywords,mask,unmask,use,cflags,installed.
These files (and how to modify their filenames) are described later.
.TP
.BI "--cache-file " FILE
Use I<FILE> instead of B<@EIX_CACHEFILE@>.

.\" {{{ -------- Options for expressions
.SS Options for expressions
Expressions are used to narrow which packages eix prints.

An expression may contain several of the options below (including the
options for B<operation selection> and selection of the B<match algorithm>)
and a pattern (which may be omitted).
All these options are local to that expression, i.e. everything is "reset"
when the next expression starts.

The expression finishes with the pattern or with one of the logical
concatenating options B<--and> or B<--or> (which may be abbreviated by
B<-a> or B<-o>, respectively) after which the next expression can follow.
If neither B<--and> nor B<--or> is used between two expressions
(i.e. if the first expression finishes with the pattern), then
B<--and> or B<--or> is assumed implicitly, depending on the value of the
configuration variable B<DEFAULT_IS_OR>.

In order for a package to match the expression it must satisfy B<all>
match criteria selected by the local options B<and> the pattern contained
in the expression (if such a pattern was given) must match.
An exception of this rule is of course when the option B<--not> is used
within the local options of the expressions in which case the complete result
(of the whole expression) is negated.

The logical operators B<--and> or B<--or> have both the same precedence and
are evaluated from left to right. It is currently not possible to parenthesize
the results of logical operators in a different way or to negate a result of
a logical concatenation.

Note that besides using this expression syntax a different way of implicit
(though slow) package selection on various other criteria is possible by
defining B<FORMATSTRING> (see below) using conditionals such that it outputs
an empty string for the undesired packages.
.TP
.BR -I ", " --installed
Only match installed packages.
Please do not use this as a replacement for qlist -ICv or equery,
it is not the same:
Packages that are installed, but no longer in the portage tree (or overlays) are not listed here.
However, you should better not have such packages at all
(better put these packages in overlays in case you need to reinstall them).
To find such packages, you can use B<eix -te> (or B<eix -tI> to get listed both)
but be aware that eix -t does not obey the usual B<FORMAT> rules for these packages.
So you better do not use this in scripts unless you know what you are doing.

If you really want to use this option as a substitute for equery in scripts,
you might want to combine it with
.B --format '<fullinstalled>' --pure-packages.
.TP
.BR -i ", " --multi-installed
Only match packages which are installed in at least two different versions.
Usually, this means that these versions are slotted (at installation time).
.TP
.BR -d ", " --dup-packages
Only match duplicated packages,
for example, if sys-foo/bar exists both in the official portage tree and a local overlay.
If B<DUP_PACKAGES_ONLY_OVERLAYS> is set (see below), the instances must be in two different local overlays.
.TP
.BR -D ", " --dup-versions
Only match packages with duplicated versions,
for example, if sys-foo/bar-0.2.1 exists both in the official portage tree and a local overlay.
If B<DUP_VERSIONS_ONLY_OVERLAYS> is set (see below), both instances must be in overlays.
.TP
.BR -1 ", " --slotted
Only match packages with a nontrivial slot, i.e. where SLOT is nonempty and different from "0".
.TP
.BR -2 ", " --slots
Only match packages with at least two different slots.
In contrast to -1, a package is not shown here, if only one slot is available with e.g. slot-name "4.3".
.TP
.BR -u ", " --upgrade ", " --upgrade+ ",  " --upgrade-
Only match packages which have at least one slotted version installed which
is not the best version within that slot.
This means that you should either upgrade or downgrade that package.

If you use B<--upgrade+> or B<--upgrade->, then the test acts as if B<LOCAL_PORTAGE_CONFIG> is B<true> or B<false>.
Otherwise, this decision is based upon B<UPGRADE_LOCAL_MODE>.

If you want to see only packages with downgrade recommendations, you might make
use of the B<FORMATSTRING> features described below.
.TP
.BR --stable ", " --stable+ ", " --stable-
Only match packages which have at least one stable (non-masked) version.
.TP
.BR --testing ", " --testing+ ", " --testing-
Only match packages which have at least one testing or stable (non-masked) version.
.TP
.BR --non-masked ", " --non-masked+ ", " --non-masked-
Only match packages which have at least one non-masked version.
.TP
.BR --system ", " --system+ ", " --system-
Only match system packages.
.TP
.BR --world
Only match world packages.
Contrary to "emerge @world" this does not include packages contained
in a package set in world.
To include the latter use B<--world-all>.
.TP
.BR --world-all
Only match world packages or of a package set in world.
.TP
.BR --world-set
Only match packages in a package set in world.
.TP
.BR -O ", " --overlay
Only match packages with at least one version in an overlay.
.TP
.BI "--in-overlay " overlay
Only match packages with at least one version in an overlay matching I<overlay>.

If this option is repeated, the additional I<overlay> arguments are joined
to the list of admissible overlays.

I<overlay> may be either a wildcard pattern or a number.
Note that if you use the default B<OVERLAYS_LIST=all-used-renumbered>
you do not see the correct overlay numbers; to get a list of the correct
overlay numbers you can e.g. call

B<OVERLAYS_LIST=all eix -e ''>

The special values B<0> or B<$PORTDIR> match the "main" tree (which in
this connection is considered as the 0'th overlay).

If I<overlay> is empty (or omitted if B<--in-overlay> is the last option)
it matches all overlays except for the "main" tree
(i.e. B<--in-overlay ''> is the same as B<-O>).
.TP
.BI "--only-in-overlay " overlay
Only match packages which have only versions in an overlay matching I<overlay>.

If this option is repeated, the additional I<overlay> arguments are joined
to the list of admissible overlays.

I<overlay> may be either a wildcard pattern or a number, as in B<--in-overlay>.
As particular, B<--only-in-overlay ''> matches all packages which are not in
the official portage tree but only in some overlay.
.TP
.BR -J ", " --installed-overlay
Only match packages which have been installed from some overlay.
To get a completely reliable result you should set
B<CHECK_INSTALLED_OVERLAYS> to true (which is not the default because
it dramatically slows down the test).
See B<CHECK_INSTALLED_OVERLAYS> for details.
.TP
.BI "--installed-from-overlay " overlay
This is analogous to B<--in-overlay> with the difference that only
packages are matched which have at least one version installed
from I<overlay>.
For instance, B<--installed-from-overlay 0> will only match those packages
which have at least one version which was installed from the regular
portage tree.
As for -J, you should set B<CHECK_INSTALLED_OVERLAYS> to true to get a
completely reliable result.
.TP
.B --installed-in-some-overlay
Only match packages with at least one installed version number which is
also in some overlay.
.TP
.BI "--installed-in-overlay " overlay
This is analogous to B<--in-overlay> with the difference that only
packages are matched which have at least one installed version in I<overlay>.
For instance, B<--installed-in-overlay 0> will only match those packages
which have at least one version which is also in the regular portage tree.
.TP
.B --fetch
Only match packages which have at least one version with fetch restrictions.
.TP
.B --mirror
Only match packages which have at least one version with mirror restrictions.
.TP
.BR -T ", " --test-obsolete
Only match obsolete packages.

Packages are obsolete if they have redundant entries in /etc/portage/package.*
(if B<TEST_FOR_REDUNDANCY> is true) or if not all installed versions exist
(if B<TEST_FOR_NONEXISTENT> is true).

What is considered as redundant is defined by the B<REDUNDANT_IF>-variables below,
and what is considered as non-existent is defined by the B<NONEXISTENT_IF>-variables.
Note that the test for versions from obsolete overlays works only reliable if
you set B<CHECK_INSTALLED_OVERLAYS> to true (which is not the default because
it dramatically slows down the test).
See B<CHECK_INSTALLED_OVERLAYS> for details.

Note that this options only tests packages in the database - in particular, you
will not find entries for e.g. renamed or removed (from the portage tree) packages with this option.
Use B<-t> to find the latter.

Therefore, this option is best combined with -t to find also other types of obsolete entries.

If you have a reason to exclude certain packages from this test,
you can write those entries into a file /etc/portage/package.*.nowarn
where *=keywords,mask,unmask,use,cflags,installed.
These files (and how to modify their filenames) are described later.
.TP
.BR -| ", " --pipe
(Recall that a shell will not pass an unquoted B<|> sign, so quote properly).

Use input from pipe of an emerge -pv (similar to genlop -p).
Actually, any input lines are honored which contains a word in the format

I<category>B</>I<package>B<->I<version> or

I<category>B</>I<package>

More precisely, in each line the first word in this format is chosen.
The packages/versions passed this way will in the output be marked.
For details, see the B<marked> and B<markedversions> formatstring and the
B<MARK_VERSIONS> variable below.

This local option is treated as if a sequence of corresponding matching
expressions, concatenated with B<-o>, were given.
.TP
.BR -! ", " --not
(Recall that an interactive shell will not pass an unquoted B<!> sign, so quote properly).

Invert the expression given.
.\" }}}

.\" {{{ -------- Operation selection
.SS Operation selection
.TP
Define the fields that the expression should be tested on. Multiple fields may be used.
If you do not specify some of these options, the default depends on the expression which
you use and on the setting of the B<MATCH_*> configuration variables:
typically, it is B<--name> or B<--category-name>.
.TP
.BR -s ", " --name
e.g. "eix"
.TP
.BR -S ", " --description
e.g. "Small utility for searching .."
.TP
.BR -C ", " --category
e.g. "app-portage"
.TP
.BR -A ", " --category-name
e.g. "app-portage/eix"
.TP
.BR -H ", " --homepage
e.g. "http://sourceforge.net/projects/eix"
.TP
.BR -L ", " --license
e.g. "GPL-2"
.TP
.BR -P ", " --provide
e.g. "virtual/blackbox"
.TP
.BR --set
Name of a local package set of a version in the database
(i.e. corresponding to a file in B</etc/portage/system>).
The "system" package is intentionally excluded here, since the latter
should be tested with B<--system[+-]>.
.TP
.B --slot
Slotname of a version in the database, e.g. "kde-4"
.TP
.B --installed-slot
Slotname of an installed version.
Recall that without option B<--care> (or B<CAREMODE=true>) the slotname might be guessed.
.TP
.BR -U ", " --use
A useflag defined by IUSE in some version by some of the ebuilds of the package.
You will usually want to combine this option with -e
.TP
.B --installed-with-use
A useflag enabled during installation of the package.
Of course, this flag can only match if the package is installed.
Note that the same restrictions hold as for -I, i.e. only packages will be matched
which are still in the database.
.TP
.B --installed-without-use
A useflag disabled during installation of the package.
Of course, this flag can only match if the package is installed.
Note that the same restrictions hold as for -I, i.e. only packages will be matched
which are still in the database.
.\" }}}

.\" {{{ -------- Match algorithms
.SS "Match algorithms"
.TP
.BR -e ", " --exact
Pattern is an exact string. For example, "eix -e gcc" will only show packages
with the name "gcc".
.TP
.BR -f " [" I<N> "], " --fuzzy " [" I<N> "]"
Do a fuzzy search with a maximal levenshtein-distance of I<N> (default @LEVENSHTEIN_DISTANCE@).
Note that this command slows down search speed.
.TP
.BR -p ", " --pattern
pattern is a wildcard-pattern. See
.BR fnmatch (3)
and/or
.BR glob (7)
for further information. Be sure to use single quotes around patterns (to prevent the
shell from intercepting any wildcards).
.TP
.BR -r ", " --regex
pattern is a regexp. -r is default, so you actually not need to type -r. For further
information, please read
.BR regex (7).
Again, be sure to use single quotes around patterns. (Default)
.\" }}}
.\" {{{ -------- Defining layouts
.SS Defining layouts \fP(see B<FORMATSTRING> below)
.TP
.BR --format " " I<FORMAT>
Define the normal layout for results as I<FORMAT>
.TP
.BR --format-compact " " I<FORMAT>
Define the compact layout for results as I<FORMAT>
.TP
.BR --format-verbose " " I<FORMAT>
Define the verbose layout for results as I<FORMAT>
.\" }}}
.\" }}}
.\" {{{ -------- Options for update-eix
.SS Special options for B<update-eix>
.TP
.BR  -o " " I<outputfile> ", " --output " " I<outputfile>
With this option, B<update-eix> will write the eix database to I<outputfile>
instead of B<@EIX_CACHEFILE@>, without testing or changing any permissions
of that file.
.TP
.BR  -a " " I<overlay> ", " --add-overlay " " I<overlay>
This is similar to adding I<overlay> to B<PORTDIR_OVERLAY> in /etc/make.conf
or to B<ADD_OVERLAY> but has the advantage that you need not modify some of those,
and you can also use spaces in I<overlay>.
Overlays added by this option come after overlays added by B<KEEP_VIRTUALS>.
If I<overlay> is already contained in the list of overlays, this option has no effect.
It is explicitly admissible to use this option repeatedly to add several overlays.

.TP
.BR -x " " I<overlay> ", " --exclude-overlay " " I<overlay>
This is similar to adding I<overlay> to B<EXCLUDE_OVERLAY>
but has the advantage that you need not modify the latter,
and you can also use spaces in I<overlay>.
I<overlay> is considered as a mask. All matching overlays
(even those added by later B<--add-overlay> options)
are excluded from the list of overlays.
The B<PORTDIR> directory is considered as any other overlay which can be excluded
(in this case, the first I<overlay> in the list will be stored as B<PORTDIR>).
It is explicitly admissible to use this option repeatedly to exclude several overlays.
.TP
.BR -m " " I<overlay> " " I<method> ", " --override-method " " I<overlay> " " I<method>
Change the cache method of I<overlay>
(the B<PORTDIR> directory is an allowed I<overlay>) to I<method>.
I<overlay> is considered as a mask, i.e. it may contain wildcards.
If I<overlay> does not match anything in the list of overlays,
this option has no effect.
This option is similar to adding I<overlay> I<method> to
B<ADD_OVERRIDE_CACHE_METHOD> but has the advantage that you need not
modify the latter and you can also use spaces in I<overlay> or I<method>.
It is explicitly admissible to use this option repeatedly to
override cache methods for several overlays.
The last matching override takes precedence.
.\" }}}

.\" {{{ OUTPUT
.SH OUTPUT
.SS Slots
In contrast to usual output of versions in emerge, B<eix>
can also print slot names if they are nonempty and different from "0".
Whether this happens is determined by the B<PRINT_SLOTS> variable and by
the content of the B<FORMATSTRING>.

If slots are printed, the slot name is separated from the version number
either with a colon, or the slot names are written in braces.
You can choose the preferred modes with the B<COLON_SLOTS> variable.
Some Examples:
.TP
.BR 4.1.1:4.1 "    or    " 4.1.1(4.1)
This is version 4.1.1 which will be installed into the slot "4.1".
.TP
.BR 3.14p:GNAT-3.14p "    or    " 3.14p(GNAT-3.14p)
This is version 3.14p which will be installed into the slot "GNAT-3.14p".
.TP
.B 2.0.0_rc1-r6
This is version 2.0.0_rc1-r6, and SLOT is either empty or "0".
.TP
.B 1.0!f!m
This is version 1.0 which is subject to fetch and mirror restrictions.
.TP
.B 5.0-r3(5.0R3)!f
This is version 5.0-r3 which will be installed into SLOT 5.0-r3 and has
fetch restrictions.

.SS Masking
If you used gentoo for more than a week you're probably going to immediately
recognize the format of the masking in the versions-strings.
Nevertheless, we are going to explain it here by some examples.
.TP
.B [P]2.95.3-r8
If a mask for the package was found in the packages-files from your profile, but this
version does not match it, the version is determined to be "masked by profile".
.TP
.B [M]4.0.0_alpha20050213
The version matches a mask from /etc/portage/package.mask, $PORTDIR/profiles/package.mask
or a package.mask from your profile. Portage calls this "masked by package.mask".
.TP
.B [m]4.1.4
The version matches a local mask (from /etc/portage/package.mask), but it is
neither "masked by profile" nor masked in $PORTDIR/profiles/package.mask.
.TP
.B {P}2.95.3-r8
The version was originally "masked by profile", but this was locally changed in /etc/portage/profile/packages.
.TP
.B {M}4.0.0_alpha20050213
The version was originally masked in $PORTDIR/profiles/package.mask, but this was locally changed in /etc/portage/package.unmask.
.TP
.B *3.3.3
This means the version is "masked by missing keyword" but stable for an alien architecture.
.TP
.B ~*3.3.3
This version is "masked by missing keyword", stable on no architecture, but unstable on an alien architecture.
.TP
.B **3.3.3
This means the version is "masked by missing keyword" for all architectures.
.TP
.B (**)3.4.3-r2
That version originally had no keyword, but this was locally changed (in /etc/portage/package.keywords or by ACCEPT_KEYWORDS).
.TP
.B -*3.4.3-r2
That version is "masked by -* keyword" for all architectures (soon obsolete).
.TP
.B -0.8.14
Masked by -ARCH.
.TP
.B ~3.3.5.20050130
The version would be "masked by ~keyword".
.TP
.B (~)3.3.5.20050130
The version was originally "masked by ~keyword", but this was locally changed (in /etc/portage/package.keywords or by ACCEPT_KEYWORDS).
.TP
.B [M]~1.0.9626
The version is both, "masked by package.mask" and "masked by ~keyword".
.TP
.B [m](~)4.1.4-r1
The version was originally only "masked by ~keyword", but this was locally changed (in /etc/portage/package.keywords or by ACCEPT_KEYWORDS).
However, the version is locally masked (in /etc/portage/package.mask).
.TP
.B 3.3.1
.RS
Finally, this would be a stable version (which would be stable also without the local settings).
.\" }}}

.\" {{{ FORMATSTRING
.SH FORMATSTRING
.LP
A formatstring can contain conditional blocks, package properties, colors and
normal strings.
If a formatstring expands to the empty string for a package, also the trailing
newline is not printed.
Thus you can put the whole formatstring into a conditional block to output
only packages matching the conditional.
An example of this wrapping is given below.
.\" {{{ -------- Conditional blocks
.SS Conditional blocks
Conditions are very simple: A property is expanded and the resulting string is
tested against another string. If they are the same, the condition is true and
the block is executed. Conditions can be negated so that the else-part is
executed if the condition is true, and the if-part if the condition is false.
The else-part can be also be completely left out.
.TP
.BR { [ ! ] I<VARIABLE> [ = I<STRING>] } I<TCODE> {}
Execute I<TCODE> if the string resulting from expanding I<VARIABLE> is equal to
I<STRING>.
The B<!> would negate the behaviour.

.TP
.BR { [ ! ] I<VARIABLE> [ = I<STRING>] } I<TCODE> {else} I<FCODE> {}
Execute I<TCODE> if the string resulting from expanding I<VARIABLE> is equal to
I<STRING>.  If it's not, execute I<FCODE>.
.\" }}}

.\" {{{ -------- Package properties
.SS Package properties
Names that refer to specific properties of the package that is currently
printed. If used to print a property, the name B<must be enclosed in square brackets>
(i.e. "<name>").
.TP
.BR name ", " category ", " homepage ", " licenses
The name, category, homepage and licenses for the current package.
.TP
.BR availableversions "  or  " availableversionslong
All versions including slots that could be installed for this package
(-l changes output accordingly).
The versions are printed in the according colors.
.TP
.B availableversionsshort
As B<availableversions>, but do not print any slots
.TP
.BR fullavailable ", " fullavailableshort ", " fullavailablelong
This is mainly a hack for scripts if you want to postprocess the output.
It is somewhat similar to B<availableversions*> but it produces for each
installed version a line of the form B<category/name-version> instead of
the plain version number. Keywords/masks are printed in front of the line
and slots (unless you use B<fullavailableshort>) are printed after the version.
Overlays and useflags (the format depending on whether B<-l> is in effect)
are also printed after the version.

If you use this, it is likely that you also want to use B<-x> (otherwise,
you might wonder about the sorting) and probably also B<EIX_PRINT_IUSE=false>
and B<--pure-packages>.
If you postprocess the output, do not forget that overlay data might be
included in the output and that the same version might occur in different overlays.
.TP
.B fullinstalled
This is mainly a hack for scripts if you want to postprocess the output.
For each installed version, this produces a line of the form
"B<category/name-version>". Note that overlay information is not printed.
To speed up things you should use option B<-i> in addition
if you only want to see this output.
(You will probably also want to use B<--pure-packages>).
However, see the warning in B<--installed>.
.TP
.BR installedversions [ :string ][ :string ] "" ...
All installed versions, including installation dates and useflags.
The separator between several versions is a space unless
useflags is nonempty or --versionlines is active: In these cases,
the separator contains a newline and several tabs and spaces.

When used to print the installed versions, you can add a colon-separated
list of strings. These strings will be output on the following places:

.BR "1st string: " "In front of each entry"

.BR "2nd string: " "Before slotname (if slotname is printed)"

.BR "3rd string: " "After versionnumber + slotname"

.BR "4th string: " "For fetch-restricted versions"

.BR "5th string: " "For mirror-restricted versions"

.BR "6th string: " "Before overlay (if overlay is printed)"

.BR "7th string: " "After version number + slotname + rsetrictions + overlay"

.BR "8th string: " "After each complete entry"

.BR "9th string: " "In front of the installation date (if it is printed)"

.BR "10th string: " "After the installation date (if it is printed)"

.BR "11th string: " "In front of the useflags (if they are printed)"

.BR "12th string: " "After the useflags (if they are printed)"

.BR "13th string: " "Before each set useflag"

.BR "14th string: " "After each set useflag"

.BR "15th string: " "Before each unset useflag. This defaults to '-'"

.BR "16th string: " "After each unset useflag."

.BR "17th string: " "Between two entries. The default is either (space) or (newlines + 3 tabs + 2 spaces), depending on whether useflags are printed or --versionlines is in effect"

.BR "later strings " "are ignored"

You can use "\\" to escape a colon or "\\" within these strings
(be aware that you have to escape "\\" in FORMAT* anyway, so you will usually
have to use "\\\\:" if you want to print a colon within such a string).

It is explicitly admissible that the strings contain colors in the format
described later: this is what you will probably use these strings for.
.TP
.BR installedversionsshort ", " installedversionsdate ", " installedversionsshortdate
All installed versions (without or with installation date or with installation date in short form, respectively),
separated by spaces. As for B<installedversions> you can also add a list
of colon-separated strings to influence the printing.
.TP
.B markedversions
All marked (with the B<--pipe> option) versions, separated by spaces.
.TP
.BR setnames ", " allsetnames
The name of all local sets to which the package belongs, separated by spaces.
With B<allsetnames> also the "system" set name is included.
.TP
.B overlaykey
if all versions are in the same overlay this expands to "overlaykey".
When printed, "[overlaykey]" is printed with corresponding colors.
.TP
.BR best "  or  " bestlong
the highest stable version, including slot information
.TP
.BR bestshort " or " bestshort*
the highest stable (or testing, respectively) version without slot information
.TP
.BR bestslots ", " bestslotslong ", " bestslots* ", or " bestslotslong*
for each slot the highest stable (or stable, respectively) version
with slot information, separated by spaces.
.TP
.BR bestslotsshort " or " bestslotshort*
for each slot the highest stable (or testing, respectively) version
without slot information, separated by spaces.
.TP
.B system
expands to "system" if this package is in the system profile
.TP
.B world
expands to "world" if this package is in the world file
.TP
.B world_sets
expands to "world_sets" if this package is in world sets
.TP
.B provide
the packages PROVIDE-string
.TP
.B marked
expands to "marked" if the package was passed with the B<--pipe> option.
This is mainly only useful in tests.
.TP
.BR upgrade ", " upgradeorinstall ", " downgrade ", " recommend ", " recommendorinstall
B<upgrade> expands to "upgrade" if the package is installed and at least one slot can be upgraded
(or the best stable version is a new slot and B<UPDATE_TO_HIGHEST_SLOT> is true).
The other variables test similarly whether the package can be upgraded or newly installed,
should be downgraded, can/should be upgraded/downgraded,
or can/should be upgraded/downgraded/installed, respectively.
The variable B<RECOMMEND_LOCAL_MODE> determines whether these tests obey B<LOCAL_PORTAGE_CONFIG>.
.TP
.BR bestupgrade ", " bestupgradeorinstall ", " bestdowngrade ", " bestrecommend ", " bestrecommendorinstall
as above with the difference that only the best stable version of the package
is taken into account (and not all slots).
.TP
.BR better ", " worse ", " differ ", " bestbetter ", " bestworse ", " bestdiffer
this can only be used in conditionals in B<DIFF_FORMAT_CHANGED>.
B<better> expands to "better" if the new package has a new slot or a better stable
version (or the same best stable version but from a different overlay number)
for some slot than the old package.
B<worse> means analogously that the old package had at least one better slot
or a slot which is not available in the new package.
B<differ> means that not all best stable slots of the old and new package
coincide.
The corresponding B<best*> versions have an analogous meaning with the
difference that only the best stable version is taken into account
(and not all slots).
The variable B<RECOMMEND_LOCAL_MODE> determines whether these tests obey B<LOCAL_PORTAGE_CONFIG>.
.TP
.BR old* ", " new*
this can only be used in B<DIFF_FORMAT_CHANGED>.
You can prefix any variable name to B<old> and B<new>, and the value
corresponds to that variable, taking the old resp. new data into account.
If neither B<old> nor B<new> is specified, the new version is assumed.
For example, B<oldbestslots> expands to the best slots of the old package,
while B<newbestslots> and B<bestslots> both expand to the best slots of the
current (i.e. new) package.
.\" }}}

.\" {{{ -------- Colors
.SS Colors
.TP
(I<NAME>,I<BRIGHTNESS>;I<MARKER>)
Each of the ",I<BRIGHTNESS>" and ";I<MARKERS>" parts may be omitted.

If I<BRIGHTNESS> is 1, eix prints the corresponding 'light' (bold) color for
I<NAME>, or normal color if I<BRIGHTNESS> is 0.

Available colors are:
I<default black red green yellow blue purple cyan gray>

Available markers are:
I<none bold underline blink inverse>
.\" }}}

.\" {{{ -------- Example
.SS Example:
.TP
{installedversions}(yellow,1;underline){else}(yellow,0){}<name>()
If the package is installed, print the name underlined in bright yellow,
else in normal yellow.
.SS Application:
.TP
.B FORMAT='{downgrade}%{FORMAT_COMPACT}{}' eix -I
This will print all installed packages for which there are downgrade recommendations.
Note that the compact format is used to output the packages:
We cannot use B<FORMAT='{downgrade}%{FORMAT}{}'> because this would be a self-reference.
However, if you want to use the default B<FORMAT> layout to output the packages,
we can use B<FORMAT_COMPACT> to wrap around B<FORMAT>:
.TP
.B FORMAT_COMPACT='{downgrade}%{FORMAT}{}' eix -cI
This is as above, but the matching packages will be printed with the default (non-compact) format.
The option B<-c> is needed so that eix will use our B<FORMAT_COMPACT> variable as the format string
(which we "misused" as a "wrapper" for B<FORMAT> in this example).
.\" }}}
.\" }}}

.\" {{{ FILES
.SH "FILES"
.LP
.\" {{{ -------- /etc/eix-sync.conf
.SS /etc/eix-sync.conf
This file stores commands and configurations to apply with B<eix-sync>.
Comments start with B<#> (all lines are cut at the first B<#>; it is not
possible to mask B<#>). Lines can have the following forms and will be
executed in the given order before B<emerge --sync> is executed.
.TP
.I option(s)
Use I<option(s)> as default for eix-sync (in front of all other options).
As usual, I<option(s)> must start with "B<->".
.TP
.I Name
Call B<layman -s> I<Name>.
Note that B<layman> is provided by B<app-portage/layman> to sync overlays.
.TP
.BR *
Call B<layman -S> (i.e. overlays are synced with layman).
.TP
.BI ! command
Execute I<command>. I<command> must exit successfully or B<eix-sync> will
stop with an error.
(Thus, B<!layman> I<Name> is more or less equivalent to
I<Name>; only different messages will be given during B<eix-sync>.)

You can use this feature to unpack e.g. an overlay before calling B<layman>
or to apply local fixes after B<layman> was called.
For security reasons, I<command> is run in a subshell (hence it is not
possible to set environment variables). If you need to set environment
variables use:
.TP
.BI !! command
This is similar to B<!> I<command> with the difference that I<command>
is not executed in a subshell. Moreover, I<command> is unconditionally executed,
i.e. even if options -d, -u, or -l are used.
The intention is that you can use I<command> to override (conditionally or
unconditionally) environment variables.
Be very careful when you use this feature:
You can easily override e.g. internal eix-sync shell functions or variables,
and since eix-sync is usually called as root, this can be very dangerous.
.TP
.BI ~ command
This is only important if eix-sync options B<-s> or B<-2> are used.
In this case, I<command> will be executed before the first call of B<rsync>;
the output of I<command> is evaluated within the POSIX script B<eix-sync>.
If I<command> or the evaluation of its output are not successful,
B<eix-sync> will stop with an error.
This can be used to execute e.g. B<keychain> and to return the content of
the appropriate I<~/.keychain/*-sh> file or to return export-commands for
the current B<SSH_AUTH_SOCK> and B<SSH_AGENT_PID>.
Is is also admissible that the output of I<command> is a command which
modifies the variables B<PORTAGE_RSYNC_OPTS>, B<PORTAGE_RSYNC_EXTRA_OPTS>,
B<PORTDIR>, B<PORTDIR_SERVER>, B<PORTDIR_CLIENT>, B<SERVER>, or B<CLIENT>.
These variables are filled with defaults when I<command> is called and
will later be used for the B<rsync> command(s) with their obvious meaning.
.TP
.BI @@ command
Adds a hook for I<command>; the actual execution of I<command> is postponed
until B<emerge --sync> was (successfully) called.
.TP
.BI @ command
Adds a hook for I<command>; the actual execution of I<command> is postponed
until B<emerge --sync> and the subsequent B<update-eix>
was (successfully) called.
.TP
Some examples of useful lines in B</etc/eix-sync.conf>:
.TP
.B -v
Use this if you want to see (instead of loggin) by default what is going on.
You can still revert the original behaviour by passing option -V.
.TP
.B -r -M
Use this if you use e.g. PORTDIR_CACHE_METHOD=assign and
B<FEATURES=metadata-transfer> is inactive or disabled
(the latter is the default in newer portage versions).
Depending on your needs you might want to use also B<-r> or B<-M> alone or
replace B<-M> by the line
.TP
.B @@emerge --regen
to use B<emerge --regen> instead of B<emerge --metadata>.
.TP
.B !!export FORCE_USECOLORS="${FORCE_USECOLORS:-true}"
.TP
.B ~keychain --quiet ~/.ssh/id_rsa ; cat ~/.keychain/"$(hostname)-sh"
.TP
.B @update-eix-remote update /var/cache/remote-cache.tbz2
(The last argument can also be omitted if you do not want a local copy
of the data.)
.TP
.B @@update-eix-remote fetch /var/cache/remote-cache.tbz2
.TP
.B @update-eix-remote add /var/cache/remote-cache.tbz2
.\" }}}

.\" {{{ -------- /var/log/eix-sync.log
.SS /var/log/eix-sync.log
The redirected output of B<eix-sync>. See B<eix-sync -h> for more details.
.\" }}}

.\" {{{ -------- @SYSCONFDIR@/eixrc
.SS @SYSCONFDIR@/eixrc
Global configuration file. The variables in B<~/.eixrc> or from the environment
can override the variables set in this file. See B<~/.eixrc>.
.\" }}}

.\" {{{ -------- EIXRC
.SS EIXRC
If this environment variable is set, its value is used instead of the filename
@SYSCONFDIR@/eixrc to read the configuration data. In this case, the file
~/.eixrc is ignored (but you can of course source it if you want it).
.\" }}}

.\" {{{ -------- ~/.eixrc
.SS ~/.eixrc
Per-user configuration file.
The variables in this file can be overridden by environment variables.
You can use a shell-like syntax to set the following variables.
In particular, you can source other files and you can use auxiliary variables to set other variables.

However, if you use auxiliary variables as usual, you will only see
the substituted values with --dump or --dump-defaults and you cannot
replace the inserted values e.g. by setting them in the environment.

For this reason, you can refer to variables besides the usual shell-way also
in the syntax B<%{>I<VARIABLE>B<}> (the braces here are not optional).
This means that the substitution is delayed until all configuration files
and environment variables are read, and the substitution will not show up
with --dump or --dump-defaults.

This concept is called delayed substitution/reference, and provides also
some additional features:

.\" {{{ -------- Special symbols
.TP
.B Special symbols for delayed substitution

.TP
.SS
.B " %%{"
This must be used if you need B<%{> in a variable text
(otherwise delayed substitution would take place).

.TP
.SS
.BI * VARIABLE
If a delayed reference uses a variable name starting with B<*>,
this B<*> is replaced by B<EIX_> or B<DIFF_>, depending on whether
it is used from B<eix>/B<update-eix> or from B<diff-eix>.
This way you can have different defaults for these programs.

For example the delayed reference B<%{*>I<VARIABLE>B<}> will insert
the expansion of B<EIX_>I<VARIABLE> or B<DIFF_>I<VARIABLE>, respectively.
.\" }}}

.\" {{{ -------- Conditional blocks as delayed reference
.TP
.B Conditional blocks in delayed references
If you want to substitute several variables completely differently,
depending on the state of a (Boolean) variable, you can use
conditional blocks.

This is somewhat analogous to Conditional Blocks in FORMATSTRING:
If the referenced variable expands finally to the boolean value true
(B<true>/B<1>/B<yes>/B<y>/B<on>) (resp. to something nonempty if you
preceed I<VARIABLE> with an additional B<?>) the result is true
and the corresponding block of the string is expanded.
Conditions can be negated so that the else-part is expanded if the
condition is true, and the if-part if the condition is false.
The else-part can be also be completely left out.
The special variable names B<*>I<VARIABLE> (instead of I<VARIABLE>)
can also be used in these conditionals.
.TP
.SS
.BI %{? VARIABLE } TCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to true.

.TP
.SS
.BI %{?? VARIABLE } TCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to a nonempty string.

.TP
.SS
.BI %{! VARIABLE } TCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to false.

.TP
.SS
.BI %{!? VARIABLE } TCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to the empty string.

.TP
.SS
.BI %{? VARIABLE } TCODE %{else} FCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to true, otherwise I<FCODE>.

.TP
.SS
.BI %{?? VARIABLE } TCODE %{else} FCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to a nonempty string,
otherwise I<FCODE>.

.TP
.SS
.BI %{! VARIABLE } TCODE %{else} FCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to false, otherwise I<FCODE>.

.TP
.SS
.BI %{!? VARIABLE } TCODE %{else} FCODE %{}
Expand I<TCODE> if I<VARIABLE> expands to the empty string,
otherwise I<FCODE>.

A conditional block must occur completely within one variable,
i.e. it is not possible to e.g. substitute the B<%{}> symbol
from another variable via delayed reference (but in I<TCODE>/I<FCODE>
delayed references can be used).
.SS ""
.\" }}}

Note that any variables you add for delayed substitution are only output
with --dump if they are actually used (i.e. referenced in some of the other variables).
If you want to output them anyway, e.g. for comments or easier later change,
you can collect references to them in the B<DUMMY> variable.

The following variables do not contain those which are used only in delayed references.
To get a full description of the latter (and of the defaults), please use B<eix --dump>.
.TP
.B DUMMY "  " (string)
This variable has no direct influence on the programs, but the content of this
variable can be used to collect delayed references to (otherwise unused) variables
so that they are printed with --dump or --dump-defaults.

.TP
.B EIXRC_SOURCE "  " (string)
This path is prepended to source commands in @SYSCONFDIR@/eixrc.
It is meant to be set in the environment but can also be set in @SYSCONFDIR@/eixrc.
In the latter case, it will override the setting from the environment as soon as it is read until all files are sourced.
Note that when this variable takes effect, no delayed substitution is performed yet.

.TP
.BR EPREFIX "  " (prefix-string) " (prefix-string means that this is a string, but if it has the value '/' it is changed to '')"

If the environment variable B<PORTAGE_CONFIGROOT> is not set, then this
variable is prefixed to the path where @SYSCONFDIR@/eixrc is searched
(otherwise B<PORTAGE_CONFIGROOT> is prefixed).

Moreover, this variable is used for delayed substitution to determine
the prefix of a lot of paths in the subsequent variables;
see B<eix --dump> to see in detail in which other variables it occurs.
In the current default, it influences all paths with the following exceptions:

.B @BINDIR@/update-eix-functions.sh

.B ~/.eixrc

.BR "cachefile path" "(s) passed in the commandline"

.BR PORTAGE_PROFILE " (only the variable, not the link)"

.B PORTDIR

.B Overlay paths

The last three items can be modified by B<EPREFIX_TREE>.

The purpose of B<EPREFIX> is to allow a quasi-chroot analogously to prefix-portage.
Note that as a prefix-portage user you will want to use option -e in eix-sync.
.TP
.B ROOT "  " (prefix-string)
.TP
.B EPREFIX_TREE "  " (prefix-string)
.TP
.B EPREFIX_ROOT "  " (prefix-string)

These are actually not internal variables of eix but they are just used for
delayed substitution for the following variables analogously to B<EPREFIX>
(see above).

The purpose of B<ROOT> is to follow roughly portage's usage of this variable.
Note that variables in /etc/make.conf do not influence eix configuration variables.
In particular, a B<ROOT=>I<something> command in /etc/make.conf does not influence eix.
You must set it instead in the environment or in an eix configuration file.

You can easily customize to which paths the B<EPREFIX> or B<ROOT> variables apply:
Simply use in the appropriate following variables either the delayed references
B<%{EPREFIX}>, B<%{ROOT}>, nothing, or B<%{EPREFIX_ROOT}> (which in turn is
defined as a delayed reference so that you can easily change what to do if
B<EPREFIX> and B<ROOT> are both nonempty: You might e.g. concatenate these
paths or use only one of them).
You can of course also use other variables as delayed references,
e.g. you might want to set

.B EIX_CACHEFILE="%{EPREFIX_PROFILE}@EIX_CACHEFILE@"

if you feel that the eix cachefile should depend (only) on the profile root.
.TP
.B PORTAGE_CONFIGROOT "  " (prefix-string)
This path is prepended to the /etc paths.
The purpose is to respect PORTAGE_CONFIGROOT in an analogous way portage does.
If you set this variable in the environment it will also change the path
where @SYSCONFDIR@/eixrc is searched. (Note that reading @SYSCONFDIR@/eixrc occurs before
delayed substitution takes effect.)

.TP
.B MAKE_GLOBALS "  " (string)
If this file exists, it is used instead of
B<%{PORTAGE_CONFIGROOT}/etc/make.globals>
The default value corresponds to >=portage-2.2* behavior.

.TP
.B EPREFIX_PORTAGE_EXEC "  " (prefix-string)
This path is used as a prefix for everything related to external portage tools.
In particular, for the cache-method eix this determines the path where some private executables
of portage are expected and where it is expected that these executables store their data.

.TP
.B EPREFIX_SOURCE "  " (prefix-string)
This path is prepended to paths occurring as the argument of source commands
in /etc/make.conf and /etc/make.globals.

.TP
.B EPREFIX_INSTALLED "  " (prefix-string)
This is prepended to the path where eix expects information about installed packages.

.TP
.B EPREFIX_PORTAGE_CACHE "  " (prefix-string)
This prefix is prepended to the portage cache.

.TP
.B EPREFIX_ACCESS_OVERLAYS "  " (prefix-string)
This prefix is prepended to overlays when their files are accessed.

.TP
.B EPREFIX_PORTDIR "  " (prefix-string)
This path is prepended to B<PORTDIR>.

.TP
.B EPREFIX_OVERLAYS "  " (prefix-string)
This prefix is prepended to all entries of B<PORTAGE_OVERLAY>.

.TP
.B EPREFIX_PROFILE "  " (prefix-string)
This prefix is prepended to B<PORTAGE_PROFILE> (the variable, not the link).

.TP
.B EPREFIX_VIRTUAL "  " (prefix-string)
This is prepended to overlays in the eix database to test whether they exist.

.TP
.B EIX_CACHEFILE "  " (string)
The eix cachefile (usually B<%{EPREFIX}@EIX_CACHEFILE@>).

.TP
.B EIX_WORLD "  " (string)
The file eix considers as the world file. Note that usually
this file is only readable if you are a member of the portage group.
To avoid needing this permissions you can use B<SAVE_WORLD>.

.TP
.B EIX_WORLD_SETS "  " (string)
The file eix considers as the world_sets file.
The same remarks as for B<EIX_WORLD> hold true.

.TP
.B EIX_LOCAL_SETS "  " (string)
The directory which contains the locally defined sets.

.TP
.BR SAVE_WORLD "  " (true / false)
If you set this to true, the information of your world file is stored in @EIX_CACHEFILE@.
Note that this means that anybody who can read this file has the information about
the content of your world file.
Make sure that this is really what you want if you set this to true.

.TP
.BR CURRENT_WORLD "  " (true / false)
If false, then the world file information stored in @EIX_CACHEFILE@ is used,
even if your current world file is readable.
Otherwise, your current world file (if it is readable) overrides that information.

.TP
.BR SKIP_PERMISSION_TESTS "  " (true / false)
If B<true>, update-eix will not check for groups and permissions.
You will probably want to set this to B<true> if you have a more sophisticated
permission setup on your system (NSS/LDAP, acl, pam-related stuff, ...)
in which case eix might guess wrong permissions.
The only negative side effect is that update-eix does not break with an error
at the beginning but will stop with a (perhaps misleading) error message when
trying to access the cache file without proper permissions.

.TP
.BR QUICKMODE "  " (true / false)
If true, eix and diff-eix will use B<--quick> by default.

.TP
.BR CAREMODE "  " (true / false)
If true, eix and diff-eix will use B<--care>.

.TP
.BR QUIETMODE "  " (true / false)
If true, eix and diff-eix will use B<--quiet> by default.

.TP
.BR DEFAULT_FORMAT "  " (normal / compact / verbose)
Defines whether B<--compact> or B<--verbose> is on by default.

.TP
.BR DIFF_ONLY_INSTALLED "  " (true / false)
If true, diff-eix will only consider version changes for installed packages.

.TP
.BR DIFF_NO_SLOTS "  " (true / false)
If true, diff-eix will not consider slots for version changes.

.TP
.BR DIFF_SEPARATE_DELETED "  " (true / false)
If true, diff-eix will print deleted packages in a section on their own.
Otherwise, diff-eix will mix deleted and changed packages "alphabetically".

.TP
.BR DIFF_PRINT_HEADER "  " (true / false)
If true, diff-eix will print a header info line.

.TP
.BR NO_RESTRICTIONS "  " (true / false)
If false, fetch and mirror restrictions are output.

.TP
.BR RESTRICT_INSTALLED "  " (true / false)
If true, fetch and mirror restrictions for installed versions are calculated.

.TP
.BR CARE_RESTRICT_INSTALLED "  " (true / false)
If true, fetch and mirror restrictions for installed versions are
always fetched from disk, even if it could be read from a corresponding version.
This is slower but more reliable, i.e. it will also find out whether restrictions were changed.

.TP
.BR FORMAT ", " FORMAT_COMPACT ", " FORMAT_VERBOSE "  " (Strings)
Define the normal, compact and verbose layout for results printed by B<eix> (See
B<FORMATSTRING>)

.TP
.BR DIFF_FORMAT_NEW ", " DIFF_FORMAT_DELETE ", " DIFF_FORMAT_CHANGED " " (Strings)
Define the format for packages that were added, removed or for which the highest
stable versions has changed. This is only used by B<diff-eix> (See
B<FORMATSTRING>)

.TP
.BR FORMAT_INSTALLATION_DATE ", " FORMAT_SHORT_INSTALLATION_DATE
Define the strftime() format used to print the installation date (in normal resp. short form).

.TP
.B FORMAT_INSTALLED_USE
Define the printf-like format used to print useflags of installed packages.
If this string is empty, the processing is slightly faster since then these data are not read.

.TP
.BR FORMAT_BEFORE_KEYWORDS ", " FORMAT_AFTER_KEYWORDS
These strings are printed before/after the KEYWORDS string for a version is printed.

.TP
.BR FORMAT_BEFORE_IUSE ", " FORMAT_AFTER_IUSE ", " FORMAT_BEFORE_COLL_IUSE ", " FORMAT_AFTER_COLL_IUSE ", " FORMAT_BEFORE_SLOT_IUSE ", " FORMAT_AFTER_SLOT_IUSE
These strings are printed before/after the IUSE data for a version
(resp. the collected IUSE for all versions of the package [in one-slotted resp. in slot-sorted displaymode]) is printed.

.TP
.BR COLOR_MASKED ", " COLOR_STABLE ", " COLOR_UNSTABLE ", " COLOR_SLOTS ", " COLOR_FETCH ", " COLOR_MIRROR ", " COLOR_OVERLAYKEY ", " COLOR_VIRTUALKEY "  " (Strings)
Define the color for masked versions, stable versions, unstable versions, slots, fetch-restricted version, mirror-restricted versions,
the overlay-key, and the overlay-key for "virtual" overlays (which are not absolute pathnames).
Use the same syntax as you would inside ().
See B<FORMATSTRING>.

.TP
.BR MARK_INSTALLED "  " (none ", " bold ", " underline ", " blink ", " inverse)
Mark the installed packages by this attribute when displaying versions.

.TP
.BR MARK_VERSIONS "  " (none ", " bold ", " underline ", " blink ", " inverse)
Mark the package versions passed with B<--pipe> by this attribute.

.TP
.BR FORCE_USECOLORS "  " (true / false)
Use colors even when stdout is not a terminal.

.TP
.BR COLOR_ORIGINAL "  " (true / false)
If false, versions are only colored according to the local setting.

.TP
.BR COLOR_LOCAL_MASK "  " (true / false)
If false, COLOR_ORIGINAL=false has no effect on versions which are only locally masked (i.e. [m]).

.TP
.BR STYLE_VERSION_SORTED "  " (true / false)
Defines whether B<--verionsorted> is on by default.

.TP
.BR STYLE_VERSION_LINES "  " (true / false)
Defines whether B<--versionlines> is on by default.

.TP
.BR COLORED_SLOTS "  " (true / false)
If false, the slotnames appended to versions are not colored.

.TP
.BR COLON_SLOTS "  " (true / false)
If true, slots are separated from the version names with a colon instead of braces.
This has the advantage that it takes one character less than braces and
thus makes listings of many versions shorter.

.TP
.BR DUP_PACKAGES_ONLY_OVERLAYS "  " (true / false)
Defines whether duplicate package checks occur only among overlays, i.e. a
package is only considered as duplicate if it occurs in at least two
different overlays.

.TP
.BR DUP_VERSIONS_ONLY_OVERLAYS "  " (true / false)
Defines whether duplicate version checks occur only among overlays, i.e. a
version is only considered as duplicate if it occurs at least twice in
overlays.

.TP
.BR DEFAULT_IS_OR "  " (true / false)
If several pattern arguments occur without logical concatenation (-a or -o),
eix assumes an implicit concatenation. If this variable is true, it assumes
that this concatenation is -o (or), otherwise -a (and).

.TP
.BR OVERLAYS_LIST "  " (all / all-if-used / all-used / all-used-renumbered / no)
People with many different overlays do not want to see all overlays listed at
the end but only those which are really used. Here, you can customize the
behaviour. The value is interpreted as follows:
.TP
.SS
.BR all-if-used / if-used / if
Display all overlays, if at least one is used. This was the default behaviour
before eix-0.6.0.
.TP
.SS
.BR used-renumbered / renumber / renumbered / number
Display only the overlays actually used, numbering them "correctly"
(i.e. if only two overlays are needed, number them [1] and [2]).
The disadvantage is that overlays get different numbers for different queries.
However, the order of the numbering is consistent.
.TP
.SS
.BR all-used / only-used / used
Display only the overlays actually used, keeping the numbering consistent
over all queries (on the same database).
.TP
.SS
.BR no / false
Never display a list of overlays.
.TP
.SS
.BR "" "anything else"
List all overlays for every query (even if not even one is needed).

.TP
.B LEVENSHTEIN_DISTANCE "  " (Integer)
Set default levenshtein-distance.

.TP
.B EXCLUDE_OVERLAY "  " (String)
Set a list of wildcard patterns for overlay paths that are excluded from the index (separators are [\\n\\r\\t ]).
See the B<update-eix> option B<--exclude-overlay>.

.TP
.B ADD_OVERLAY "  " (String)
Set a list of overlays that are added to the index (separators are [\\n\\r\\t ]).
See the B<update-eix> option B<--add-overlay>.

.TP
.BR PORTDIR_CACHE_METHOD ", " OVERLAY_CACHE_METHOD "  " (Strings)
Set the type of the cache used by portage and for overlays.
B<PORTDIR_CACHE_METHOD> defaults to I<@PORTDIR_CACHE_METHOD@>,
B<OVERLAY_CACHE_METHOD> to I<parse|ebuild*>.

B<Security Warning:>
If you do not completely trust the .ebuilds in your overlays,
you should set B<OVERLAY_CACHE_METHOD=parse>.

The available cache methods are described below.
You might want to specify a different cache method only for some overlays.
This can be done with the following variables:

.TP
.BR CACHE_METHOD ", " ADD_CACHE_METHOD ", " OVERRIDE_CACHE_METHOD ", " ADD_OVERRIDE_CACHE_METHOD
These variables are lists of the form I<overlay>[\\n\\r\\t ]I<method>.
The cache method of I<overlay> is set to I<method>, overriding the
settings of B<OVERLAY_CACHE_METHOD> (or of B<PORTDIR_CACHE_METHOD>
if I<overlay> is the B<PORTDIR> directory).
I<overlay> is interpreted as a wildcard pattern.
Later entries override earlier ones: The last matching entry takes precedence.

The reason for several variables is that additions/changes are possible
without touching the other variables:
The settings of B<OVERRIDE_CACHE_METHOD> extend/override the settings of
B<CACHE_METHOD> and, in addition, they extend/override the settings made
by B<KEEP_VIRTUALS> (see below).
The settings in B<ADD_CACHE_METHOD>/B<ADD_OVERRIDE_CACHE_METHOD>
extend/override the settings of B<CACHE_METHOD>/B<OVERRIDE_CACHE_METHOD>
and are meant to be used only locally.

The following cache methods are available:
.TP
.SS
.BR metadata-flat " or " metadata-flat:I<PATH>
Use the metadata-cache located inside the portage-tree ($PORTDIR/metadata/cache).
This is the default method which will always work if the portage tree is readable
when you run update-eix.

If you provide I<PATH>, it overrides the above path; in this case, it must be
the full path (i.e. no prefix is used). You might want to provide I<PATH> if
you use paludis to generate the metadata in the corresponding directory.
See also cache method B<flat> below.
.TP
.SS
.BR metadata-assign " or " metadata-assign:I<PATH>
This is similar to B<metadata-flat> with the difference that the files within
the metadata cache are expected to be in an "assignment format"
(TYPE=value) which is the case in some alt-gentoo trees.
.TP
.SS
.B sqlite
This is an extremely fast cache method if you are using portage with the
sqlite backend as described in
I<http://gentoo-wiki.com/TIP_speed_up_portage_with_sqlite>.
Note that in contrast to the default B<metadata> cache method you must
use B<emerge --metadata> before you call B<update-eix> with this method.

Since the support of this cache method requires B<sqlite> to be installed,
this method is not necessarily compiled in.
You must have emerged B<eix> with the appropriate USE flag
(or in a manual installation used I<./configure --with-sqlite>
before compilation) if you want support for this method.
.TP
.SS
.B " cdb"
Use this if you are using <portage-2.1 and the cdb-module from
I<http://forums.gentoo.org/viewtopic-t-261580.html> as
cache-backend for portage (cdb with cpickle'd dictionaries as values).
Note that in contrast to the default B<metadata-*> cache methods you must
use B<emerge --metadata> before you call B<update-eix> with this method.
.TP
.SS
.BR flat " or " flat:I<PATH>
This is similar to B<metadata-flat> with the difference that the metadata is
expected in the directory I<PATH>/<${PORTAGE_OR_OVERLAY_DIR}>.
If I<PATH> is omitted, it defaults to B</var/cache/edb/dep>.

You can use this cache method with <portage-2.1 and the default backend
or if you are using paludis to generate the metadata in the corresponding
directory.
.TP
.SS
.B assign " or " assign:I<PATH>
This is analogous to B<flat> with the difference that the files are
expected to be in an "assignment format" (TYPE=value).
This is the case if you use portage-2.1 with the default backend.

If you are using >=portage-2.1 and the default backend,
you might want to use this one if you do not have access to the portage
tree when you run update-eix.
Note that in contrast to the default B<metadata-*> cache methods you must
run B<emerge --metadata> before you call B<update-eix> with this method.
You will probably want to use a corresponding option in eix-sync in this case.
.TP
.SS
.B parse
Get the information from the ebuilds, parsing it using some heuristics.
Hence, this method has no security risk but possibly some other problems.
For example, if variables are only set in eclasses, this method will not see them.
Examples of problems with this method is missing SLOT information for
typical ebuilds from kde-base or stupid version numbers for gcc cross-compilers.
This is the cache-method B<none> from older eix versions (before 0.11.1).
.TP
.SS
.B parse*
This is essentially the same as cache method B<parse> with the difference
that variables are not expanded in variable definitions.
This is the cache-method B<none*> from older eix versions (before 0.11.1)
and cache-method B<none> from very old eix versions (before 0.7.1)
.TP
.SS
.B ebuild
If no portage cache is available (e.g. for overlays)
this is the most compatible but also the slowest method.
The information is obtained via "/usr/bin/ebuild ... depend" from the ebuild.
Since all ebuilds will get executed by bash, this may be a security risk
if you do not trust all ".ebuild" scripts or your environment variables.
B<update-eix> will attempt to change the user/group to
B<EBUILD_USER>/B<EBUILD_GROUP> (using B<EBUILD_UID>/B<EBUILD_GID> if the former
makes no sense) before executing the ebuild.
Intentionally, the environment is not cleared before the actual execution
so that you can pass further variables to the ebuild.
However, this can also lead to unexpected behaviour or even a security risk
since many bash scripts may be tricked with strange environments.
use B<env -i update-eix> when this causes problems.

.B Do not use this method if you do not completely trust all .ebuilds for which the method applies!
.TP
.SS
.B ebuild*
This is a slightly faster and slightly less compatible version of B<ebuild>:
The information is obtained via the undocumented "/usr/lib/portage/ebuild.sh".
Thus, instead of executing a python program for each ".ebuild" as for
cache-method B<ebuild>, "only" a lengthy shell-script and the ebuild itself
is executed (hence, also this method is unsafe if you do not trust all
".ebuild" scripts).
Most environment variables except for portage variables and PATH are cleared;
some .ebuild-specific variables like $P are set when the ebuild is executed.
This method is not quite as compatible as the method B<ebuild>, and its
success may depend more on the portage version.
However, this method is considerably faster than B<ebuild> and stable
enough to treat e.g. typical ebuilds from kde-base.

.B Do not use this method if you do not completely trust all .ebuilds for which the method applies!
.TP
.SS
.BR parse|ebuild ", " parse*|ebuild ", " parse|ebuild* ", " parse*|ebuild*
This is a mixture of B<parse>/B<parse*> and B<ebuild>/B<ebuild*>.
Each ebuild is first scanned as with method B<parse>/B<parse*>.
If the obtained result has missing information or appears strange,
the ebuild is treated as with cache method B<ebuild>/B<ebuild*>.
As a rule of thumb, this method is much faster than B<ebuild>/B<ebuild*>
but still much slower than B<parse>/B<parse*>.
It has the same security risks as B<ebuild>/B<ebuild*>, of course.

.B Do not use this method if you do not completely trust all .ebuilds for which the method applies!
.TP
.SS
.BR eix "  or   "  eix:I<FILE> "  or  " eix:I<FILE>:I<overlay>
Use the cachefile I<FILE> previously generated by B<update-eix>.
If omitted or empty, I<FILE> defaults to @EIX_CACHEFILE@.

As for all other cache methods, only those categories enabled by
profile/category (in the main tree or some overlay) are read.
If you do not want this, use B<eix*> (see below).

If the I<overlay> is given, then only the entries corresponding
to that overlay within I<FILE> are read. If I<overlay> is empty or not given,
this means that the "main" tree in I<FILE> is read.
I<overlay> is first considered as a wildcard pattern;
only the first overlay name in I<FILE>
(i.e. with the smallest number) matching I<overlay> is considered.
If no such name exists and I<overlay> is a number, then this number is
interpreted as the number of the overlay as stored in I<FILE>.
Note that I<overlay> has in general no relation with the current overlay
names or order - only the names/order stored in I<FILE> play a role here.

The magic value B<*> as I<overlay> has a special meaning. In this case,
all overlays in I<FILE> are read. However, this is usually not what you want:
If I<FILE> originally contained several overlays, this overlay structure
will appear "flattened".
.TP
.SS
.BR eix* "  or   "  eix*:I<FILE> "  or  " eix*:I<FILE>:I<overlay>
This is analogous to the cache method B<eix> with the difference that
all categories found in I<FILE> are added, even those categories which
were not enabled by some profile/categories file.

This cache method is useful if I<FILE> contains information for some
overlay directory for which the corresponding profile/categories on
the local machine is unknown or not necessarily up-to-date.
.TP
.BR KEEP_VIRTUALS " " (true / false)
If true, update-eix will keep all virtual overlays from the previous database
if that existed.
This has the same effect as appending for each virtual overlay of the previous
database the entry "I<overlay-name>" to B<ADD_OVERLAY> and appending a
corresponding entry "I<overlay> eix*::I<overlay>" to B<ADD_CACHE_METHOD>.
Note that this means that this option might override settings made in
B<CACHE_METHOD> and B<ADD_CACHE_METHOD>, but it might be overridden by
settings from B<OVERRIDE_CACHE_METHOD> and B<ADD_OVERRIDE_CACHE_METHOD>.
.TP
.BR LOCAL_PORTAGE_CONFIG " " (true / false)
If false, /etc/portage and B<ACCEPT_KEYWORDS> (from make.conf or the environment) are ignored.
Since eix-0.7.9, it is recommended to leave this value "true",
because setting it to "false" will just hide some informations.
.TP
.BR ALWAYS_ACCEPT_KEYWORDS " " (true / false)
If true, B<ACCEPT_KEYWORDS> is used even without B<LOCAL_PORTAGE_CONFIG>,
e.g. to determine the `default' stability.
.TP
.BR UPGRADE_LOCAL_MODE " " (+ " or " local / - " or " non-local "/anything else" )
If this variable is B<+> / B<->, the B<--upgrade> option of eix will always
match as if B<LOCAL_PORTAGE_CONFIG> was set to B<true> / B<false>.
.TP
.BR RECOMMEND_LOCAL_MODE " " (+ "  or " local / - " or " non-local "/anything else" )
If this variable is B<+> / B<-> the upgrade/downgrade recommendations
as well as in diff-eix the tests for version changes will act as is
B<LOCAL_PORTAGE_CONFIG> was set to B<true> / B<false>.
.TP
.BR UPGRADE_TO_HIGHEST_SLOT " " (true / false)
If true, all upgrade tests will give a positive result for an installed
package for which not the slot with the best stable version is installed.
.TP
.BR PRINT_SLOTS " " (true / false)
If B<false>, no slot information is printed.
.TP
.BR PRINT_KEYWORDS " " (first / before / after / last / true / false)
If not B<false> and --versionlines is active, the KEYWORDS string is
printed after the version (and before/after the IUSE data).
Currently, B<first> and B<true> have the same meaning as B<before>,
and B<last> has the same meaning as B<after>.
.TP
.BR PRINT_IUSE " " (true / false)
If B<true>, print IUSE data.
If --versionlines is active, the data is printed on a per-version base.
Otherwise all IUSE data corresponding to some version of the package is
printed collected.
.TP
.BR SORT_INST_USE_ALPHA " " (true / false)
If B<true>, print the useflags of installed packages in alphabetical order.
Otherwise, first those useflags are printed (in alphabetical order) which
were set when the package was emerged, then the others are printed
(in alphabetical order).
.TP
.BR CHECK_INSTALLED_OVERLAYS " " (true / false / repository)
If B<true>, always check from which overlay a package was installed.
If B<false>, only packages with versions in at least two trees are checked,
i.e. only packages for which it appears reasonable from the database that
it might have been installed from a different overlay.
However, this information might be false if such a package was removed
from an overlay or if a whole overlay is not in the database anymore.

The special value B<repository> is a reasonable compromise:
If repository data was stored during emerge (this is the case only with current
portage versions; you can use B<eix-test-obsolete [no-]repository> to check
for which versions this is (not) the case) then this repository data is always used.
Only if it is unreadable or does not match, the behaviour for that version
is the same as in case B<CHECK_INSTALLED_OVERLAYS=false>.

Especially in connection with option -T (if B<NONEXISTENT_IF_OTHER_OVERLAY>
is true) and with option -J the speed increase is enormously if you set this
variable to B<false> or B<repository>, but you should be aware that the
information used about the installed overlay is not completely reliable
(for versions installed with old portage versions).
In particular, the option -T will not detect if an installed version of
a package actually stems from a redundant overlay if in the current database
all versions of this package stem from one (other) location.
.TP
.BR OBSOLETE_MINUSASTERISK " " (true / false)
If true, treat B<-*> in /etc/portage/package.keywords as portage-2.1.2 and earlier versions do.
Since portage-2.1.2, the B<-*> keyword is practically obsolete and was replaced by B<**> which accepts anything (even an ebuild with empty B<KEYWORDS>).
Note that there are also the related keywords B<*> and B<~*> which accept stable or unstable versions of any arch listed in B<KEYWORDS>.
.TP
.BR PRINT_COUNT_ALWAYS " " (true / false / never)
If true, always print the number of matches in the last line, even if this
number is 0 or 1.
If B<PRINT_COUNT_ALWAYS=never>, then this last line is omitted completely.
Both is normally not useful but might simplify writing certain scripts
parsing the output of eix.
.TP
.BR COUNT_ONLY_PRINTED " " (true / false)
If false, print only the number of matches, independently of whether the
matches actually lead to some output.
This might be useful for certain scripts if you are only interested in the
number of matches and use e.g. B<FORMAT=''> to speed things up.
.TP
.B TAG_FOR_PROFILE TAG_FOR_MASKED TAG_FOR_EX_PROFILE TAG_FOR_EX_MASKED TAG_FOR_LOCALLY_MASKED TAG_FOR_STABLE TAG_FOR_UNSTABLE TAG_FOR_MINUS_ASTERISK TAG_FOR_MINUS_KEYWORD TAG_FOR_ALIEN_STABLE TAG_FOR_ALIEN_UNSTABLE TAG_FOR_MISSING_KEYWORD TAG_FOR_EX_UNSTABLE TAG_FOR_EX_MINUS_ASTERISK TAG_FOR_EX_MINUS_KEYWORD TAG_FOR_EX_ALIEN_STABLE TAG_FOR_EX_ALIEN_UNSTABLE TAG_FOR_EX_MISSING_KEYWORD " " (String)
The tags which are printed in front of the version numbers to make the masking/stability and their local settings visible.
.TP
.B TAG_FETCH TAG_MIRROR " " (String)
The tags which are printed for versions with fetch or mirror restrictions.
.TP
.\" {{{ Default Matchfields for different strings.
.B MATCH_NAME_IF " " (String)
Use NAME as default matchfield if the string matches the given regex.
.TP
.B MATCH_DESCRIPTION_IF " " (String)
Use DESCRIPTION as default matchfield if the string matches the given regex.
.TP
.B MATCH_LICENSE_IF " " (String)
Use LICENSE as default matchfield if the string matches the given regex.
.TP
.B MATCH_CATEGORY_IF " " (String)
Use CATEGORY as default matchfield if the string matches the given regex.
.TP
.B MATCH_CATEGORY_NAME_IF " " (String)
Use CATEGORY_NAME as default matchfield if the string matches the given regex.
.TP
.B MATCH_HOMEPAGE_IF " " (String)
Use HOMEPAGE as default matchfield if the string matches the given regex.
.TP
.B MATCH_IUSE_IF " " (String)
Use USE as default matchfield if the string matches the given regex.
.TP
.B MATCH_PROVIDE_IF " " (String)
Use PROVIDE as default matchfield if the string matches the given regex.
.TP
.B MATCH_SLOT_IF " " (String)
Use SLOT as default matchfield if the string matches the given regex.
.TP
.B MATCH_INSTALLED_SLOT_IF " " (String)
Use INSTALLED_SLOT as default matchfield if the string matches the given regex.
.TP
.B MATCH_SET_IF " " (String)
Use SET as default matchfield if the string matches the given regex.
.TP
.B MATCH_ORDER " " (String)
Try regex from MATCH_\\(.*\\)_IF in this order. Use whitespaces as delimiter.
.TP
.\" }}}
.\" {{{ Definition of Redundancy
.BR TEST_FOR_EMPTY "  " (true / false)
Defines whether empty entries in /etc/portage/package.* are shown with -t.
.TP
.BR TEST_KEYWORDS "  " (true / false)
Defines whether /etc/portage/package.keywords is tested with -t.
.TP
.BR TEST_MASK "  " (true / false)
Defines whether /etc/portage/package.mask is tested with -t.
.TP
.BR TEST_UNMASK "  " (true / false)
Defines whether /etc/portage/package.unmask is tested with -t.
.TP
.BR TEST_USE "  " (true / false)
Defines whether /etc/portage/package.use is tested with -t.
.TP
.BR TEST_CFLAGS "  " (true / false)
Defines whether /etc/portage/package.cflags is tested with -t.
.TP
.BR TEST_REMOVED "  " (true / false)
Defines whether removed packages are tested with -t.
.TP
.BR TEST_FOR_NONEXISTENT "  " (true / false)
Defines whether non-existing installed versions are positive for -T.
What is considered as non-existent is defined by the B<NONEXISTENT_IF>-variables.
.TP
.BR TEST_FOR_REDUNDANCY "  " (true / false)
Defines whether redundant entries in /etc/portage/package.* are positive for -T.
What is considered as redundant is defined by the B<REDUNDANT_IF>-variables.
.TP
.BR ACCEPT_KEYWORDS_AS_ARCH "  " (true / false)
If true modify ARCH by ACCEPT_KEYWORDS.
This determines which keywords are considered as ARCH or OTHERARCH.
.TP
.BR NONEXISTENT_IF_OTHER_OVERLAY "  " (true / false)
Defines whether versions are non-existent for TEST_FOR_NONEXISTENT
if they come from a different overlay than the installed version.
.TP
.BR NONEXISTENT_IF_MASKED "  " (true / false)
Defines whether masked versions are non-existent for TEST_FOR_NONEXISTENT.
.TP
.B REDUNDANT_IF_DOUBLE " " (String)
Applies if /etc/portage/package.keywords lists the same keyword twice
for some/all (un-/installed) versions.

B<String> describes which versions should be tested.
It can have the following values:
.TP
.SS
.BR no " or " false
Do not test for this type of redundancy.
.TP
.SS
.B some
It suffices that the redundancy occurs for some version in the database.
.TP
.SS
.B " all"
The redundancy must occur for all versions in the database.
.TP
.SS
.B some-installed
It suffices that the redundancy occurs for some installed version.
Uninstalled versions are ignored for this test.
.TP
.SS
.B all-installed
The redundancy must occurs at least for all installed versions of the package.
If no version is installed, it must occur at least once.
.TP
.SS
.B some-uninstalled
It suffices that the redundancy occurs for some uninstalled version.
Installed versions are ignored for this test.
.TP
.SS
.B all-uninstalled
The redundancy must occurs at least for all uninstalled versions.
If all versions in the database are installed, it must occur at least once.
.TP
.SS
.BR "-" "some of the above  or  " "+" "some of the above"
The test only applies if in addition no version (in case B<->)
resp. at least some version (in case B<+>) of the package is installed.
.TP
.SS
.RB "some of the above  " or "  some of the above"
The result is positive if at least one of the two tests is positive.
Instead of "B<or>"  also the symbols "B<|>" or "B<||>" can be used.
.TP
.B REDUNDANT_IF_DOUBLE_LINE " " (String)
Applies if /etc/portage/package.keywords has two lines for identical targets,
i.e. such that portage would drop the first of these lines.
Note that lines with targets B<foo/bar> and B<=foo/bar-1> are considered as
different in this context by portage (and thus also by eix)
even if B<foo/bar> would apply to version B<1>.
The latter redundancy can be found implicitly with B<REDUNDANT_IF_DOUBLE_LINE>,
B<REDUNDANT_IF_MIXED>, and B<REDUNDANT_IF_STRANGE>.
.TP
.BR REDUNDANT_IF_MIXED "  " (String ", see above")
Applies if /etc/portage/package.keywords lists two different keywords,
e.g. ~ARCH and -*, for the versions in question.
.TP
.BR REDUNDANT_IF_WEAKER "  " (String ", see above")
Applies if /etc/portage/package.keywords lists a keywords which can
be replaced by a weaker keyword, e.g. -* or ~OTHERARCH or OTHERARCH
in place of ~ARCH, or ~OTHERARCH in place of OTHERARCH,
for the versions in question.
.TP
.BR REDUNDANT_IF_STRANGE "  " (String ", see above")
Applies if /etc/portage/package.keywords lists a strange keyword,
e.g. UNKNOWNARCH (unknown to the .ebuild and ARCH) or -OTHERARCH,
for the versions in question.
.TP
.BR REDUNDANT_IF_MINUSASTERISK "  " (String ", see above")
Applies if /etc/portage/package.keywords contains some -* entry.
This test only applies if B<OBSOLETE_MINUSASTERISK> is false.
.TP
.BR REDUNDANT_IF_NO_CHANGE "  " (String ", see above")
Applies if /etc/portage/package.keywords provides keywords which do not
change the availability keywords status for the versions in question.
.TP
.BR REDUNDANT_IF_MASK_NO_CHANGE "  " (String ", see above")
Applies if /etc/portage/package.mask contains entries
which do not change the mask status for the versions in question.
.TP
.BR REDUNDANT_IF_UNMASK_NO_CHANGE "  " (String ", see above")
Applies if /etc/portage/package.unmask contains entries
which do not change the mask status for the versions in question.
.TP
.BR REDUNDANT_IF_DOUBLE_MASKED "  " (String ", see above")
Applies if /etc/portage/package.mask matches twice
for the versions in question.
.TP
.BR REDUNDANT_IF_DOUBLE_UNMASKED "  " (String ", see above")
Applies if /etc/portage/package.unmask matches twice
for the versions in question.
.TP
.BR REDUNDANT_IF_DOUBLE_USE "  " (String ", see above")
Applies if /etc/portage/package.use matches twice
for the versions in question.
.TP
.BR REDUNDANT_IF_DOUBLE_CFLAGS "  " (String ", see above")
Applies if /etc/portage/package.cflags matches twice
for the versions in question.
Note that this file is not supported by portage, but you might e.g. have built some
support for it in your personal /etc/portage/bashrc file.
Of course, this means that also no format for /etc/portage/package.cflags is defined.
eix assumes that the format is analogous to /etc/portage/package.{keywords,use}
(i.e. an entry is at most one line, with the matching version(s) at the beginning).
As the other /etc/portage/package.* files, /etc/portage/package.cflags may also be a directory tree;
in this case, all non-hidden files/subdirectories in this tree are read recursively,
resolving all symbolic links.
.TP
.BR REDUNDANT_IF_IN_KEYWORDS "  " (String ", see above")
Applies if /etc/portage/package.keywords contains a nonempty entry matching the versions in question
(to find empty entries use -t).
Of course, one will certainly not consider all matches as a redundancy
(although one might misuse this option to simply list all matches).
However, one might consider matching but non-installed packages as redundant.
Hence, typically one might want to set this variable to the value B<-some> or the equivalent value B<-some-uninstalled>
(or to B<false> if one thinks that entries for uninstalled packages are "normal" and not redundant).
.TP
.BR REDUNDANT_IF_IN_MASK "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.mask.
.TP
.BR REDUNDANT_IF_IN_UNMASK "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.unmask.
.TP
.BR REDUNDANT_IF_IN_USE "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.use.
.TP
.BR REDUNDANT_IF_IN_CFLAGS "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.cflags.
See the above comments about this file.
.TP
.BR KEYWORDS_NONEXISTENT "  " (String)
This is the filename of /etc/portage/package.keywords.nonexistent
.TP
.BR MASK_NONEXISTENT "  " (String)
This is the filename of /etc/portage/package.mask.nonexistent
.TP
.BR UNMASK_NONEXISTENT "  " (String)
This is the filename of /etc/portage/package.unmask.nonexistent
.TP
.BR USE_NONEXISTENT "  " (String)
This is the filename of /etc/portage/package.use.nonexistent
.TP
.BR CFLAGS_NONEXISTENT "  " (String)
This is the filename of /etc/portage/package.cflags.nonexistent
.TP
.BR INSTALLED_NONEXISTENT "  " (String)
This is the filename of /etc/portage/package.installed.nonexistent
.TP
.BR KEYWORDS_NOWARN "  " (String)
This is the filename of /etc/portage/package.keywords.nowarn
.TP
.BR MASK_NOWARN "  " (String)
This is the filename of /etc/portage/package.mask.nowarn
.TP
.BR UNMASK_NOWARN "  " (String)
This is the filename of /etc/portage/package.unmask.nowarn
.TP
.BR USE_NOWARN "  " (String)
This is the filename of /etc/portage/package.use.nowarn
.TP
.BR CFLAGS_NOWARN "  " (String)
This is the filename of /etc/portage/package.cflags.nowarn
.TP
.BR INSTALLED_NOWARN "  " (String)
This is the filename of /etc/portage/package.installed.nowarn
.\" }}}
.\" }}}

.\" {{{ /etc/portage/package.*.nonexistent
.SS /etc/portage/package.{keywords,mask,unmask,use,cflags}.nonexistent
Similarly as /etc/portage/package.*, this can be a file or a directory.
If an entry (separated by space or newline) matches the first word of a line
in the corresponding /etc/portage/package.{keywords,mask,unmask,use,cflags}
file, this line is excluded from the -t tests (for names not in the database).
You can use this to eliminate certain warning from -t.
.SS /etc/portage/package.installed.nonexistent
This is similar to the other /etc/portage/package.*.nonexistent files/dirs
with the difference that it eliminates messages from -t about installed
packages which had been removed from the database.
The entries of this file are of the form "category/name", but you can also
omit the "category/" part (although this is not recommended).
.\" }}}

.\" {{{ /etc/portage/package.*.nowarn
.SS /etc/portage/package.keywords.nowarn
Similarly as /etc/portage/package.*, this can be a file or a directory.
With this file/dir you can switch off test for -T for particular packages.
The format of the file is as follows:
Each line should start with the package (in the form "category/name")
for which you want to switch off some tests; then you can list
(separated by spaces) the tests which you want to switch off.
For example, the line

.B sys-kernel/hardened-sources no_change weaker

in this file will cause that -T does not find the package
sys-kernel/hardened-sources if the only cause for it would be that
B<REDUNDANT_IF_NO_CHANGE> or B<REDUNDANT_IF_WEAKER> is set.

You can list a package several times in this file; the listed tests are
then cumulative for the corresponding package.
Since all other /etc/portage/package.*.nowarn files have the same policy,
you can just merge all these into one file if you prefer (you can e.g. set
the B<*_NOWARN> variables to the same filenames).

Available tests in /etc/portage/package.keywords.nowarn are
B<in_keywords>, B<no_change>, B<double>, B<mixed>, B<weaker>,
B<minusasterisk>, B<double_line>, and they correspond to the analogous
B<REDUNDNANT_IF_*> variable.
.SS /etc/portage/package.mask.nowarn
This is analogous to the above with the difference that the available tests are
B<in_mask>, B<mask_no_change>, B<double_masked>.
.SS /etc/portage/package.unmask.nowarn
This is analogous to the above with the difference that the available tests are
B<in_unmask>, B<unmask_no_change>, B<double_unmasked>.
.SS /etc/portage/package.use.nowarn
This is analogous to the above with the difference that the available tests are
B<in_use>, B<double_use>.
.SS /etc/portage/package.cflags.nowarn
This is analogous to the above with the difference that the available tests are
B<in_cflags>, B<double_cflags>.
.SS /etc/portage/package.installed.nowarn
This is analogous to the above with the difference that the available tests are
B<nonexistent>, B<masked>, B<other_overlay> which correspond to the respective variables
B<TEST_FOR_NONEXISTENT>, B<NONEXISTENT_IF_MASKED>, B<NONEXISTENT_IF_OTHER_OVERLAY>.
.\" }}}

.\" {{{ -------- @EIX_CACHEFILE@
.SS @EIX_CACHEFILE@
This is the binary database for eix.
The path can be changed with the B<EIX_CACHEFILE> variable
(which by default honours B<EPREFIX> via delayed reference).
But only when the unmodified path @EIX_CACHEFILE@ is used, B<update-eix>
will perform certain permission tests in advance.
.\" }}}
.\" }}}

.\" {{{ BUGS
.SH "BUGS (and sort of FAQ)"
.LP
diff-eix does never consider /etc/portage/profile. (Reason: The saved database
contains only the masking state according to the original profile, but not the
profile itself.
On the other hand, /etc/portage/profile can only be interpreted when the
profile is known.)

The output with the default B<OVERLAYS_LIST=all-used-renumbered> is confusing when one wants
to use the overlay number in some eix variable/command-argument.

There is no cache method setting which gets information from overlays
(for which no portage cache metadata is available) fast and reliable -
you must always choose between one of these two extremes.
The default is the fast one, but it shows often false slots and has other problems.

All the B<EPREFIX>/B<ROOT> stuff is confusing.
In particular, by the mere fact of allowing much of these variables,
eix will always be vulnerable to local attacks if it is called with a possibly unsafe environment.

The previous default B<KEEP_VIRTUALS=true> used to confuse people.
However, with the new default, nobody will find out that this feature exists.
:(

There is no default setting of B<OBSOLETE_MINUSASTERISK> which satisfies both,
people using old portage and people using new portage.

There are too many features: The documentation and configuration has become too complicated.
On the other hand, there are still many things which cannot be configured...
.\" }}}

.\" {{{ HISTORY
.SH "HISTORY"
.LP
B<eix> was formerly known as B<portagedb>. The name was changed because a part of
portage is also called portagedb, which was a bit confusing for everyone.

The functionality of update-eix was once triggered by using the -u switch on eix.
It was than separated to provide better maintainability.
Thus update-eix came to life.
Meanwhile, it is the same executable with functionality distinguished by its call name.

Since the introduction of the %{*VARIABLE} syntax in eix-0.8.0, it is not
reasonable anymore to use different variable names for eix and diff-eix.
Hence, all corresponding B<DIFF_*> variables have vanished.

The cache method B<metadata-flat> was previously just called B<metadata>.
The cache method B<assign> was previously called B<backport> or B<portage-2.1>.
The cache method B<flat> had previously the name B<portage-2.0> which was even preferred.
Anyway, the obsolete names are still supported.

portage-2.1 and portage-2.1.1 doesn't remove the old dep-cache, thus eix does
always find packages that are not in portage anymore if the B<flat>/B<assign>
cache method is used.
To circumvent this, eix-sync used to delete the old cache
(rm -rf /var/cache/edb/dep/*).
Since most people have no need to use this cache method anymore and
deleting the old cache slows down the next portage run, this is
not the default anymore (but still available as an option which can be
put into /etc/eix-sync.conf).

eix-sync used to default to gensync instead of layman.
See the description of /etc/eix-sync.conf how you can still use the
deprecated gensync if you want to.
.\" }}}

.\" {{{ AUTHORS
.SH "AUTHORS"
.LP

Martin V\[:a]th  <vaeth at mathematik.uni-wuerzburg.de> (developer, current maintainer)

Emil Beinroth <emilbeinroth at gmx.net> (developer, previous maintainer)


Wolfgang Frisch <xororand at users.sourceforge.net> (inactive developer, initial author)

Roland Wittmann <linuxcommando at users.sourceforge.net> (inactive developer)
.\" }}}

.\" {{{ SEE ALSO
.SH "SEE ALSO"
.BR portage (5),
.\" Match-algorithms
.BR fnmatch (3),
.BR regex (7),
.\" Other search-utils
.BR emerge (1),
.BR esearch (1),
.BR qsearch (1),
.\" Related software .. e.g. stuff we use
.BR layman (8)
.LP
The eix homepage \fI@PACKAGE_BUGREPORT@\fR provides further information and links.
.\" }}}
.\" vim:set tw=90 expandtab foldenable foldmethod=marker foldlevel=0 :
