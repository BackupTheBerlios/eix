.TH "eix" "1" "$Date$" "@PACKAGE_STRING@" ""
.\" {{{ NAME
.SH "NAME"
.B eix
- a set of utilities for searching, diffing and updating a binary cache of your local portage-trees
.\" }}}

.\" {{{ SYNOPSIS
.SH "SYNOPSIS"
.BR eix
[I<common options>] [I<OPTIONS>] I<EXPRESSION...>
.PP
A I<EXPRESSION> can be:
    I<EXPRESSION> [B<-a>|B<-o>] I<EXPRESSION>
    [I<local options>] I<PATTERN>

.BR update-eix
[I<common options>] [I<update-eix options>]

.BR diff-eix
[I<common options>] I<OLD-CACHE> [I<NEW-CACHE>]

.BR eix-sync

.BR update-eix-remote
.\" }}}

.\" {{{ DESCRIPTION
.SH "DESCRIPTION"
B<update-eix> generates a binary cache from your local portage-tree and overlays.
B<eix> searches this cache for packages that match the criteria you specified.
B<diff-eix> compares two binary caches and finds packages that were added, removed or for
which the highest stable versions has changed.

B<eix-sync> can sync the portage/overlay trees and compare them with the old cache
using B<diff-eix>.
To get more help on B<eix-sync> call B<eix-sync -h> and see the documentation
of I</etc/eix-sync.conf>

B<update-eix-remote> can sync an eix database from an external server and
add/remove it to the current database.
To get more help on B<update-eix-remove> call B<update-eix-remove -h>.
.\" }}}

.\" {{{ OPTIONS
.SH "OPTIONS"
.\" {{{ -------- Common options
.SS Common options
These options are common to B<eix>, B<diff-eix>, and B<update-eix>.
.TP
.BR -h ", " --help
Print a help screen and exit.
.TP
.BR -Q ", " --quick "   (toggle)    (not for B<update-eix>)"
Do (not) read the slots of installed versions which cannot be guessed
(i.e. installed versions of packages with at least two different slots
for which the installed version is not in the database anymore).
Note that with this option, eix and diff-eix might report false positives
for up-/downgrade recommendations for these packages.
.TP
.BR --care "    (not for B<update-eix>)"
This deactivates --quick, and moreover, slots of installed version are
always read instead of relying on the guess of the slot.
This will in particular make sure that you get an up-/downgrade
recommendation if a slot name of an installed version changes.
Note that this will dramatically decrease the speed at the first call.
(If your filesystem has a reasonable cache, later calls are almost not
slower than without this option).
.TP
.BR -q ", " --quiet "   (toggle)"
Produce no output on stderr and stdout (fatal errors which occur at the
beginning of execution are printed to stderr, regardless of this option).
.TP
.BR --dump
Show the current eixrc-variables, and their defaults as comments.
.TP
.BR --dump-defaults
Show the defaults of the eixrc-variables, and their current values as comments.
.TP
.BR -V ", " --version
Print version and exit.
.TP
.BR -n ", " --nocolor
Disables the use of ANSI color codes. This is useful for terminals that do not support ANSI colors.
(This is automatically turned on if stdout is no tty, but can be overridden by using --force-color)
.TP
.BR -F ", " --force-color
The opposite of --nocolor.
.TP
.\" }}}

.\" {{{ -------- Output options
.SS Output options
.TP
.BR -x ", " --versionsort "    (toggle)"
Prints available versions sorted by slots/versions.
If sorted by slots, each new slot starts in a new line.
.TP
.BR -l ", " --versionlines "   (toggle)"
Prints available versions in a (vertical) list.
.TP
.BR -c ", " --compact "   (toggle)"
Causes eix to use a compact layout for search results. Useful for obtaining a better
overview in the case of a long list of results, and also to help speed up searching over
slow connections such as a serial console.
.TP
.BR -v ", " --verbose "   (toggle)"
Use a verbose layout with additional information about search results such as the license
of a package.
.\" }}}

.\" {{{ -------- Options for eix
.SS Special options for B<eix>
.TP
.BR -t ", " --test-non-matching
Before other output, print entries of /etc/portage/package.* which do not
match any existing version in the package database or which apparently have
no meaning because they are empty (see B<TEST_FOR_EMPTY>).

This option also lists all installed packages whose name is not in the database.

Note that this is essentially different from B<-T> (see below).
The latter only tests for packages B<in the database> whether redundant
entries in /etc/portage/package.* exist or whether the installed versions
are available, respectively.

This option is best combined with -T to clean up /etc/portage/package.*

.\" {{{ -------- Options for expressions
.SS Options for expressions
.TP
.BR -I ", " --installed
Only match installed packages. Please don't use this as a replacement for qlist -ICv or
equery, it's not the same. This only show packages that could be installed and that are
installed. Packages that are installed, but no longer in portage are not listed here.
.TP
.BR -i ", " --multi-installed
Only match packages which are installed in at least two different versions.
Usually, this means that these versions are slotted (at installation time).
.TP
.BR -d ", " --dup-packages
Only match duplicated packages,
for example, if sys-foo/bar exists both in the official portage tree and a local overlay.
If B<DUP_PACKAGES_ONLY_OVERLAYS> is set (see below), the instances must be in two different local overlays.
.TP
.BR -D ", " --dup-versions
Only match packages with duplicated versions,
for example, if sys-foo/bar-0.2.1 exists both in the official portage tree and a local overlay.
If B<DUP_VERSIONS_ONLY_OVERLAYS> is set (see below), both instances must be in overlays.
.TP
.BR -1 ", " --slotted
Only match packages with a nontrivial slot, i.e. where SLOT is nonempty and different from "0".
.TP
.BR -2 ", " --slots
Only match packages with at least two different slots.
In contrast to -1, a package is not shown here, if only one slot is available with e.g. slot-name "4.3".
.TP
.BR -u ", " --upgrade
Only match packages which have at least one slotted version installed which
is not the best version within that slot.
This means that you should either upgrade or downgrade that package.
.TP
.BR -O ", " --overlay
Only match packages with at least one version in an overlay.
.TP
.BR -T ", " --test-obsolete
Only match obsolete packages.

Packages are obsolete if they have redundant entries in /etc/portage/package.*
(if B<TEST_FOR_REDUNDANCY> is true) or if not all installed versions exist
(if B<TEST_FOR_NONEXISTENT> is true).

What is considered as redundant is defined by the B<REDUNDANT_IF>-variables below,
and what is considered as non-existent is defined by the B<NONEXISTENT_IF>-variables.

Note that this options only tests packages in the database - in particular, you
will not find entries for e.g. renamed or removed (from the portage tree) packages with this option.
Use B<-t> to find the latter.

Therefore, this option is best combined with -t to find also other types of obsolete entries.
.TP
.BR -| ", " --pipe
(Recall that a shell will not pass an unquoted B<|> sign, so quote properly).

Use input from pipe of an emerge -pv (similar to genlop -p).
Actually, any input lines are honored which contains a word in the format

I<category>B</>I<package>B<->I<version> or

I<category>B</>I<package>

More precisely, in each line the first word in this format is chosen.
The packages/versions passed this way will in the output be marked.
For details, see the B<marked> and B<markedversions> formatstring and the
B<MARK_VERSIONS> variable below.

This local option is treated as if a sequence of corresponding matching
expressions, concatenated with B<-o>, were given.
.TP
.BR -! ", " --not
(Recall that an interactive shell will not pass an unquoted B<!> sign, so quote properly).

Invert the expression given.
.\" }}}

.\" {{{ -------- Operation selection
.SS Operation selection
.TP
Define the fields that the expression should be tested on. Multiple fields may be used.
.TP
.BR -s ", " --name
i.e. "eix" (default)
.TP
.BR -S ", " --description
i.e. "Small utility for searching .."
.TP
.BR -C ", " --category
i.e. "app-portage"
.TP
.BR -A ", " --category-name
i.e. "app-portage/eix"
.TP
.BR -H ", " --homepage
i.e. "http://sourceforge.net/projects/eix"
.TP
.BR -L ", " --license
i.e. "GPL-2"
.TP
.BR -P ", " --provide
i.e. "virtual/blackbox"
.\" }}}

.\" {{{ -------- Match algorithms
.SS "Match algorithms"
.TP
.BR -e ", " --exact
Pattern is an exact string. For example, "eix -e gcc" will only show packages
with the name "gcc".
.TP
.BR -f " [" I<N> "], " --fuzzy " [" I<N> "]"
Do a fuzzy search with a maximal levenshtein-distance of I<N> (default @LEVENSHTEIN_DISTANCE@).
Note that this command slows down search speed.
.TP
.BR -p ", " --pattern
pattern is a wildcard-pattern. See
.BR fnmatch (3)
and/or
.BR glob (7)
for further information. Be sure to use single quotes around patterns (to prevent the
shell from intercepting any wildcards).
.TP
.BR -r ", " --regex
pattern is a regexp. -r is default, so you actually not need to type -r. For further
information, please read
.BR regex (7).
Again, be sure to use single quotes around patterns. (Default)
.\" }}}
.\" {{{ -------- Defining layouts
.SS Defining layouts \fP(see B<FORMATSTRING> below)
.TP
.BR --format " " I<FORMAT>
Define the normal layout for results as I<FORMAT>
.TP
.BR --format-compact " " I<FORMAT>
Define the compact layout for results as I<FORMAT>
.TP
.BR --format-verbose " " I<FORMAT>
Define the verbose layout for results as I<FORMAT>
.\" }}}
.\" }}}
.\" {{{ -------- Options for update-eix
.SS Special options for B<update-eix>
.TP
.BR  -o " " I<outputfile> ", " --output " " I<outputfile>
Use this option if you are running B<update-eix> with reduced permissions
or if you want to generate an eix-database for distribution
(e.g. to avoid security problems of cache methods B<ebuild> and B<ebuild*>
and to keep your original database).
With this option, B<update-eix> will not test about permissions and will
write its output to I<outputfile> instead of B<@EIX_CACHEFILE@>.

.TP
.BR  -a " " I<overlay> ", " --add-overlay " " I<overlay>
This is similar to adding I<overlay> to B<PORTDIR_OVERLAY> in /etc/make.conf
or to B<ADD_OVERLAY> but has the advantage that you need not modify some of those,
and you can also use spaces in I<overlay>.
Overlays added by this option come after overlays added by B<KEEP_VIRTUALS>.
If I<overlay> is already contained in the list of overlays, this option has no effect.
It is explicitly admissible to use this option repeatedly to add several overlays.

.TP
.BR -x " " I<overlay> ", " --exclude-overlay " " I<overlay>
This is similar to adding I<overlay> to B<EXCLUDE_OVERLAY>
but has the advantage that you need not modify the latter,
and you can also use spaces in I<overlay>.
Always exclude I<overlay> (even for later B<--add-overlay> options),
no matter whether I<overlay> is in the list of overlays.
The B<PORTDIR> directory is considered as any other overlay which can be excluded
(in this case, the first I<overlay> in the list will be stored as B<PORTDIR>).
It is explicitly admissible to use this option repeatedly to exclude several overlays.
.TP
.BR -m " " I<overlay> " " I<method> ", " --override-method " " I<overlay> " " I<method>
Change the cache method of I<overlay>
(the B<PORTDIR> directory is an allowed I<overlay>)
to I<method>.
If I<overlay> is not in the list of overlays, this option has no effect.
This option is similar to adding I<overlay> I<method> to
B<ADD_OVERRIDE_CACHE_METHOD> but has the advantage that you need not
modify the latter and you can also use spaces in I<overlay> or I<method>.
It is explicitly admissible to use this option repeatedly to
override cache methods for several overlays.
The last override has precedence.
.\" }}}

.\" {{{ OUTPUT
.SH OUTPUT
.SS Slots
In contrast to usual output of versions in emerge, B<eix> and B<diff-eix>
can also print slot names if they are nonempty and different from "0".
Whether this happens is determined by the B<PRINT_SLOTS> and
B<DIFF_PRINT_SLOTS> variables, respectively, and by the content of the
B<FORMATSTRING>.

If slots are printed, the slot name is separated from the version number
either with a colon, or the slot names are written in braces.
You can choose the preferred modes for eix and diff-eix with the
B<COLON_SLOTS> or B<DIFF_COLON_SLOTS> variables, respectively.
Some Examples:
.TP
.BR 4.1.1:4.1 "    or    " 4.1.1(4.1)
This is version 4.1.1 which will be installed into the slot "4.1".
.TP
.BR 3.14p:GNAT-3.14p "    or    " 3.14p(GNAT-3.14p)
This is version 3.14p which will be installed into the slot "GNAT-3.14p".
.TP
.BR 2.0.0_rc1-r6
This is version 2.0.0_rc1-r6, and SLOT is either empty or "0".

.SS Masking
If you used gentoo for more than a week you're probably going to immediately
recognize the format of the masking in the versions-strings.
Nevertheless, we are going to explain it here by some examples.
.TP
.BR [P]2.95.3-r8
If a mask for the package was found in the packages-files from your profile, but this
version does not match it, the version is determined to be "masked by profile".
.TP
.BR [M]4.0.0_alpha20050213
The version matches a mask from /etc/portage/package.mask, $PORTDIR/profiles/package.mask
or a package.mask from your profile. Portage calls this "masked by package.mask".
.TP
.BR *3.4.3-r2
That version is "masked by -* keyword".
.TP
.BR !3.3.3
This means the version is "masked by missing keyword".
.TP
.BR -0.8.14
Masked by -ARCH.
.TP
.BR ~3.3.5.20050130
The version would be "masked by ~keyword".
.TP
.BR 3.3.1
.RS
Finally, this would be a stable version.
.\" }}}

.\" {{{ FORMATSTRING
.SH FORMATSTRING
.LP
A formatstring can contain conditional blocks, package properties, colors and
normal strings.

.\" {{{ -------- Conditional blocks
.SS Conditional blocks
Conditions are very simple: A property is expanded and the resulting string is
tested against another string. If they are the same, the condition is true and
the block is executed. Conditions can be negated so that the else-part is
executed if the conditions is true, and the if-part if the condition is false.
The else-part can be also be completely left out.
.TP
.BR { [ ! ] I<VARIABLE> [ = I<STRING>] } I<TCODE> {}
Execute I<TCODE> if the string resulting from expanding I<VARIABLE> is equal to
I<STRING>.
The B<!> would negate the behavior.

.TP
.BR { [ ! ] I<VARIABLE> [ = I<STRING>] } I<TCODE> {else} I<FCODE> {}
Execute I<TCODE> if the string resulting from expanding I<VARIABLE> is equal to
I<STRING>.  If it's not, execute I<FCODE>.
.\" }}}

.\" {{{ -------- Package properties
.SS Package properties
Names that refer to specific properties of the package that is currently
printed. If used to print a property, the name B<must be enclosed in square brackets>
(i.e. "<name>").
.TP
.BR name ", " category ", " homepage ", " licenses
The name, category, homepage and licenses for the current package.
.TP
.BR availableversions "  or  " availableversionslong
All versions including slots that could be installed for this package
(-l changes output accordingly).
The versions are printed in the according colors.
.TP
.BR availableversionsshort
As B<availableversions>, but do not print any slots
.TP
.BR installedversions
All installed versions, separated by spaces.
.TP
.BR markedversions
All marked (with the B<--pipe> option) versions, separated by spaces.
.TP
.BR overlaykey
if all versions are in the same overlay this expands to "overlaykey".
When printed, "[overlaykey]" is printed with corresponding colors.
.TP
.BR best "  or  " bestlong
the highest stable version, including slot information
.TP
.BR bestshort
the highest stable version without slot information
.TP
.BR bestslots "  or  " bestslotslong
for each slot the highest stable version (including slot information),
separated by spaces.
.TP
.BR bestslotsshort
for each slot the highest stable version (without slot information),
separated by spaces.
.TP
.BR system
expands to "system" if this package is in the system-profile
.TP
.BR provide
the packages PROVIDE-string
.TP
.BR marked
expands to "1" if the package was passed with the B<--pipe> option.
This is mainly only useful in tests.
.TP
.BR upgrade ", " upgradeorinstall ", " downgrade ", " recommend ", " recommendorinstall
B<upgrade> expands to "1" if the package is installed and at least one slot can be upgraded
(or the best stable version is a new slot and B<UPDATE_TO_HIGHEST_SLOT> is true).
The other variables test similarly whether the package can be upgraded or newly installed,
should be downgraded, can/should be upgraded/downgraded,
or can/should be upgraded/downgraded/installed, respectively.
The variable B<RECOMMEND_ALWAYS_LOCAL> determines whether these tests always
accord to the setting of /etc/portage and ACCEPT_KEYWORDS.
.TP
.BR bestupgrade ", " bestupgradeorinstall ", " bestdowngrade ", " bestrecommend ", " bestrecommendorinstall
as above with the difference that only the best stable version of the package
is taken into account (and not all slots).
.TP
.BR better ", " worse ", " differ ", " bestbetter ", " bestworse ", " bestdiffer
this can only be used in conditionals in B<DIFF_FORMAT_CHANGED>.
B<better> expands to "1" if the new package has a new slot or a better stable
version (or the same best stable version but from a different overlay number)
for some slot than the old package.
B<worse> means analogously that the old package had at least one better slot
or a slot which is not available in the new package.
B<differ> means that not all best stable slots of the old and new package
coincide.
The corresponding B<best*> versions have an analogous meaning with the
difference that only the best stable version is taken into account
(and not all slots).
The variable B<RECOMMEND_ALWAYS_LOCAL> determines whether these tests are always
according to the setting of /etc/portage and ACCEPT_KEYWORDS.
.TP
.BR old* ", " new*
this can only be used in B<DIFF_FORMAT_CHANGED>.
You can prefix any variable name to B<old> and B<new>, and the value
corresponds to that variable, taking the old resp. new data into account.
If neither B<old> nor B<new> is specified, the new version is assumed.
For example, B<oldbestslots> expands to the best slots of the old package,
while B<newbestslots> and B<bestslots> both expand to the best slots of the
current (i.e. new) package.
.\" }}}

.\" {{{ -------- Colors
.SS Colors
.TP
(I<NAME>,I<BRIGHTNESS>;I<MARKER>)
Each of the ",I<BRIGHTNESS>" and ";I<MARKERS>" parts may be omitted.

If I<BRIGHTNESS> is 1, eix prints the corresponding 'light' (bold) color for
I<NAME>, or normal color if I<BRIGHTNESS> is 0.

Available colors are:
I<default black red green yellow blue purple cyan gray>

Available markers are:
I<none bold underline blink inverse>
.\" }}}

.\" {{{ -------- Example
.SS Example:
.TP
{installedversions}(yellow,1;underline){else}(yellow,0){}<name>()
If the package is installed, print the name underlined in bright yellow,
else in normal yellow.
.\" }}}
.\" }}}

.\" {{{ FILES
.SH "FILES"
.LP
.\" {{{ -------- /etc/eix-sync-config
.SS /etc/eix-sync.conf
This file stores commands and configurations to apply with B<eix-sync>.
Comments start with B<#> (all lines are cut at the first B<#>; it is not
possible to mask B<#>). Lines can have the following forms and will be
executed in the given order before B<emerge --sync> is executed.
.TP
.BR I<option(s)>
Use I<option(s)> as default for eix-sync (in front of all other options).
As usual, I<option(s)> must start with "B<->".
.TP
.BR I<Name>
Call B<gensync> I<Name>.
Note that B<gensync> is provided by B<app-portage/gentoolkit-dev> to sync
overlays.
.TP
.BR *
Call B<gensync -a> (i.e. overlays are synced with gensync).
.TP
.BR ! I<command>
Execute I<command>. I<command> must exit successfully or B<eix-sync> will
stop with an error.
(Thus, B<!gensync> I<Name> is more or less equivalent to
I<Name>; only different messages will be given during B<eix-sync>.)

You can use this feature to call e.g. B<layman> instead of B<gensync>
or to unpack an overlay before calling B<gensync> or to apply local fixes
after B<gensync> was called.
.TP
.BR ~ I<command>
This is only important if eix-sync options B<-s> or B<-2> are used.
In this case, I<command> will be executed before the first call of B<rsync>;
the output of I<command> is evaluated within the bash script B<eix-sync>.
If I<command> or the evaluation of its output are not successful,
B<eix-sync> will stop with an error.
This can be used to execute e.g. B<keychain> and to return the content of
the appropriate I<~/.keychain/*-sh> file or to return export-commands for
the current B<SSH_AUTH_SOCK> and B<SSH_AGENT_PID>.
Is is also admissible that the output of I<command> is a command which
modifies the variables B<PORTAGE_RSYNC_OPTS>, B<PORTAGE_RSYNC_EXTRA_OPTS>,
B<PORTDIR>, B<PORTDIR_SERVER>, B<PORTDIR_CLIENT>, B<SERVER>, or B<CLIENT>.
These variables are filled with defaults when I<command> is called and
will later be used for the B<rsync> command(s) with their obvious meaning.
.TP
.BR @@ I<command>
Adds a hook for I<command>; the actual execution of I<command> is postponed
until B<emerge --sync> was (successfully) called.
.TP
.BR @ I<command>
Adds a hook for I<command>; the actual execution of I<command> is postponed
until B<emerge --sync> and the subsequent B<update-eix>
was (successfully) called.
.TP
Some examples of useful lines in B</etc/eix-sync.conf>:
.TP
.BR ~keychain " " --quiet " " ~/.ssh/id_rsa " " ; " " cat " " ~/.keychain/"$(hostname)-sh"
.TP
.BR @update-eix-remote " " update " " /var/cache/remote-cache.tbz2
(The last argument can also be omitted if you do not want a local copy
of the data).
.TP
.BR @@update-eix-remote " " fetch " " /var/cache/remote-cache.tbz2
.TP
.BR @update-eix-remote " " add " " /var/cache/remote-cache.tbz2
.\" }}}

.\" {{{ -------- /etc/eix-sync-overlays
.SS /var/log/eix-sync.log
The redirected output of B<eix-sync>. See B<eix-sync -h> for more details.
.\" }}}

.\" {{{ -------- /etc/eixrc
.SS /etc/eixrc
Global configuration file. The variables in B<~/.eixrc> or from the environment
can override the variables set in this file. See B<~/.eixrc>.
.\" }}}

.\" {{{ -------- ~/.eixrc
.SS ~/.eixrc
Per-user configuration file.
The variables in this file can be overridden by environment variables.
.TP
.BR QUICKMODE "  " (true / false)
If true, eix will use B<--quick> by default.

.TP
.BR DIFF_QUICKMODE "  " (true / false)
If true, diff-eix will use B<--quick> by default.

.TP
.BR CAREMODE "  " (true / false)
If true, eix will use B<--care>.

.TP
.BR DIFF_CAREMODE "  " (true / false)
If true, diff-eix will use B<--care>.

.TP
.BR QUIETMODE "  " (true / false)
If true, eix will use B<--quiet> by default.

.TP
.BR DIFF_QUIETMODE "  " (true / false)
If true, diff-eix will use B<--quiet> by default.

.TP
.BR DEFAULT_FORMAT "  " (normal / compact / verbose)
Defines whether B<--compact> or B<--verbose> is on by default.

.TP
.BR DIFF_NO_SLOTS "  " (true / false)
If true, diff-eix will not consider slots for version changes.

.TP
.BR DIFF_ONLY_INSTALLED "  " (true / false)
If true, diff-eix will only consider version changes for installed packages.

.TP
.BR FORMAT ", " FORMAT_COMPACT ", " FORMAT_VERBOSE "  " (Strings)
Define the normal, compact and verbose layout for results printed by B<eix> (See
B<FORMATSTRING>)

.TP
.BR DIFF_FORMAT_NEW ", " DIFF_FORMAT_DELETE ", " DIFF_FORMAT_CHANGED " " (Strings)
Define the format for packages that were added, removed or for which the highest
stable versions has changed. This is only used by B<diff-eix> (See
B<FORMATSTRING>)

.TP
.BR COLOR_MASKED ", " COLOR_STABLE ", " COLOR_UNSTABLE ", " COLOR_SLOTS ", " COLOR_OVERLAYKEY ", " COLOR_VIRTUALKEY "  " (Strings)
Define the color for masked versions, stable versions, unstable versions, slots,
the overlay-key, and the overlay-key for "virtual" overlays (which are not absolute pathnames).
Use the same syntax as you would inside ().
See B<FORMATSTRING>.

.TP
.BR MARK_INSTALLED "  " (none ", " bold ", " underline ", " blink ", " inverse)
Mark the installed packages by this attribute when displaying versions.

.TP
.BR MARK_VERSIONS "  " (none ", " bold ", " underline ", " blink ", " inverse)
Mark the package versions passed with B<--pipe> by this attribute.

.TP
.BR FORCE_USECOLORS "  " (true / false)
Use colors even when stdout is not a terminal.

.TP
.BR STYLE_VERSION_SORTED "  " (true / false)
Defines whether B<--verionsorted> is on by default.

.TP
.BR STYLE_VERSION_LINES "  " (true / false)
Defines whether B<--versionlines> is on by default.

.TP
.BR COLORED_SLOTS "  " (true / false)
If false, eix will not color slots appended to versions.

.TP
.BR DIFF_COLORED_SLOTS "  " (true / false)
If false, diff-eix will not color slots appended to versions.

.TP
.BR COLON_SLOTS "  " (true / false)
If true, eix will separate slots with a colon.
This has the advantage that it takes one character less than braces and
thus makes listings of many versions shorter.

.TP
.BR DIFF_COLON_SLOTS "  " (true / false)
If true, diff-eix will separate slots with a colon.

.TP
.BR SMALL_EIX_DATABASE "  " (true / false)
Keep database small at the cost of never honoring keywords of other ARCH.
Only set this to true if you really must save disk space.

.TP
.BR DUP_PACKAGES_ONLY_OVERLAYS "  " (true / false)
Defines whether duplicate package checks occur only among overlays, i.e. a
package is only considered as duplicate if it occurs in at least two
different overlays.

.TP
.BR DUP_VERSIONS_ONLY_OVERLAYS "  " (true / false)
Defines whether duplicate version checks occur only among overlays, i.e. a
version is only considered as duplicate if it occurs at least twice in
overlays.

.TP
.BR DEFAULT_IS_OR "  " (true / false)
If several pattern arguments occur without logical concatenation (-a or -o),
eix assumes an implicit concatenation. If this variable is true, it assumes
that this concatenation is -o (or), otherwise -a (and).

.TP
.BR OVERLAYS_LIST "  " (all / all-if-used / all-used / all-used-renumbered / no)
People with many different overlays do not want to see all overlays listed at
the end but only those which are really used. Here, you can customize the
behaviour. The value is interpreted as follows:
.TP
.SS
.BR all-if-used / if-used / if
Display all overlays, if at least one is used. This was the default behaviour
before eix-0.6.0.
.TP
.SS
.BR used-renumbered / renumber / renumbered / number
Display only the overlays actually used, numbering them "correctly"
(i.e. if only two overlays are needed, number them [1] and [2]).
The disadvantage is that overlays get different numbers for different queries.
However, the order of the numbering is consistent.
.TP
.SS
.BR all-used / only-used / used
Display only the overlays actually used, keeping the numbering consistent
over all queries (on the same database).
.TP
.SS
.BR no / false
Never display a list of overlays.
.TP
.SS
.BR "" "anything else"
List all overlays for every query (even if not even one is needed).

.TP
.BR LEVENSHTEIN_DISTANCE "  " (Integer)
Set default levenshtein-distance.

.TP
.BR EXCLUDE_OVERLAY "  " (String)
Set a list of overlays that are excluded from the index (separators are [\\n\\r\\t ]).
See the B<update-eix> option B<--exclude-overlay>.

.TP
.BR ADD_OVERLAY "  " (String)
Set a list of overlays that are added to the index (separators are [\\n\\r\\t ]).
See the B<update-eix> option B<--add-overlay>.

.TP
.BR PORTDIR_CACHE_METHOD ", " OVERLAY_CACHE_METHOD "  " (Strings)
Set the type of the cache used by portage. If you don't know what this is, just leave it
alone.
B<PORTDIR_CACHE_METHOD> defaults to I<@PORTDIR_CACHE_METHOD@>, B<OVERLAY_CACHE_METHOD> to
I<none>.
The available values are described below.
You might want to specify a different cache method only for some overlays
This can be done with the following variables:

.TP
.BR CACHE_METHOD ", " ADD_CACHE_METHOD ", " OVERRIDE_CACHE_METHOD ", " ADD_OVERRIDE_CACHE_METHOD
These variables are lists of the form I<overlay>[\\n\\r\\t ]I<method>.
The cache method of I<overlay> is set to I<method>, overriding the
settings of B<OVERLAY_CACHE_METHOD> (or of B<PORTDIR_CACHE_METHOD>
if I<overlay> is the B<PORTDIR> directory).
Later entries override earlier ones.

The reason for several variables is that additions/changes are possible
without touching the other variables:
The settings of B<OVERRIDE_CACHE_METHOD> extend/override the settings of
B<CACHE_METHOD> and, in addition, they extend/override the settings made
by B<KEEP_VIRTUALS> (see below).
The settings in B<ADD_CACHE_METHOD>/B<ADD_OVERRIDE_CACHE_METHOD>
extend/override the settings of B<CACHE_METHOD>/B<OVERRIDE_CACHE_METHOD>
and are meant to be used only locally.

The following cache methods are available:
.TP
.SS
.BR sqlite
This is an extremely fast cache method if you are using portage with the
sqlite backend as described in
I<http://gentoo-wiki.com/TIP_speed_up_portage_with_sqlite>.
Note that in contrast to the default B<metadata> cache method you must
use B<emerge --metadata> before you call B<update-eix> with this method.

Since the support of this cache method requires B<sqlite> to be installed,
this method is not necessarily compiled in.
You must have emerged B<eix> with the appropriate USE flag
(or in a manual installation used I<./configure --with-sqlite>
before compilation) if you want support for this method.
.TP
.SS
.BR cdb
You are using the cdb-module from
I<http://forums.gentoo.org/viewtopic-t-261580.html> as
cache-backend for portage (cdb with cpickle'd dictionaries as values).
Note that in contrast to the default B<metadata> cache method you must
use B<emerge --metadata> before you call B<update-eix> with this method.
.TP
.SS
.BR flat
You are using the default cache-backend (plain text files).
Note that in contrast to the default B<metadata> cache method you must
use B<emerge --metadata> before you call B<update-eix> with this method.
.TP
.SS
.BR backport
If you are using that backport-stuff (from portage-3 to portage-2) you should use this one.
Note that in contrast to the default B<metadata> cache method you must
use B<emerge --metadata> before you call B<update-eix> with this method.
.TP
.SS
.BR none
No cache-backend.
Get the information from the ebuilds.
The ebuild is not executed but only parsed, using some heuristics.
Hence, this method has no security risk but possibly some other problems.
For example, if variables are only set in eclasses, this method will not see them.
Examples of problems with this method is missing SLOT information for
typical ebuilds from kde-base.
.TP
.SS
.BR none*
This is essentially the same as cache method B<none> with the difference
that variables are not expanded in variable definitions.
This is the cache-method B<none> from older eix versions (before 0.7.1).
.TP
.SS
.BR ebuild
For overlays, this is the most compatible but also the slowest method.
The information is obtained via "/usr/bin/ebuild ... depend" from the ebuild.
Since all ebuilds will get executed by bash, this may be a security risk
if you do not trust all ".ebuild" scripts or your environment variables.
Intentionally, the environment is not cleared before the actual execution
so that you can pass further variables to the ebuild.
However, this can also lead to unexpected behaviour or even a security risk
since many bash scripts may be tricked with strange environments.
use B<env -i update-eix> when this causes problems.

B<If you are not completely sure about the .ebuilds for which you use this cache method, you should run update-eix with reduced permissions (and using the --output option).>
.TP
.SS
.BR ebuild*
This is something in between B<none> and B<ebuild>:
The information is obtained via the undocumented "/usr/lib/portage/ebuild.sh".
Thus, instead of executing a python program for each ".ebuild" as for
cache-method B<ebuild>, "only" a lengthy shell-script and the ebuild itself
is executed (hence, also this method is unsafe if you do not trust all
".ebuild" scripts).
All environment variables are cleared, and only some .ebuild variables
like $P are set when the ebuild is executed.
This method is not quite as compatible as the method B<ebuild>, and its
success may depend more on the portage version.
However, this method is considerably faster than B<ebuild> and stable
enough to treat e.g. typical ebuilds from kde-base.

B<If you are not completely sure about the .ebuilds for which you use this cache method, you should run update-eix with reduced permissions (and using the --output option).>
.TP
.SS
.BR metadata
Use the metadata-cache located inside the portage-tree ($PORTDIR/metadata/cache/).
.TP
.SS
.BR eix "  or   "  eix:I<FILE> "  or  " eix:I<FILE>:I<overlay>
Use the cache file I<FILE> previously generated by B<update-eix>.
If omitted or empty, I<FILE> defaults to @EIX_CACHEFILE@.

As for all other cache methods, only those categories enabled by
profile/category (in the main tree or some overlay) are read.
If you do not want this, use B<eix*> (see below).

If the I<overlay> is given, then only the entries corresponding
to that overlay within I<FILE> are read. If I<overlay> is empty or not given,
this means that the "main" tree in I<FILE> is read.
I<overlay> is the name of the overlay directory as stored in I<FILE>.
If no such name exists and I<overlay> is a number, then this number is
interpreted as the number of the overlay as stored in I<FILE>.
Note that I<overlay> has in general no relation with the current overlay
names or order - only the names/order stored in I<FILE> play a role here.

The magic value B<*> as I<overlay> has a special meaning. In this case,
all overlays in I<FILE> are read. However, this is usually not what you want:
If I<FILE> originally contained several overlays, this overlay structure
will appear "flattened".
.TP
.SS
.BR eix* "  or   "  eix*:I<FILE> "  or  " eix*:I<FILE>:I<overlay>
This is analogous to the cache method B<eix> with the difference that
all categories found in I<FILE> are added, even those categories which
were not enabled by some profile/categories file.

This cache method is useful if I<FILE> contains information for some
overlay directory for which the corresponding profile/categories on
the local machine is unknown or not necessarily up-to-date.
.TP
.BR KEEP_VIRTUALS " " (true / false)
If true, update-eix will keep all virtual overlays from the previous database
if that existed.
This has the same effect as appending for each virtual overlay of the previous
database the entry "I<overlay-name>" to B<ADD_OVERLAY> and appending a
corresponding entry "I<overlay> eix*::I<overlay>" to B<ADD_CACHE_METHOD>.
Note that this means that this option might override settings made in
B<CACHE_METHOD> and B<ADD_CACHE_METHOD>, but it might be overridden by
settings from B<OVERRIDE_CACHE_METHOD> and B<ADD_OVERRIDE_CACHE_METHOD>.
.TP
.BR LOCAL_PORTAGE_CONFIG " " (true / false)
If false, eix won't read /etc/portage and ACCEPT_KEYWORDS from make.conf or the
environment.
.TP
.BR DIFF_LOCAL_PORTAGE_CONFIG " " (true / false)
If false, diff-eix won't read /etc/portage and ACCEPT_KEYWORDS from make.conf
or the environment.
.TP
.BR UPGRADE_ALWAYS_LOCAL " " (true / false)
If true, the B<--upgrade> option of eix will always match according to the
local setting in /etc/portage and ACCEPT_KEYWORDS from make.conf,
independently of other options or variables.
Note that this refers only to the match, not to the way the package is printed.
.TP
.BR RECOMMEND_ALWAYS_LOCAL " " (true / false)
If true, the upgrade/downgrade recommendations as well as in diff-eix the
tests for version changes will always accord to the
local setting in /etc/portage and ACCEPT_KEYWORDS from make.conf,
independently of other options or variables.
Note that this refers only to the way the test variables in the format strings
are interpreted.
.TP
.BR UPGRADE_TO_HIGHEST_SLOT " " (true / false)
If true, all upgrade tests will give a positive result for an installed
package for which not the slot with the best stable version is installed.
.TP
.BR PRINT_SLOTS " " (true / false)
If false, eix never prints any slot information.
.TP
.BR DIFF_PRINT_SLOTS " " (true / false)
If false, diff-eix never prints any slot information.
.TP
.BR PRINT_COUNT_ALWAYS " " (true / false)
If true, always print the number of matches in the last line, even if this
number is 0 or 1.
This is normally not useful but might simplify writing certain scripts
parsing the output of eix.
.TP
.\" {{{ Default Matchfields for different strings.
.BR MATCH_NAME_IF " " (String)
Use NAME as default matchfield if the string match the given regex.
.TP
.BR MATCH_DESCRIPTION_IF " " (String)
Use DESCRIPTION as default matchfield if the string match the given regex.
.TP
.BR MATCH_LICENSE_IF " " (String)
Use LICENSE as default matchfield if the string match the given regex.
.TP
.BR MATCH_CATEGORY_IF " " (String)
Use CATEGORY as default matchfield if the string match the given regex.
.TP
.BR MATCH_CATEGORY_NAME_IF " " (String)
Use CATEGORY_NAME as default matchfield if the string match the given regex.
.TP
.BR MATCH_HOMEPAGE_IF " " (String)
Use HOMEPAGE as default matchfield if the string match the given regex.
.TP
.BR MATCH_PROVIDE_IF " " (String)
Use PROVIDE as default matchfield if the string match the given regex.
.TP
.BR MATCH_ORDER " " (String)
Try regex from MATCH_\\(.*\\)_IF in this order. Use whitespaces as delimiter.
.TP
.\" }}}
.\" {{{ Definition of Redundancy
.BR TEST_FOR_EMPTY "  " (true / false)
Defines whether empty entries in /etc/portage/package.* are shown with -t.
.TP
.BR TEST_FOR_NONEXISTENT "  " (true / false)
Defines whether non-existing installed versions are positive for -T.
What is considered as non-existent is defined by the B<NONEXISTENT_IF>-variables.
.TP
.BR TEST_FOR_REDUNDANCY "  " (true / false)
Defines whether redundant entries in /etc/portage/package.* are positive for -T.
What is considered as redundant is defined by the B<REDUNDANT_IF>-variables.
.TP
.BR NONEXISTENT_IF_MASKED "  " (true / false)
Defines whether masked versions are non-existent for TEST_FOR_NONEXISTENT.
.TP
.BR REDUNDANT_IF_DOUBLE " " (String)
Applies if /etc/portage/package.keywords lists the same keyword twice
for some/all (un-/installed) versions.

B<String> describes which versions should be tested.
It can have the following values:
.TP
.SS
.BR no " or " false
Do not test for this type of redundancy.
.TP
.SS
.BR some
It suffices that the redundancy occurs for some version in the database.
.TP
.SS
.BR all
The redundancy must occur for all versions in the database.
.TP
.SS
.BR some-installed
It suffices that the redundancy occurs for some installed version.
Uninstalled versions are ignored for this test.
.TP
.SS
.BR all-installed
The redundancy must occurs at least for all installed versions of the package.
If no version is installed, it must occur at least once.
.TP
.SS
.BR some-uninstalled
It suffices that the redundancy occurs for some uninstalled version.
Installed versions are ignored for this test.
.TP
.SS
.BR all-uninstalled
The redundancy must occurs at least for all uninstalled versions.
If all versions in the database are installed, it must occur at least once.
.TP
.SS
.BR -"some of the above  or  " +"some of the above"
The test only applies if in addition no version (in case B<->)
resp. at least some version (in case B<+>) of the package is installed.
.TP
.SS
.BR "" "some of the above  " or "  some of the above"
The result is positive if at least one of the two tests is positive.
Instead of "B<or>"  also the symbols "B<|>" or "B<||>" can be used.
.TP
.BR REDUNDANT_IF_MIXED "  " (String ", see above")
Applies if /etc/portage/package.keywords lists two different keywords,
e.g. ~ARCH and -*, for the versions in question.
.TP
.BR REDUNDANT_IF_WEAKER "  " (String ", see above")
Applies if /etc/portage/package.keywords lists a keywords which can
be replaced by a weaker keyword, e.g. -* or ~OTHERARCH or OTHERARCH
in place of ~ARCH, or ~OTHERARCH in place of OTHERARCH,
for the versions in question.
.TP
.BR REDUNDANT_IF_STRANGE "  " (String ", see above")
Applies if /etc/portage/package.keywords lists a strange keyword,
e.g. UNKNOWNARCH (unknown to the .ebuild) or -OTHERARCH,
for the versions in question.
.TP
.BR REDUNDANT_IF_NO_CHANGE "  " (String ", see above")
Applies if /etc/portage/package.keywords provides keywords which do not
change the availability keywords status for the versions in question.
.TP
.BR REDUNDANT_IF_MASK_NO_CHANGE "  " (String ", see above")
Applies if /etc/portage/package.mask contains entries
which do not change the mask status for the versions in question.
.TP
.BR REDUNDANT_IF_UNMASK_NO_CHANGE "  " (String ", see above")
Applies if /etc/portage/package.unmask contains entries
which do not change the mask status for the versions in question.
.TP
.BR REDUNDANT_IF_DOUBLE_MASKED "  " (String ", see above")
Applies if /etc/portage/package.mask matches twice
for the versions in question.
.TP
.BR REDUNDANT_IF_DOUBLE_UNMASKED "  " (String ", see above")
Applies if /etc/portage/package.unmask matches twice
for the versions in question.
.TP
.BR REDUNDANT_IF_KEYWORDS "  " (String ", see above")
Applies if /etc/portage/package.keywords contains a nonempty entry matching the versions in question
(to find empty entries use -t).
Of course, one will certainly not consider all matches as a redundancy
(although one might misuse this option to simply list all matches).
However, one might consider matching but non-installed packages as redundant.
Hence, typically one might want to set this variable to the value B<-some> or the equivalent value B<-some-uninstalled>
(or to B<false> if one thinks that entries for uninstalled packages are "normal" and not redundant).
.TP
.BR REDUNDANT_IF_MASK "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.mask.
.TP
.BR REDUNDANT_IF_DOUBLE_UNMASK "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.unmask.
.TP
.BR REDUNDANT_IF_USE "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.use.
.TP
.BR REDUNDANT_IF_CFLAGS "  " (String ", see above")
This is analogous to B<REDUNDANT_IF_KEYWORDS>, but for /etc/portage/package.cflags.
Note that this file is not supported by portage, but you might e.g. have built some
support for it in your personal /etc/portage/bashrc file.
Of course, this means that also no format for /etc/portage/package.cflags is defined.
eix assumes that the format is analogous to /etc/portage/package.{keywords,use}
(i.e. an entry is at most one line, with the matching version(s) at the beginning).
As the other /etc/portage/package.* files, /etc/portage/package.cflags may also be a directory tree;
in this case, all non-hidden files/subdirectories in this tree are read recursively,
resolving all symbolic links.
.\" }}}
.\" }}}

.\" {{{ -------- @EIX_CACHEFILE@
.SS @EIX_CACHEFILE@
This is the binary database for eix.
.\" }}}
.\" }}}

.\" {{{ BUGS
.SH "BUGS"
.LP
There are no bugs, just random features.
.\" }}}

.\" {{{ HISTORY
.SH "HISTORY"
.LP
B<eix> was formerly known as B<portagedb>. The name was changed because a part of
portage is also called portagedb, which was a bit confusing for everyone.

The functionality of update-eix was once triggered by using the -u switch on
eix. It was than separated to provide better maintainability. Thus update-eix
came to life.

The new portage-versions (>=2.1_pre1) don't remove the old dep-cache, thus eix would
always find packages that are not in portage anymore. To circumvent this, eix-sync
deletes the old cache (rm -rf /var/cache/edb/dep/*).
.\" }}}

.\" {{{ AUTHORS
.SH "AUTHORS"
.LP

Martin V\[:a]th  <vaeth at mathematik.uni-wuerzburg.de> (developer, current maintainer)

Emil Beinroth <emilbeinroth at gmx.net> (developer, previous maintainer)

Wolfgang Frisch <xororand at users.sourceforge.net> (developer, initial author)

Roland Wittmann <linuxcommando at users.sourceforge.net> (developer)
.\" }}}

.\" {{{ SEE ALSO
.SH "SEE ALSO"
.BR portage (5),
.\" Match-algorithms
.BR fnmatch (3),
.BR regex (7),
.\" Other search-utils
.BR emerge (1),
.BR esearch (1),
.BR qsearch (1),
.\" Related software .. e.g. stuff we use
.BR gensync (1)
.LP
Further information can be found in our WiKi at \fI@EIX_WIKI@\fR.
.\" }}}
.\" vim:set tw=90 expandtab foldenable foldmethod=marker foldlevel=0 :
