#! /usr/bin/env sh

export LC_ALL=C

Usage() {
	printf "%s\n" "Usage: ${0##*/} [options] args-for-make
Available options are
  -q  quiet
  -n  Stop after ./configure, i.e. do not run make
  -e  Keep environment - do not modify LDFLAGS, CXXFLAGS, CFLAGS
  -0  Do not pass --add-extra-cache=yes to ./configure
  -1/2/3 Generate 1/2/3 binaries
  -p  Use pedantic warnings (but no error on warnings) when modifying flags
  -u  Define NOT_FULL_USE
  -s  With sqlite
  -S  Without sqlite
  -b  With bzlib
  -B  Without bzlib
  -c  Use only debugging-safe CXXFLAGS
  -r  Change also directory permissions to root (for fakeroot-ng)"
	exit ${1}
}

Die() {
	printf "%s: %s\n" "${0##*/}" "${1}"
	exit ${2:-1}
}

QUIET=''
EARLYSTOP=false
KEEPENV=false
SAFEFLAGS=false
NOT_FULL_USE=false
SQLITE=''
BZLIB=''
PEDANTIC=false
EXTRA_CACHE='--enable-extra-cache'
SEPARATE=''
CHOWN=false
while getopts 'q0123nepusSbBcr?hH' OPTION; do
case "${OPTION}" in
	q) QUIET='>/dev/null 2>&1';;
	0) EXTRA_CACHE='';;
	1) SEPARATE='--disable-separate-binaries';;
	2) SEPARATE='--enable-separate-update';;
	3) SEPARATE='--enable-separate-binaries';;
	n) EARLYSTOP=true;;
	e) KEEPENV=true;;
	p) PEDANTIC=true;;
	u) NOT_FULL_USE=true;;
	s) SQLITE='--with-sqlite';;
	S) SQLITE='--without-sqlite';;
	b) BZLIB='--with-bzip2';;
	B) BZLIB='--without-bzip2';;
	c) SAFEFLAGS=true;;
	r) CHOWN=true;;
	*) Usage 1;;
esac
done
if [ ${OPTIND} -gt 1 ]
then
	( eval '[ "$(( 0 + 1 ))" = 1 ]' ) >/dev/null 2>&1 &&
	eval 'shift "$(( ${OPTIND} - 1 ))"' || shift "`expr ${OPTIND} - 1`"
fi

if ${CHOWN}
then
	ls /root >/dev/null 2>&1 && \
		Die "You should not really be root when you use -r" 2
	chown -R root:root .
fi

if ! ${KEEPENV}
then
	MARCH="`sed -n 's/^CFLAGS *= *.*-march=\([^ \"]*\)[ \"].*/\1/p' \
		/etc/make.conf`"
	export CXXFLAGS CFLAGS LDFLAGS
	LDFLAGS='-Wl,--sort-common -Wl,-O1 -Wl,-z,combreloc -Wl,--relax -Wl,-z,now'
	LDFLAGS="${LDFLAGS} -Wl,-z,defs -Wl,--no-undefined -Wl,--no-allow-shlib-undefined -Wl,--no-undefined-version -Wl,--warn-common -Wl,--fatal-warnings"
	CFLAGS="-march=${MARCH} -O2 -pipe"
	${SAFEFLAGS} || CFLAGS="${CFLAGS} -fomit-frame-pointer -O3 -O4 -fno-ident -fPIC -ftracer -funsafe-loop-optimizations -ftree-vectorize -ftree-vectorizer-verbose=0 -funswitch-loops -frename-registers -fweb -finline-functions -fgcse-after-reload -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE"
	${NOT_FULL_USE} && CFLAGS="${CFLAGS} -DNOT_FULL_USE"
	CFLAGS="${CFLAGS} -D_GLIBCXX_DEBUG -g -ggdb3 -Wall -Wextra"
	${SAFEFLAGS} || CFLAGS="${CFLAGS} -pedantic"
	if ${PEDANTIC}; then
		CFLAGS="${CFLAGS} -fstrict-aliasing -fstack-protector"
		CFLAGS="${CFLAGS} -Wformat=2 -Winit-self -Wmissing-include-dirs -Wswitch-default -Wunused -Wunused-parameter -Wstrict-aliasing=1"
		CFLAGS="${CFLAGS} -Wfloat-equal  -Wundef -Wshadow -Wunsafe-loop-optimizations -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wsign-compare -Wmissing-field-initializers -Wmissing-noreturn -Wnormalized=nfkc -Wpacked -Wredundant-decls -Winvalid-pch -Wlong-long -Wvolatile-register-var -Wdisabled-optimization"
		#CFLAGS="${CFLAGS} -Wconversion"
		#CFLAGS="${CFLAGS} -Wunreachable-code -Wpadded"
		#CFLAGS="${CFLAGS} -Wswitch-enum -Waggregate-return -Winline -Wmissing-format-attribute"
		# gcc-4.3:
		CFLAGS="${CFLAGS} -Wlogical-op -Wsign-conversion -Wvla"
		CXXFLAGS="${CFLAGS} -Wabi -Wctor-dtor-privacy -Wstrict-null-sentinel -Wold-style-cast -Woverloaded-virtual -Wsign-promo"
		#CXXFLAGS="${CXXFLAGS} -Weffc++ "
		CFLAGS="${CFLAGS} -Wtraditional -Wc++-compat -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Wpointer-sign"
		#CXXFLAGS="${CXXFLAGS} -Werror"
	else
		${SAFEFLAGS} || CFLAGS="${CFLAGS} -DNDEBUG -DG_DISABLE_ASSERT -DNO_DEBUG"
		CXXFLAGS="${CFLAGS} -Werror"
	fi
	${SAFEFLAGS} || CXXFLAGS="${CXXFLAGS} -fvisibility-inlines-hidden -fno-enforce-eh-specs"
fi
[ -n "${QUIET}" ] || echo "CFLAGS=${CFLAGS}
CXXFLAGS=${CXXFLAGS}
LDFLAGS=${LDFLAGS}"
if ! test -e Makefile
then
	if ! test -e configure || ! test -e Makefile.in
	then
		echo "Running autotools..."
		eval ./autogen.sh ${QUIET} || Die "autogen failed"
	fi
	echo "Running configure..."
	eval ./configure "--prefix=" ${SQLITE} ${BZLIB} ${EXTRA_CACHE} ${SEPARATE} ${QUIET} || \
		Die "configure failed"
fi
${EARLYSTOP} && exec make config.h
echo "Making ${*}..."
command -v make >/dev/null 2>&1 || Die "cannot find make"
if [ -n "${QUIET}" ]
then
	exec make "${@}" >/dev/null 2>&1
else
	exec make "${@}"
fi
