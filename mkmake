#! /usr/bin/env sh

export LC_ALL=C

Usage () {
	printf "%s\n" "Usage: ${0##*/} [options] args-for-make
Available options are
  -q  quiet
  -n  Stop after ./configure, i.e. do not run make
  -e  Keep environment - do not modify LDFLAGS, CXXFLAGS, CFLAGS
  -E  Do not pass --enable-extra-cache to ./configure
  -0  Do not pass --enable-separate-* to ./configure
  -1/2/3 Generate 1/2/3 binaries for eix-{,diff,update}
  -4  Enable separate tools
  -p  Use pedantic warnings (but no error on warnings) when modifying flags
  -u  Define NOT_FULL_USE
  -s  With sqlite
  -S  Without sqlite
  -b  With bzlib
  -B  Without bzlib
  -C  Avoid CCACHE
  -jX Use -jX (currently ${jarg})
  -c OPT Add OPT to ./configure
  -Q  Do not --enable-quickcheck
  -r  Change also directory permissions to root (for fakeroot-ng)"
	exit ${1:-1}
}

Info () {
	${quiet} && return
	printf "%s\n" "${*}"
}

Die () {
	printf "%s: %s\n" "${0##*/}" "${1}"
	exit ${2:-1}
}

SetCcache () {
	local i j
	i='/usr/lib/ccache/bin'
	test -d "${i}" || return
	case "${PATH}" in
		"${i}:"*|*":${i}:"*) return;;
	esac
	if [ -n "${PATH}" ]
	then
		Info "PATH=${i}:\${PATH}"
		PATH="${i}:${PATH}"
		export PATH
	fi
	[ -n "${CCACHE_DIR}" ] && return
	for i in "${HOME}/.ccache" ../ccache ../../ccache
	do
		[ -z "${i}" ] && continue
		j=`readlink -f -- "${i}"` && [ -n "${j}" ] \
			&& test -d "${j}" && break
	done
	[ -z "${j}" ] && return
	Info "CCACHE_DIR=${j}"
	export CCACHE_DIR
	CCACHE_DIR="${j}"
}

quiet=false
earlystop=false
keepenv=false
not_full_use=false
pedantic=false
extra_cache=true
separate_all=true
use_chown=false
jarg='-j3'
use_ccache=true
configure_extra='--prefix=""'
quickcheck=true
OPTIND=1
while getopts 'qE01234nepusSbBrQCc:j:?hH' opt
do
case "${opt}" in
	q) quiet=true;;
	E) extra_cache=false;;
	0) separate_all=false;;
	1) configure_extra="${configure_extra} --disable-separate-binaries";;
	2) configure_extra="${configure_extra} --enable-separate-update";;
	3) configure_extra="${configure_extra} --enable-separate-binaries";;
	4) configure_extra="${configure_extra} --enable-separate-tools";;
	n) earlystop=true;;
	e) keepenv=true;;
	p) pedantic=true;;
	u) not_full_use=true;;
	s) configure_extra="${configure_extra} --with-sqlite";;
	S) configure_extra="${configure_extra} --without-sqlite";;
	b) configure_extra="${configure_extra} --with-bzip2";;
	B) configure_extra="${configure_extra} --without-bzip2";;
	r) use_chown=true;;
	Q) quickcheck=false;;
	C) use_ccache=false;;
	c) configure_extra="${configure_extra} ${OPTARG}";;
	j) [ -n "${OPTARG}" ] && jarg='-j${OPTARG}' || jarg='';;
	*) Usage 0;;
esac
done
if [ ${OPTIND} -gt 1 ]
then
	( eval '[ "$(( 0 + 1 ))" = 1 ]' ) >/dev/null 2>&1 &&
	eval 'shift "$(( ${OPTIND} - 1 ))"' || shift "`expr ${OPTIND} - 1`"
fi

${extra_cache} && configure_extra="${configure_extra} --enable-extra-cache"
${quickcheck} && configure_extra="${configure_extra} --enable-quickcheck"
${separate_all} && configure_extra="${configure_extra} --enable-separate-binaries --enable-separate-tools"

${quiet} && quietredirect='>/dev/null 2>&1' || quietredirect=''

if ${use_chown}
then
	ls /root >/dev/null 2>&1 && \
		Die "You should not really be root when you use -r" 2
	chown -R root:root .
fi

${use_ccache} && SetCcache

if ! ${keepenv}
then
	march="`sed -n 's/^CFLAGS *= *.*-march=\([^ \"]*\)[ \"].*/\1/p' \
		/etc/make.conf`"
	export CXXFLAGS LDFLAGS
	CFLAGS="-march=${march} -O2 -pipe"
	CXXFLAGS="${CFLAGS}"
	${not_full_use} && CXXFLAGS="${CXXFLAGS} -DNOT_FULL_USE"
	if ${pedantic}
	then
		configure_extra="${configure_extra} --enable-strong-warnings"
	else
		configure_extra="${configure_extra} --enable-warnings"
		CXXFLAGS="${CXXFLAGS} -Werror"
	fi
fi
Info "CXXFLAGS=${CXXFLAGS}
LDFLAGS=${LDFLAGS}"
if ! test -e Makefile
then
	if ! test -e configure || ! test -e Makefile.in
	then
		echo "Running autotools..."
		eval ./autogen.sh ${quietredirect} || Die "autogen failed"
	fi
	echo "Running configure" ${configure_extra}
	eval ./configure ${configure_extra} ${quietredirect} || \
		Die "configure failed"
fi
${earlystop} && {
	exec make ${jarg} config.h || Die "cannot exec make"
}
echo "Making ${*}..."
command -v make >/dev/null 2>&1 || Die "cannot find make"
if ${quiet}
then
	exec make ${jarg} "${@}" >/dev/null 2>&1
else
	exec make ${jarg} "${@}"
fi
