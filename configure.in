# This file is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Copyright (c)
#  Wolfgang Frisch <xororand@users.sourceforge.net>
#  Emil Beinroth <emilbeinroth@gmx.net>
#  Martin VÃ¤th <vaeth@mathematik.uni-wuerzburg.de>

AC_INIT(eix, 0.16.0, http://eix.sourceforge.net)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_TARGET

AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE()

AC_LANG_CPLUSPLUS

AC_PROG_CXX
AC_GNU_SOURCE

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AM_GNU_GETTEXT_VERSION([0.17])
AM_GNU_GETTEXT([external])

dnl Provide basic types:
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T

dnl Separate binaries?
AC_ARG_ENABLE(separate_binaries,
	AS_HELP_STRING([--enable-separate-binaries],
	[create a separate binary for each program]),
	[
		case "${enableval}" in
			yes)
				separate_binaries=true
				;;
			no)
				separate_binaries=false
				;;
			*)
				AC_MSG_ERROR([bad value ${enableval} for --enable-separate-binaries])
				;;
		esac
	],[
		separate_binaries=false
	])
AM_CONDITIONAL(SEPARATE_BINARIES, ${separate_binaries})

dnl Separate update-eix?
AC_ARG_ENABLE(separate_update,
	AS_HELP_STRING([--enable-separate-update],
	[create a separate update-eix binary]),
	[
		case "${enableval}" in
			yes)
				separate_update=true
				;;
			no)
				separate_update=false
				;;
			*)
				AC_MSG_ERROR([bad value ${enableval} for --enable-separate-update])
				;;
		esac
	],[
		separate_update=false
	])
${separate_binaries} && separate_update=true
AM_CONDITIONAL(SEPARATE_UPDATE, ${separate_update})


dnl Separate tools?
AC_ARG_ENABLE(separate_tools,
	AS_HELP_STRING([--enable-separate-tools],
	[create separate binaries for tools (versionsort)]),
	[
		case "${enableval}" in
			yes)
				separate_tools=true
				;;
			no)
				separate_tools=false
				;;
			*)
				AC_MSG_ERROR([bad value ${enableval} for --enable-separate-tools])
				;;
		esac
	],[
		separate_tools=false
	])
AM_CONDITIONAL(SEPARATE_TOOLS, ${separate_tools})

need_ln=false
${separate_binaries} || ${separate_tools} || need_ln=true
if ${need_ln}
then
	AC_PROG_LN_S
fi

dnl Look for basic functions:
AC_FUNC_FSEEKO
AC_CHECK_FUNCS([regcomp strchr strdup strerror strrchr fnmatch memset], ,
			   AC_MSG_ERROR([We really need those functions ..]))

dnl Well define the following if we don't have one:
AC_CHECK_FUNCS([strndup strtoul strtol], , )

dnl We use these optionally:
AC_CHECK_FUNCS([canonicalize_file_name realpath vfork setenv], , )

dnl Compatibility Headers:
AC_CHECK_HEADERS(tr1/cstdint)

dnl Further headers:
AC_CHECK_HEADERS(climits)
AC_CHECK_HEADERS(limits.h)
AC_CHECK_HEADERS(sys/param.h)


AC_MSG_CHECKING([if stdint.h can really be used])
AC_TRY_COMPILE([ # include <stdint.h>
],[],
[AC_MSG_RESULT([yes])
	AC_DEFINE(USE_STDINT_H,1,[ Define to 1 if stdint.h can be used from C++])
],
[AC_MSG_RESULT([no])
])

AC_CHECK_PROGS(regex_cmd, sed)
if test -z "${regex_cmd}"
then
	AC_MSG_ERROR([error. sed is required to build the manpage])
fi

dnl Use bzip2?
AC_MSG_CHECKING([whether libbz2 should be used])
AC_ARG_WITH(bzip2,[  --with-bzip2            Use libbz2 (required for detecting installed overlays)], [
	if test x"${withval}" = x'no'
	then
		use_bzlib=false
		AC_MSG_RESULT([no (on request)])
	else
		use_bzlib=true
	fi
	],
	[
		use_bzlib=''
	])
if test x"${use_bzlib}" != x'false'
then
	BZLIB_LIBS='-lbz2'
	myoLIBS="${LIBS}"
	LIBS="${LIBS} ${BZLIB_LIBS}"
	AC_TRY_LINK([ #include <bzlib.h>
	],
	[
		BZ2_bzopen("dummy","rb");
	],
	[
		if test -z "${use_bzlib}"
		then
			AC_MSG_RESULT([yes (autodetected)])
		else
			AC_MSG_RESULT([yes (on request)])
		fi
		use_bzlib=true
	],
	[
		AC_MSG_RESULT([no (autodetected)])
		if test -n "${use_bzlib}"
		then
			AC_MSG_ERROR([error. bzip2 requested but libbz2 is unusable])
		fi
		use_bzlib=false
		BZLIB_LIBS=''
	])
	LIBS="${myoLIBS}"
fi
if ${use_bzlib}
then
	AC_DEFINE(USE_BZLIB,1,[ Define to 1 if bzlib can be used])
fi
AC_SUBST(BZLIB_LIBS)

dnl Use rst?
AC_ARG_WITH(rst,
	AS_HELP_STRING([--with-rst],
	[Use rst2html.py to document cache file format in html]),
	[
		if test x"${withval}" = x'no'
		then
			rst=false
		else
			rst=true
		fi
	],
	[
		rst=false
	])
AM_CONDITIONAL(USE_RST, ${rst})

dnl Use obsoleted cache method?
AC_ARG_ENABLE(extra_cache,
	AS_HELP_STRING([--enable-extra-cache],
	[enable unsupported cache method portage-2.1]),
	[
		case "${enableval}" in
			yes)
				extra_cache=true
				;;
			no)
				extra_cache=false
				;;
			*)
				AC_MSG_ERROR([bad value ${enableval} for --enable-extra-cache])
				;;
		esac
	],[
		extra_cache=false
	])
if ${extra_cache}
then
	AC_MSG_NOTICE([Unsupported cache method portage-2.1 enabled on request])
fi
AM_CONDITIONAL(EXTRA_CACHE, ${extra_cache})

dnl Check if std::unique works
AC_MSG_CHECKING([whether std::unique seems to work])
AC_ARG_ENABLE(unique,
	AS_HELP_STRING([--enable-unique],
	[assume that unique works]),
	[
		case "${enableval}" in
			yes)
				AC_MSG_RESULT([yes (skipped test)])
				unique_works=true
				;;
			no)
				AC_MSG_RESULT([no (skipped test)])
				unique_works=false
				;;
			*)
				AC_MSG_ERROR([bad value ${enableval} for --enable-unique])
				;;
		esac
	],[
		unique_works=''
	])
if test -z "${unique_works}"
then
AC_TRY_RUN([
	#include <vector>
	#include <string>
	#include <cstdlib>
	#include <algorithm>
	using namespace std;
	#define UNUSED(p) ((void)(p))
	int main(int argc, char** argv)
	{
		UNUSED(argc); UNUSED(argv);
		const char *a[] = {
				"1", "2", "2", "3", "3", "4", "4", "5", NULL,
				"1", "1", "2", "3", "4", "5", "5", "5", NULL,
				"1", "2", "3", "4", "5", NULL,
				NULL };
		const char *b[]= {
				"1", "2", "3", "4", "5", NULL };
		typedef vector<string>::size_type ind;
		for(ind i = 0; a[i]; i++) {
			vector<string> t;
			while(a[i])
				t.push_back(a[i++]);
			t.erase(unique(t.begin(), t.end()), t.end());
			for(ind j = 0; ; j++) {
				if(j == t.size()) {
					if(b[j])
						return 1;
					break;
				}
				if(!b[j])
					return 1;
				if(t[j] != b[j])
					return 1;
			}
		}
		return 0;
	}
	],
	[
		AC_MSG_RESULT([yes])
		unique_works=true
	],
	[
		AC_MSG_RESULT([no])
		unique_works=false
	])
fi
if ${unique_works}
then
	AC_DEFINE(UNIQUE_WORKS,1,[ Define to 1 if std::unique() works reliable])
fi

dnl What about sqlite?
AC_MSG_CHECKING([whether sqlite should be used])
AC_ARG_WITH(sqlite,
	AS_HELP_STRING([--with-sqlite],
	[Compile in support for cache method sqlite]),
	[
		if test x"${withval}" = x'no'
		then
			AC_MSG_RESULT([no (on request)])
			SQLITE_LIBS=''
		else
			AC_MSG_RESULT([yes (on request)])
			command -v pkg-config >/dev/null 2>&1 \
				&& SQLITE_LIBS="`pkg-config --libs sqlite3`" \
				|| SQLITE_LIBS=''
			# If pkg-config is not available or failed, we use a default
			if test -z "${SQLITE_LIBS}"
			then
				AC_MSG_WARN([ignoring pkg-config and using -lsqlite3])
				SQLITE_LIBS='-lsqlite3'
			fi
		fi
	],
	[
		command -v pkg-config >/dev/null 2>&1 \
			&& SQLITE_LIBS="`pkg-config --libs sqlite3 2>/dev/null`" \
			|| SQLITE_LIBS=''
		if test -n "${SQLITE_LIBS}"
		then
			AC_MSG_RESULT([yes (autodetected)])
		else
			AC_MSG_RESULT([no (autodetected)])
		fi
	])

if test -n "${SQLITE_LIBS}"
then
	AC_DEFINE(WITH_SQLITE,1,[ Define to 1 if cache method sqlite is wanted])
fi

AC_SUBST(SQLITE_LIBS)


AC_ARG_WITH(portdir-cache-method,
	AS_HELP_STRING([--with-portdir-cache-method=STR],
	[default PORTDIR_CACHE_METHOD]),
	[
		PORTDIR_CACHE_METHOD="${withval}"
		AC_MSG_NOTICE([Changing default: PORTDIR_CACHE_METHOD=${PORTDIR_CACHE_METHOD}])
	],
	[
		PORTDIR_CACHE_METHOD=metadata-flat
	])

AC_DEFINE_UNQUOTED(PORTDIR_CACHE_METHOD, "${PORTDIR_CACHE_METHOD}",[ Default PORTDIR_CACHE_METHOD])
AC_SUBST(PORTDIR_CACHE_METHOD)

AC_ARG_WITH(eprefix-default,
	AS_HELP_STRING([--with-eprefix-default=STR],
	[default EPREFIX]),
	[
		EPREFIX_DEFAULT="${withval}"
		test x"${EPREFIX_DEFAULT}" = x'/' && EPREFIX_DEFAULT=''
		AC_MSG_NOTICE([Changing default: EPREFIX=${EPREFIX_DEFAULT}])
	],[
		EPREFIX_DEFAULT=''
	])

AC_DEFINE_UNQUOTED(EPREFIX_DEFAULT, "${EPREFIX_DEFAULT}",[ Default EPREFIX])
AC_SUBST(EPREFIX_DEFAULT)

AC_ARG_WITH(eix-prefix-default,
	AS_HELP_STRING([--with-eix-prefix-default=STR],
	[default EIX_PREFIX]),
	[
		EIX_PREFIX_DEFAULT="${withval}"
		test x"${EIX_PREFIX_DEFAULT}" = x'/' && EIX_PREFIX_DEFAULT=''
		AC_MSG_NOTICE([Changing default: EIX_PREFIX=${EIX_PREFIX_DEFAULT}])
	],[
		EIX_PREFIX_DEFAULT=''
	])

AC_DEFINE_UNQUOTED(EIX_PREFIX_DEFAULT, "${EIX_PREFIX_DEFAULT}",[ Default EIX_PREFIX])
AC_SUBST(EIX_PREFIX_DEFAULT)

AC_ARG_WITH(root-default,
	AS_HELP_STRING([--with-root-default=STR],
	[default ROOT]),
	[
		ROOT_DEFAULT="${withval}"
		test x"${ROOT_DEFAULT}" = x'/' && ROOT_DEFAULT=''
		AC_MSG_NOTICE([Changing default: ROOT=${ROOT_DEFAULT}])
	],[
		ROOT_DEFAULT=''
	])

AC_DEFINE_UNQUOTED(ROOT_DEFAULT, "${ROOT_DEFAULT}",[ Default ROOT])
AC_SUBST(ROOT_DEFAULT)

AC_MSG_CHECKING([for default of EXEC_EBUILD_SH])
AC_ARG_WITH(ebuild-sh-default,
	AS_HELP_STRING([--with-ebuild-sh-default=STR],
	[default EXEC_EBUILD_SH]),
	[
		EBUILD_SH_DEFAULT="${withval}"
		description='on request'
	],[
		EBUILD_SH_DEFAULT='/usr/lib/portage/bin/ebuild.sh'
		if ! test -d "${EPREFIX_DEFAULT}/usr/lib" && \
			test -d "${EPREFIX_DEFAULT}/usr/lib64"
		then
			EBUILD_SH_DEFAULT='/usr/lib64/portage/bin/ebuild.sh'
		fi
		if test -x "${EPREFIX_DEFAULT}${EBUILD_SH_DEFAULT}"
		then
			description='autodetected'
		else
			description='guessed'
		fi
	])

test x"${EBUILD_SH_DEFAULT}" = x'/' && EBUILD_SH_DEFAULT=''
EBUILD_SH_MSG=${EBUILD_SH_DEFAULT}
test -n "${EBUILD_SH_MSG}" || EBUILD_SH_MSG='""'
AC_MSG_RESULT([${EBUILD_SH_MSG} (${description})])
AC_DEFINE_UNQUOTED(EBUILD_SH_DEFAULT, "${EBUILD_SH_DEFAULT}",[ Default EXEC_EBUILD_SH (without prefix)])
AC_SUBST(EBUILD_SH_DEFAULT)

AC_ARG_WITH(portage-rootpath,
	AS_HELP_STRING([--with-portage-rootpath=STR],
	[default PORTAGE_ROOTPATH]),
	[
		PORTAGE_ROOTPATH_DEFAULT="${withval}"
		AC_MSG_NOTICE([Using PORTAGE_ROOTPATH=${PORTAGE_ROOTPATH_DEFAULT}])
	],[
		PORTAGE_ROOTPATH_DEFAULT=''
	])

AC_DEFINE_UNQUOTED(PORTAGE_ROOTPATH_DEFAULT, "${PORTAGE_ROOTPATH_DEFAULT}",[ Default PORTAGE_ROOTPATH])
AC_SUBST(PORTAGE_ROOTPATH_DEFAULT)

AC_ARG_WITH(portage-bin-path,
	AS_HELP_STRING([--with-portage-bin-path=STR],
	[default PORTAGE_BIN_PATH]),
	[
		PORTAGE_BIN_PATH_DEFAULT="${withval}"
		AC_MSG_NOTICE([Using PORTAGE_BIN_PATH=${PORTAGE_BIN_PATH_DEFAULT}])
	],[
		PORTAGE_BIN_PATH_DEFAULT=''
	])

AC_DEFINE_UNQUOTED(PORTAGE_BIN_PATH_DEFAULT, "${PORTAGE_BIN_PATH_DEFAULT}",[ Default PORTAGE_BIN_PATH])
AC_SUBST(PORTAGE_BIN_PATH_DEFAULT)


dnl Check endianess
AC_C_BIGENDIAN

AM_CFLAGS=''
AM_CXXFLAGS=''

EIX_CACHEFILE='/var/cache/eix'

AC_DEFINE_UNQUOTED(EIX_CACHEFILE, "${EIX_CACHEFILE}",[ Location of the cachefile])

AC_DEFINE_UNQUOTED(LEVENSHTEIN_DISTANCE_DEFAULT, "2",[ default levenshtein-distance for matches (as string)])

AC_DEFINE_UNQUOTED(TARGET, "${target}",[ Target system])

# AC_SUBST(EXTRA_CXXFLAGS)
AC_SUBST(EIX_CACHEFILE)
AC_SUBST(LEVENSHTEIN_DISTANCE)

AC_SUBST(PACKAGE_STRING)
AC_SUBST(AM_CXXFLAGS)

if test -n "${GCC}"
then
	AC_MSG_CHECKING([gcc version])
	gcc_v=`${CC} -dumpversion`
	AC_DEFINE_UNQUOTED(GCC_VERSION, "${gcc_v}",[ Version of gcc])
	AC_MSG_RESULT(${gcc_v})
fi

dnl Done!
AC_OUTPUT(Makefile manpage/Makefile src/Makefile doc/Makefile po/Makefile.in)

echo "
 ${PACKAGE} version ${VERSION} configured successfully.
 Good luck with make :)"
