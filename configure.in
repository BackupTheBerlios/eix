# This file is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Copyright (c)
#  Wolfgang Frisch <xororand@users.sourceforge.net>
#  Emil Beinroth <emilbeinroth@gmx.net>
#  Martin VÃ¤th <vaeth@mathematik.uni-wuerzburg.de>

AC_INIT(eix, 0.10.2, http://sourceforge.net/projects/eix/)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_TARGET

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE()

AC_LANG_CPLUSPLUS

AC_PROG_LN_S
AC_PROG_CXX
AM_PROG_LIBTOOL

dnl Look for basic functions:
AC_CHECK_FUNCS([regcomp strchr strdup strerror strrchr fnmatch memset], ,
			   AC_MSG_ERROR(We really need those functions ..))

dnl Well define the following if we don't have one:
AC_CHECK_FUNCS(strndup, , )

dnl We use these optionally:
AC_CHECK_FUNCS([canonicalize_file_name realpath vfork], , )

AC_CHECK_PROGS(regex_cmd, sed)
if test x$regex_cmd = "x"; then
	  AC_MSG_ERROR([error. sed is required to build the manpage.])
fi

dnl Check what type of argument scandir wants
AC_MSG_CHECKING(if scandir argument is const struct dirent * or struct dirent *)
AC_TRY_COMPILE([ #include <dirent.h>
],
[
  const char * dir = 0;
  struct dirent ***namelist = 0;
  int (*select)(const struct dirent *) = 0;
  scandir(dir, namelist, select, alphasort);
],
[AC_MSG_RESULT(const struct dirent *)
 SCANDIR_ARG3="const struct dirent *"
 SCANDIR_CAST=false
],
	AC_TRY_COMPILE([ #include <dirent.h>
	],
	[
	  const char * dir = 0;
	  struct dirent ***namelist = 0;
	  int (*select)(struct dirent *) = 0;
	  scandir(dir, namelist, select, alphasort);
	],
	[AC_MSG_RESULT(struct dirent *)
	 SCANDIR_ARG3="struct dirent *"
	 SCANDIR_CAST=false
	],
	[AC_MSG_RESULT(neither...)
	 AC_MSG_CHECKING(if scandir argument is void)
		AC_TRY_COMPILE([ #include <dirent.h>
		],
		[
		  const char * dir = 0;
		  struct dirent ***namelist = 0;
		  int (*select)(const struct dirent *) = 0;
		  scandir(dir, namelist, reinterpret_cast<int(*)()>(select), alphasort);
		/*scandir(dir, namelist, reinterpret_cast<int(*)(const struct dirent *)>(select), alphasort);*/
		],
		[AC_MSG_RESULT(yes)
		 SCANDIR_ARG3="const struct dirent *"
		 SCANDIR_CAST=true
		],
		AC_MSG_ERROR(I don't know how to call scandir)
		)
	])
)

AC_DEFINE_UNQUOTED(SCANDIR_ARG3, ${SCANDIR_ARG3}, "3th argument of scandir")
if ${SCANDIR_CAST}; then
	dnl AC_DEFINE_UNQUOTED(my_scandir(a,b,c,d), scandir(a,b,reinterpret_cast<int(*)()>(c),d), possible cast for scandir)
	AC_DEFINE_UNQUOTED(my_scandir(a,b,c,d), scandir(a,b,reinterpret_cast<int(*)(const struct dirent *)>(c),d), possible cast for scandir)
else
	AC_DEFINE_UNQUOTED(my_scandir(a,b,c,d), scandir(a,b,c,d), possible cast for scandir)
fi

dnl Use bzip2?
AC_ARG_WITH(bzip2,[  --with-bzip2    Use libbz2 (required for detecting installed overlays)], [
	if test "x${withval}" = "xno"; then
		USE_BZLIB=false
	else
		USE_BZLIB=true
	fi
	],
	[
		USE_BZLIB=""
	])
if test -z "${USE_BZLIB}"; then
	AC_MSG_CHECKING(whether libbz2 is usable)
	BZLIB_LIBS="-lbz2"
	myoLIBS="${LIBS}"
	LIBS="${LIBS} ${BZLIB_LIBS}"
	AC_TRY_LINK([ #include <bzlib.h>
	],
	[
	  BZ2_bzopen("dummy","rb");
	],
	[
		AC_MSG_RESULT(yes)
		USE_BZLIB=true
	],
	[
		AC_MSG_RESULT(no)
		if test "x${USE_BZLIB}" != "xtest"; then
			AC_MSG_ERROR("bzip2 required but libbz2 is unusable")
		fi
		USE_BZLIB=false
		BZLIB_LIBS=""
	])
	LIBS="${myoLIBS}"
fi
if ${USE_BZLIB}; then
	AC_DEFINE(USE_BZLIB,1, Define to 1 if bzlib can be used)
else
	AC_MSG_WARN("no libbz2: eix will not detect installed overlays")
fi
AC_SUBST(BZLIB_LIBS)

dnl Check if std::unique works
AC_MSG_CHECKING(whether std::unique seems to work)
AC_ARG_WITH(unique,[  --with-unique   Assume that unique works ], [
		if test "x${withval}" = "xno"; then
			UNIQUE_WORKS=""
		else
			UNIQUE_WORKS="1"
		fi
	],
	[
		UNIQUE_WORKS="unknown"
	])
if test "x${UNIQUE_WORKS}" = "xunknown"; then
AC_TRY_RUN([
	  #include <vector>
	  #include <string>
	  #include <cstdlib>
	  #include <algorithm>
	  using namespace std;
	  #define UNUSED(p) ((void)(p))
	  int main(int argc, char** argv)
	  {
		UNUSED(argc); UNUSED(argv);
		const char *a[] = {
				"1", "2", "2", "3", "3", "4", "4", "5", NULL,
				"1", "1", "2", "3", "4", "5", "5", "5", NULL,
				"1", "2", "3", "4", "5", NULL,
				NULL };
		const char *b[]= {
				"1", "2", "3", "4", "5", NULL };
		typedef vector<string>::size_type ind;
		for(ind i = 0; a[i]; i++) {
			vector<string> t;
			while(a[i])
				t.push_back(a[i++]);
			t.erase(unique(t.begin(), t.end()), t.end());
			for(ind j = 0; ; j++) {
				if(j == t.size()) {
					if(b[j])
						return 1;
					break;
				}
				if(!b[j])
					return 1;
				if(t[j] != b[j])
					return 1;
			}
		}
		return 0;
	  }
	],
	[
		AC_MSG_RESULT(yes)
		UNIQUE_WORKS="1"
	],
	[
		AC_MSG_RESULT(no)
		UNIQUE_WORKS=""
	])
fi
if test -n "${UNIQUE_WORKS}"; then
	AC_DEFINE(UNIQUE_WORKS,1, Define to 1 if std::unique() works reliable)
fi

dnl Do we have -Wl,--as-needed?
ac_old_ldflags="${LDFLAGS}"
LDFLAGS="-Wl,--as-needed"
AC_MSG_CHECKING(if --as-needed works)
AC_TRY_LINK(
	[],
	[],
	[AC_MSG_RESULT(yes)
	 ac_old_ldflags="${ac_old_ldflags} -Wl,--as-needed"
	],
	[AC_MSG_RESULT(no)])
LDFLAGS="${ac_old_ldflags}"

dnl What about sqlite?
AC_ARG_WITH(sqlite,[  --with-sqlite   Compile in support for cache method sqlite ],[
		if test "x${withval}" = "xno"; then
			SQLITE_LIBS=""
		else
			SQLITE_LIBS="`pkg-config --libs sqlite3`"
			# If pkg-config is not available or failed, we use a default
			if test -z "${SQLITE_LIBS}"; then
				SQLITE_LIBS="-lsqlite3"
			fi
		fi
	],
	[
		SQLITE_LIBS="`pkg-config --libs sqlite3 2>/dev/null`"
	])

if test -n "${SQLITE_LIBS}"; then
	AC_DEFINE(WITH_SQLITE,1, Define to 1 if cache method sqlite is wanted)
fi

AC_SUBST(SQLITE_LIBS)


AC_ARG_WITH(portdir-cache-method,[  --with-portdir-cache-method=STR  default PORTDIR_CACHE_METHOD],
		[PORTDIR_CACHE_METHOD=${withval}],
		[PORTDIR_CACHE_METHOD=metadata])

AC_DEFINE_UNQUOTED(PORTDIR_CACHE_METHOD, "${PORTDIR_CACHE_METHOD}", default PORTDIR_CACHE_METHOD)
AC_SUBST(PORTDIR_CACHE_METHOD)

AC_ARG_WITH(eprefix-default,[  --with-eprefix-default=STR  default EPREFIX],
		[EPREFIX_DEFAULT=${withval}],
		[EPREFIX_DEFAULT=""])

if test "x${EPREFIX_DEFAULT}" = "x/"; then
	EPREFIX_DEFAULT=""
fi

AC_DEFINE_UNQUOTED(EPREFIX_DEFAULT, "$EPREFIX_DEFAULT", default EPREFIX)
AC_SUBST(EPREFIX_DEFAULT)

AC_ARG_WITH(root-default,[  --with-root-default=STR  default ROOT],
		[ROOT_DEFAULT=${withval}],
		[ROOT_DEFAULT=""])

test "x${ROOT_DEFAULT}" = "x/" && ROOT_DEFAULT=""

AC_DEFINE_UNQUOTED(ROOT_DEFAULT, "$ROOT_DEFAULT", default ROOT)
AC_SUBST(ROOT_DEFAULT)

dnl Check endianess
AC_C_BIGENDIAN

AM_CFLAGS=""
AM_CXXFLAGS=""

EIX_CACHEFILE="/var/cache/eix"
LEVENSHTEIN_DISTANCE=2
EIX_WIKI="http://eix.sourceforge.net"

AC_DEFINE_UNQUOTED(EIX_CACHEFILE, "$EIX_CACHEFILE", Location of the cachefile)

AC_DEFINE_UNQUOTED(LEVENSHTEIN_DISTANCE, $LEVENSHTEIN_DISTANCE, Maximal levenshtein-distance for matches)
AC_DEFINE_UNQUOTED(LEVENSHTEIN_DISTANCE_STR, "$LEVENSHTEIN_DISTANCE", Maximal levenshtein-distance for matches (as string))

AC_DEFINE_UNQUOTED(EIX_WIKI, "$EIX_WIKI", Location of eix-wiki)

AC_DEFINE_UNQUOTED(TARGET, "$target", Target system)

# AC_SUBST(EXTRA_CXXFLAGS)
AC_SUBST(EIX_CACHEFILE)
AC_SUBST(LEVENSHTEIN_DISTANCE)
AC_SUBST(EIX_WIKI)

AC_SUBST(PACKAGE_STRING)
AC_SUBST(AM_CXXFLAGS)

if test "x$GCC" != x; then
	AC_MSG_CHECKING(gcc version)
	gcc_v=`${CC} -dumpversion`
	AC_DEFINE_UNQUOTED(GCC_VERSION, "$gcc_v", Version of gcc)
	AC_MSG_RESULT($gcc_v)
fi

dnl Done!
AC_OUTPUT(Makefile manpage/Makefile src/Makefile)

echo ""
echo " $PACKAGE version $VERSION configured successfully."
echo " Good luck with make :)"
