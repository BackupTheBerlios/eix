# This file is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Copyright (c)
#  Wolfgang Frisch <xororand@users.sourceforge.net>
#  Emil Beinroth <emilbeinroth@gmx.net>
#  Martin VÃ¤th <vaeth@mathematik.uni-wuerzburg.de>

AC_INIT(eix, 0.13.1, http://eix.sourceforge.net)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_TARGET

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE()

AC_LANG_CPLUSPLUS

dnl AC_PROG_LN_S
AC_PROG_CXX
AC_FUNC_FSEEKO
dnl AM_PROG_LIBTOOL

dnl Provide basic types:
AC_TYPE_UINT8_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T

dnl Separate binaries?
AC_ARG_ENABLE( separate_binaries,[  --enable-separate-binaries create a separate binary for each program ], [
		case "${enableval}" in
			yes) separate_binaries=true;;
			no)  separate_binaries=false;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-separate-binaries);;
		esac
	],[
		separate_binaries=false
	])
AM_CONDITIONAL(SEPARATE_BINARIES, ${separate_binaries})
if ! ${separate_binaries}; then
	AC_PROG_LN_S
fi

dnl Separate update-eix?
AC_ARG_ENABLE( separate_update,[  --enable-separate-update   create a separate update-eix binary ], [
		case "${enableval}" in
			yes) separate_update=true;;
			no)  separate_update=false;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-separate-update);;
		esac
	],[
		separate_update=false
	])
${separate_binaries} && separate_update=true
AM_CONDITIONAL(SEPARATE_UPDATE, ${separate_update})


dnl Look for basic functions:
AC_CHECK_FUNCS([regcomp strchr strdup strerror strrchr fnmatch memset], ,
			   AC_MSG_ERROR(We really need those functions ..))

dnl Well define the following if we don't have one:
AC_CHECK_FUNCS([strndup strtoul strtol atoi], , )

dnl We use these optionally:
AC_CHECK_FUNCS([canonicalize_file_name realpath vfork], , )

dnl Compatibility Headers:
AC_CHECK_HEADERS(tr1/cstdint)

dnl Further headers:
AC_CHECK_HEADERS(climits)
AC_CHECK_HEADERS(limits.h)
AC_CHECK_HEADERS(sys/param.h)


AC_MSG_CHECKING(if stdint.h can really be used)
AC_TRY_COMPILE([ # include <stdint.h>
],[],
[AC_MSG_RESULT(yes)
 AC_DEFINE(USE_STDINT_H,1, Define to 1 if stdint.h can be used from C++)
],
[AC_MSG_RESULT(no)
])

AC_CHECK_PROGS(regex_cmd, sed)
if test x$regex_cmd = "x"; then
	  AC_MSG_ERROR([error. sed is required to build the manpage.])
fi

dnl Use bzip2?
AC_ARG_WITH(bzip2,[  --with-bzip2            Use libbz2 (required for detecting installed overlays)], [
	if test "x${withval}" = "xno"; then
		USE_BZLIB=""
	else
		USE_BZLIB="1"
	fi
	],
	[
		USE_BZLIB="test"
	])
if test -n "${USE_BZLIB}"; then
	AC_MSG_CHECKING(whether libbz2 is usable)
	BZLIB_LIBS="-lbz2"
	myoLIBS="${LIBS}"
	LIBS="${LIBS} ${BZLIB_LIBS}"
	AC_TRY_LINK([ #include <bzlib.h>
	],
	[
	  BZ2_bzopen("dummy","rb");
	],
	[
		AC_MSG_RESULT(yes)
		USE_BZLIB="1"
	],
	[
		AC_MSG_RESULT(no)
		if test "x${USE_BZLIB}" != "xtest"; then
			AC_MSG_ERROR("bzip2 required but libbz2 is unusable")
		fi
		USE_BZLIB=""
		BZLIB_LIBS=""
	])
	LIBS="${myoLIBS}"
fi
if test -n "${USE_BZLIB}"; then
	AC_DEFINE(USE_BZLIB,1, Define to 1 if bzlib can be used)
else
	AC_MSG_WARN("no libbz2: eix will not detect installed overlays reliably")
fi
AC_SUBST(BZLIB_LIBS)

dnl Use rst?
AC_ARG_WITH(rst,[  --with-rst              Use rst2html.py to document cache file format in html ], [
	if test "x${withval}" = "xno"; then
		rst=false
	else
		rst=true
	fi
	],
	[
		rst=false
	])
AM_CONDITIONAL(USE_RST, ${rst})

dnl Use obsoleted cache method?
AC_ARG_ENABLE(  extra_cache,[  --enable-extra-cache    enable unsupported cache method portage-2.1* ], [
		case "${enableval}" in
			yes) extra_cache=true;;
			no)  extra_cache=false;;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-extra-cache);;
		esac
	],[
		extra_cache=false
	])
AM_CONDITIONAL(EXTRA_CACHE, ${extra_cache})

dnl Check if std::unique works
AC_MSG_CHECKING(whether std::unique seems to work)
AC_ARG_ENABLE(unique,[  --enable-unique         assume that unique works ], [
		case "${enableval}" in
			yes) UNIQUE_WORKS="1";;
			no)  UNIQUE_WORKS="";;
			*) AC_MSG_ERROR(bad value ${enableval} for --enable-unique);;
		esac
	],[
		UNIQUE_WORKS="unknown"
	])
if test "x${UNIQUE_WORKS}" = "xunknown"; then
AC_TRY_RUN([
	  #include <vector>
	  #include <string>
	  #include <cstdlib>
	  #include <algorithm>
	  using namespace std;
	  #define UNUSED(p) ((void)(p))
	  int main(int argc, char** argv)
	  {
		UNUSED(argc); UNUSED(argv);
		const char *a[] = {
				"1", "2", "2", "3", "3", "4", "4", "5", NULL,
				"1", "1", "2", "3", "4", "5", "5", "5", NULL,
				"1", "2", "3", "4", "5", NULL,
				NULL };
		const char *b[]= {
				"1", "2", "3", "4", "5", NULL };
		typedef vector<string>::size_type ind;
		for(ind i = 0; a[i]; i++) {
			vector<string> t;
			while(a[i])
				t.push_back(a[i++]);
			t.erase(unique(t.begin(), t.end()), t.end());
			for(ind j = 0; ; j++) {
				if(j == t.size()) {
					if(b[j])
						return 1;
					break;
				}
				if(!b[j])
					return 1;
				if(t[j] != b[j])
					return 1;
			}
		}
		return 0;
	  }
	],
	[
		AC_MSG_RESULT(yes)
		UNIQUE_WORKS="1"
	],
	[
		AC_MSG_RESULT(no)
		UNIQUE_WORKS=""
	])
fi
if test -n "${UNIQUE_WORKS}"; then
	AC_DEFINE(UNIQUE_WORKS,1, Define to 1 if std::unique() works reliable)
fi

dnl What about sqlite?
AC_ARG_WITH(sqlite,[  --with-sqlite           Compile in support for cache method sqlite ],[
		if test "x${withval}" = "xno"; then
			SQLITE_LIBS=""
		else
			SQLITE_LIBS="`pkg-config --libs sqlite3`"
			# If pkg-config is not available or failed, we use a default
			if test -z "${SQLITE_LIBS}"; then
				SQLITE_LIBS="-lsqlite3"
			fi
		fi
	],
	[
		SQLITE_LIBS="`pkg-config --libs sqlite3 2>/dev/null`"
	])

if test -n "${SQLITE_LIBS}"; then
	AC_DEFINE(WITH_SQLITE,1, Define to 1 if cache method sqlite is wanted)
fi

AC_SUBST(SQLITE_LIBS)


AC_ARG_WITH(portdir-cache-method,[  --with-portdir-cache-method=STR  default PORTDIR_CACHE_METHOD],
		[PORTDIR_CACHE_METHOD=${withval}],
		[PORTDIR_CACHE_METHOD=metadata])

AC_DEFINE_UNQUOTED(PORTDIR_CACHE_METHOD, "${PORTDIR_CACHE_METHOD}", default PORTDIR_CACHE_METHOD)
AC_SUBST(PORTDIR_CACHE_METHOD)

AC_ARG_WITH(eprefix-default,[  --with-eprefix-default=STR       default EPREFIX],
		[EPREFIX_DEFAULT=${withval}],
		[EPREFIX_DEFAULT=""])

if test "x${EPREFIX_DEFAULT}" = "x/"; then
	EPREFIX_DEFAULT=""
fi

AC_DEFINE_UNQUOTED(EPREFIX_DEFAULT, "$EPREFIX_DEFAULT", default EPREFIX)
AC_SUBST(EPREFIX_DEFAULT)

AC_ARG_WITH(root-default,[  --with-root-default=STR          default ROOT],
		[ROOT_DEFAULT=${withval}],
		[ROOT_DEFAULT=""])

test "x${ROOT_DEFAULT}" = "x/" && ROOT_DEFAULT=""

AC_DEFINE_UNQUOTED(ROOT_DEFAULT, "$ROOT_DEFAULT", default ROOT)
AC_SUBST(ROOT_DEFAULT)

dnl Check endianess
AC_C_BIGENDIAN

AM_CFLAGS=""
AM_CXXFLAGS=""

EIX_CACHEFILE="/var/cache/eix"
LEVENSHTEIN_DISTANCE=2

AC_DEFINE_UNQUOTED(EIX_CACHEFILE, "$EIX_CACHEFILE", Location of the cachefile)

AC_DEFINE_UNQUOTED(LEVENSHTEIN_DISTANCE, $LEVENSHTEIN_DISTANCE, Maximal levenshtein-distance for matches)
AC_DEFINE_UNQUOTED(LEVENSHTEIN_DISTANCE_STR, "$LEVENSHTEIN_DISTANCE", Maximal levenshtein-distance for matches (as string))

AC_DEFINE_UNQUOTED(TARGET, "$target", Target system)

# AC_SUBST(EXTRA_CXXFLAGS)
AC_SUBST(EIX_CACHEFILE)
AC_SUBST(LEVENSHTEIN_DISTANCE)

AC_SUBST(PACKAGE_STRING)
AC_SUBST(AM_CXXFLAGS)

if test "x$GCC" != x; then
	AC_MSG_CHECKING(gcc version)
	gcc_v=`${CC} -dumpversion`
	AC_DEFINE_UNQUOTED(GCC_VERSION, "$gcc_v", Version of gcc)
	AC_MSG_RESULT($gcc_v)
fi

dnl Done!
AC_OUTPUT(Makefile manpage/Makefile src/Makefile doc/Makefile)

echo ""
echo " $PACKAGE version $VERSION configured successfully."
echo " Good luck with make :)"
