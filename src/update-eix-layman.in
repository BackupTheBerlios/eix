#! /usr/bin/env sh
# This script is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Author and Copyright (c):
#   Martin V\"ath <vaeth@mathematik.uni-wuerzburg.de>
#
# This file must be "source"d by POSIX scripts.
#
# It can add or remove local layman overlays to the current eix
# database. (@PACKAGE_STRING@).

. ./functions-eix.sh.in
ReadFunctions

Usage () {
	local i n p
	exitcode="${1:-1}"
	n="${0##*/}"
	p='@PACKAGE_STRING@'
	eval_gettext 'Usage: ${n} [options] command
Add or remove local layman overlays to eix database (${p})
The following commands are provided:

add:	Add the local layman overlays to the eix database
remove:	Remove the local layman overlays from the eix database.

Options:
	-a OVERLAY    Add overlay to the list of layman overlays.
	-A PATH       Add PATH to the sourced make.conf-s used to determine
	              the layman overlays. Current value:'
	eval "set -- ${layman_make}"
	[ ${#} -eq 0 ] && set -- "`gettext \
		'none (i.e. no readable layman make.conf specified)'`"
	for i
	do
		printf '%s\t%s' '
	              ' "${i}"
	done
	echo
	gettext \
'	-C            Clear the above list
	-c LAYMAN_CFG Use layman.cfg file to determine entry for above list
	-v            Verbose (default)
	-q            Quiet'
	echo
	exit ${exitcode}
}

ClearLaymanMake () {
	Push -c layman_make
}

PushLaymanMake () {
	local m r
	r=1
	for m
	do
		[ -n "${m}" ] || continue
		test -r "${m}" || continue
		Push layman_make "${m}"
		r=0
	done
	return ${r}
}

PrintLaymanMake () {
	python -c "from layman.config import Config
print Config()['make_conf']" "${@}" 2>/dev/null
}

CalcLaymanMake () {
	local l
	l=`PrintLaymanMake "${@}"` || return
	PushLaymanMake "${l}"
}

GetPortdir
ClearLaymanMake
CalcLaymanMake || \
	PushLaymanMake '/usr/local/portage/layman/make.conf' || \
	PushLaymanMake "${local_portdir:-/}local/layman/make.conf"
layman_overlays=''

OPTIND=1
while getopts 'vqa:A:c:C?hH' opt
do
	case "${opt}" in
		v) verbose=true;;
		q) verbose=false;;
		a) Push layman_overlays "${OPTARG}";;
		c) CalcLaymanMake -c "${OPTARG}";;
		A) PushLaymanMake "${OPTARG}";;
		C) ClearLaymanMake;;
		*) Usage 0;;
	esac
done
[ ${OPTIND} -gt 1 ] && shift "`expr ${OPTIND} - 1`"

GetOverlays () {
	local i
	eval "set -- ${layman_make}"
	for i
	do
		[ -n "${i}" ] && test -r "${i}" && Push layman_overlays \
			`PORTDIR_OVERLAY=''; . "${i}"; \
				printf '%s' "${PORTDIR_OVERLAY}"`
	done
}

Init () {
	ClearUpdateEixArgs
	GetOverlays
	AddLocalMethods
}

Add () {
	Init
	eval "AddOverlays ${layman_overlays}"
	CallUpdateEix
}

Remove () {
	Init
	eval "AddExcludes ${layman_overlays}"
	CallUpdateEix
}

main_command="${1}"
[ ${#} -gt 0 ] && shift

case "${main_command}" in
	add*)               Add "${@}";;
	rem*|del*|rm*|sub*) Remove "${@}";;
	*)                  Usage;;
esac

exit 0
