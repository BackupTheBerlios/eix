#!/bin/bash
###########################################################################
#   eix is a small utility for searching ebuilds in the                   #
#   Gentoo Linux portage system. It uses indexing to allow quick searches #
#   in package descriptions with regular expressions.                     #
#                                                                         #
#   https://sourceforge.net/projects/eix                                  #
#                                                                         #
#   Copyright (c)                                                         #
#     Martin Väth <vaeth@mathematik.uni-wuerzburg.de>                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
###########################################################################

source update-eix-functions.sh.in

[[ "${OVERLAYPARENT}" ]] || OVERLAYPARENT="/usr/portage/local"
EIXCACHESNAME="eix-caches.tbz2"

Sanitize () {
	READLINK='' NormalizeNames OVERLAYPARENT \
		|| die '$OVERLAYPARENT must not be empty'
	[[ "${RELATIVE}" ]] && die '$OVERLAYPARENT must start with /'
}
Sanitize

Usage () {
	echo "Usage: ${0##*/} [options] command [FILE]
Handle some remote updates for @PACKAGE_STRING@
The following commands are provided:

update: Fetch the eix-caches of some layman overlays into a temporary file
        resp. into FILE and add them to the eix database.
fetch:  Only fetch the overlays into FILE
add:    Only add the overlays from FILE to the eix database.
remove: Remove all temporarily added virtual overlays from the eix database;
        this is similar to
        	KEEP_VIRTUALS=false update-eix
        but faster (without actual updating where possible).

It is strongly recommended to use the update/fetch commands only as root
or with the -u \"nobody\" option or with very limited permissions.

For \"update\" and \"add\" all corresponding local overlay paths are excluded
from the current database to avoid confusion. The local paths are determined
by prefixing the path
	${OVERLAYPARENT}
You can modify this value by setting the environment variable \$OVERLAYPARENT
or with the -o option. If you do not want this feature, set \$OVERLAYPARENT
to some path not containing any overlays.

Options:
	-O x    Extract from the cache files within FILE only overlay Nr. x,
	        i.e. use cache method eix*:...:x for reading these cache files.
	        Default for x is * (which means all overlays in each files)
	        See \"man eix\" for details on cache method eix*.
	-u USER Call wget as USER. Defaults to \"nobody\" if called as root.
	-o PATH Use PATH as \$OVERLAYPARENT
	-v      Verbose (default)
	-q      Quiet"
	EXITCODE="${1}"
	exit "${EXITCODE}"
}

OVERLAYNR='*'
VERBOSE=1
FETCHUSER=''
while getopts 'O:vqu:o:?hH' OPTION; do
	case "${OPTION}" in
		O) OVERLAYNR="${OPTARG}";;
		v) VERBOSE=1;;
		q) VERBOSE='';;
		u) FETCHUSER="${OPTARG}";;
		o) OVERLAYPARENT="${OPTARG}"; Sanitize;;
		*) Usage 0;;
	esac
done
shift $((OPTIND-1))

declare -a SUCMD

NEED_ARG=''
FILENAME=''
GetFilename () {
	[[ ${#} -gt 1 ]] && Usage 1
	if [[ ${#} -lt 1 ]]; then
		[[ "${NEED_ARG}" ]] && die "Filename argument is mandatory"
		return
	fi
	FILENAME="${1}"
	[[ "${FILENAME}" ]] || die "Filename argument must be nonempty"
	[[ "${FILENAME:0:1}" != '/' && "${FILENAME:0:1}" != '~' ]] && \
		FILENAME="$(pwd)/${FILENAME}"
}

CalcSuCmd () {
	local MY_CMD
	MY_CMD="$(type -P "${1}")" || die "${1} cannot be found in $PATH"
	SUCMD=("${MY_CMD}")
	[[ "${FETCHUSER}" || "${UID}" -ne 0 ]] || FETCHUSER="nobody"
	[[ "${FETCHUSER}" ]] \
		&& SUCMD=('/bin/su' '-s' "${MY_CMD}" "${FETCHUSER}")
}

CdDir () {
	cd "${1}" >/dev/null || die "cannot cd to ${TMPDIR}"
}

TMPDIR=''
EXITCODE=0
Cleanup () {
	cd / >/dev/null;
	if [[ "${TMPDIR}" ]]; then
		[[ -d "${TMPDIR}" ]] && rm -rf -- "${TMPDIR}"
	fi
	TMPDIR=''
	trap '' 0 1 2 15
	exit "${EXITCODE}"
}
MakeTempDir () {
	local COUNT
	[[ "${TMPDIR}" ]] && return
	if type mktemp &>/dev/null; then
		TMPDIR="$(mktemp -d /tmp/${0##*/}.XXXXXX)" || \
			die "cannot create temporary directory"
	else
		COUNT=0
		while true; do
			((COUNT++ == 10000)) && \
				die "found no free temp after 10000 attempts"
			TMPDIR="/tmp/${0##*/}.$$.${RANDOM}.${RANDOM}.${RANDOM}"
			[[ -e "${TMPDIR}" ]] && continue
			mkdir "${TMPDIR}" || die "cannot create ${TMPDIR}"
			break
		done
	fi
	trap Cleanup 0 1 2 15
	chmod 755 "${TMPDIR}"
	[[ "${1}" ]] && CdDir "${TMPDIR}"
}

TMPSUB=''
MakeTempSub () {
	if [[ -z "${TMPSUB}" ]]; then
		MakeTempDir
		TMPSUB="${TMPDIR}/1"
		( umask 000; mkdir "${TMPSUB}" )
	fi
	[[ "${1}" ]] && CdDir "${TMPSUB}"
}

TMPFILE=''
FetchTemp () {
	local SOURCE="http://dev.gentooexperimental.org/eix_cache"
	SOURCE="${SOURCE}/${EIXCACHESNAME}"
	MakeTempDir cd
	TMPFILE="${TMPDIR}/${EIXCACHESNAME}"
	( umask 000; >"${TMPFILE}" )
	CalcSuCmd wget
	RunCommand "Fetching ${EIXCACHESNAME}" \
		"${SUCMD[@]}" -c "${SOURCE}" || die "could not fetch ${SOURCE}"
}

AddArchive () {
	local I NAME VIRTUAL OVERLAYARG
	RunCommand "Unpacking data" tar xjf "${1}" || die "cannot unpack ${1}"
	ClearUpdateEixArgs
	AddLocalMethods
	for I in *
	do
		NAME="${I//:/_}"
		[[ "${NAME}" != "${I}" ]] && mv -- "${I}" "${NAME}"
	done
	if [[ "${OVERLAYNR}" ]]; then
		OVERLAYARG=":${OVERLAYNR}"
	else
		OVERLAYARG=''
	fi
	for I in *
	do
		NAME="${I%.eix}"
		NAME="${NAME#_usr_portage_local_}"
		NAME="${NAME//_//}"
		VIRTUAL="(${NAME})"
		AddMethod "${VIRTUAL}" "eix*:${2}/${I}${OVERLAYARG}"
		AddOverlays "${VIRTUAL}"
		AddExcludes "${OVERLAYPARENT}/${NAME}"
	done
	export KEEP_VIRTUALS=true
	CallUpdateEix
}

FetchCopy () {
	GetFilename "${@}"
	FetchTemp
	[[ "${FILENAME}" ]] || return
	(
		[[ "${UID}" -eq 0 ]] && umask 002
		cp --preserve=timestamps -- "${TMPFILE}" "${FILENAME}"
	)
	[[ "${UID}" -eq 0 ]] && chown -- portage:portage "${FILENAME}"
}

Fetch () {
	NEED_ARG=1
	FetchCopy "${@}"
}

Add () {
	NEED_ARG=1
	GetFilename "${@}"
	[[ -r "${FILENAME}" ]] || die "cannot read ${FILENAME}"
	MakeTempDir cd
	AddArchive "${FILENAME}" "${TMPDIR}"
}

Remove () {
	ClearUpdateEixArgs
	AddLocalMethods
	export KEEP_VIRTUALS=false
	CallUpdateEix
}

Update () {
	FetchCopy "${@}"
	MakeTempSub cd
	AddArchive "${TMPFILE}" "${TMPSUB}"
}

MAIN_COMMAND="${1}"
shift

case "${MAIN_COMMAND}" in
	update|both)        Update "${@}";;
	fetch*|get|wget)    Fetch "${@}";;
	add*)               Add "${@}";;
	rem*|del*|rm*|sub*) Remove "${@}";;
	*)                  Usage 1;;
esac

exit 0
