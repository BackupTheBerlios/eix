#! /usr/bin/env sh
# This script is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Author and Copyright (c):
#   Martin V\"ath <vaeth@mathematik.uni-wuerzburg.de>
#
# It can be used to fetch the "standard" overlay data and add it to the
# eix database. (@PACKAGE_STRING@).

. ./functions-eix.sh.in
ReadFunctions

: ${OVERLAYPARENT:=/usr/portage/local}
eixcachesname='eix-caches.tbz2'

Sanitize () {
	have_readlink=false NormalizeNames OVERLAYPARENT \
		|| die "`gettext '$OVERLAYPARENT must not be empty'`"
	[ -z "${relative}" ] || \
		die "`gettext '$OVERLAYPARENT must start with /'`"
}
Sanitize

Usage () {
	local n p
	n="${0##*/}"
	p='@PACKAGE_STRING@'
	eval_gettext 'Usage: ${n} [options] command [FILE]
Get data from a remote datebase for ${p}.
The following commands are provided:

update: Fetch the eix-caches of some layman overlays into a temporary file
        resp. into FILE and add them to the eix database.
        To keep this data across update-eix calls, you might want to set
        KEEP_VIRTUALS=true in /etc/eixrc (or in ~/.eixrc)
fetch:  Only fetch the overlays into FILE
add:    Only add the overlays from FILE to the eix database.
remove: Remove all temporarily added virtual overlays from the eix database;
        this is similar to
        	KEEP_VIRTUALS=false update-eix
        but faster (without actual updating where possible).

It is strongly recommended to use the update/fetch commands with very limited
permissions. Permissions are dropped when run as root or with the "-u nobody"
option. Do not use "-u root"!

For "update" and "add" all corresponding local overlay paths are excluded
from the update of the current database to avoid confusion.
These local paths are determined by prefixing the path
	${OVERLAYPARENT}
You can modify this value by setting the environment variable OVERLAYPARENT
or with the -o option. If you do not want this feature, set OVERLAYPARENT
to some path not containing any overlays.

Options:
	-O x    Extract from the cache files within FILE only overlay Nr. x,
	        i.e. use cache method eix*:...:x for reading these cache files.
	        Default for x is * (which means all overlays in each files)
	        See "man eix" for details on cache method eix*.
	-u USER Call wget as USER. Defaults to "nobody" if called as root.
	-o PATH Use PATH as OVERLAYPARENT
	-v      Verbose (default)
	-q      Quiet'
	echo
	exitcode=${1:-1}
	exit ${exitcode}
}

overlaynr='*'
verbose=true
fetchuser=''
OPTIND=1
while getopts 'O:vqu:o:?hH' opt
do
	case "${opt}" in
		O) overlaynr="${OPTARG}";;
		v) verbose=true;;
		q) verbose=false;;
		u) fetchuser="${OPTARG}";;
		o) OVERLAYPARENT="${OPTARG}"; Sanitize;;
		*) Usage 0;;
	esac
done
[ ${OPTIND} -gt 1 ] && shift "`expr ${OPTIND} - 1`"

need_arg=false
filename=''
GetFilename () {
	[ ${#} -gt 1 ] && Usage
	if [ ${#} -lt 1 ]
	then
		${need_arg} && \
			die "`gettext 'Filename argument is mandatory'`"
		return
	fi
	filename="${1}"
	[ -n "${filename}" ] || \
		die "`gettext 'Filename argument must be nonempty'`"
	case "${filename}" in
		/*|'~'*) :;;
		*) filename="`pwd`/${filename}";;
	esac
}

CalcSuCmd () {
	local shexec a
	if [ -z "${fetchuser}" ]
	then
		[ -n "${UID}" ] || UID="`id -u`"
		if [ "${UID}" -ne 0 ]; then
			Push -c sucmd "${@}"
			return
		fi
		fetchuser=nobody
	fi
	shexec="${SHELL}"
	if [ -z "${shexec}" ] || ! test -x "${SHELL}"
	then
		shexec="`command -v sh`" && test -x "${shexec}" || \
			shexec='/bin/sh'
	fi
	a="${1}"
	sucmd=`command -v "${a}"` && test -x "${sucmd}" || \
		die "`eval_gettext '${a} cannot be found in PATH'`"
	Push -c sucmd "${sucmd}"
	shift
	Push sucmd "${@}"
	Push -c sucmd '/bin/su' '-s' "${shexec}" '-c' \
		"eval exec ${sucmd}" "${fetchuser}"
}

CdDir () {
	local a
	cd -- "${1}" >/dev/null && return
	a="${1}"
	die "`eval_gettext 'cannot cd to ${a}'`"
}

tmpdir=''
exitcode=0
Cleanup () {
	cd / >/dev/null
	if [ -n "${tmpdir}" ]
	then
		test -d "${tmpdir}" && rm -rf -- "${tmpdir}"
	fi
	tmpdir=''
	trap - EXIT HUP INT TERM
	exit "${exitcode}"
}
MakeTempDir () {
	local count
	[ -n "${tmpdir}" ] && return
	if command -v mktemp >/dev/null 2>&1
	then
		tmpdir=`mktemp -d "/tmp/${0##*/}.XXXXXXXX"` || \
			die "`gettext 'cannot create temporary directory'`"
	else
		count=0
		while true; do
			[ ${count} -eq 9999 ] && die "`gettext \
				'found no free tempname after 10000 attempts'`"
			count="`expr ${count} + 1`"
			tmpdir="/tmp/${0##*/}.$$.${RANDOM}.${count}.${RANDOM}"
			test -e "${tmpdir}" && continue
			mkdir "${tmpdir}" || die "`eval_gettext \
				'cannot create temporary dir ${tmpdir}'`"
			break
		done
	fi
	trap Cleanup EXIT HUP INT TERM
	chmod -- 755 "${tmpdir}"
	[ -z "${1}" ] || CdDir "${tmpdir}"
}

tmpsub=''
MakeTempSub () {
	if [ -z "${tmpsub}" ]
	then
		MakeTempDir
		tmpsub="${tmpdir}/1"
		( umask 000; mkdir -- "${tmpsub}" )
	fi
	[ -z "${1}" ] || CdDir "${tmpsub}"
}

tmpfile=''
FetchTemp () {
	local addr
	addr="http://dev.gentooexperimental.org/eix_cache/${eixcachesname}"
	MakeTempDir cd
	tmpfile="${tmpdir}/${eixcachesname}"
	( umask 000; : >"${tmpfile}" )
	CalcSuCmd wget -c "${addr}"
	eval "set -- ${sucmd}"
	RunCommand "`eval_gettext 'Fetching ${eixcachesname}'`" "${@}" || \
		die "`eval_gettext 'could not fetch ${addr}'`"
}

AddArchive () {
	local i n name virtual overlayarg
	i="${1}"
	RunCommand "Unpacking data" tar xjf "${i}" || \
		die "`eval_gettext 'cannot unpack ${i}'`"
	ClearUpdateEixArgs
	AddLocalMethods
	for i in *
	do
		name="${i}"
		Replace -g name ':' '_' || mv -- "${i}" "${name}"
	done
	if [ -n "${overlaynr}" ]
	then
		overlayarg=":${overlaynr}"
	else
		overlayarg=''
	fi
	for i in *
	do
		name="${i%.eix}"
		name="${name#_usr_portage_local_}"
		Replace -g name '_' '/'
		virtual="(${name})"
		n="${2}/${i}"
		Replace -g n '\' '\\'
		Replace -g n ':' '\:'
		AddMethod "${virtual}" "eix*:${n}${overlayarg}"
		AddOverlays "${virtual}"
		AddExcludes "${OVERLAYPARENT}/${name}"
	done
	export KEEP_VIRTUALS=true
	CallUpdateEix
}

FetchCopy () {
	GetFilename "${@}"
	FetchTemp
	[ -z "${filename}" ] && return
	(
		[ "${UID}" -eq 0 ] && umask 002
		cp --preserve=timestamps -- "${tmpfile}" "${filename}"
	)
	[ "${UID}" -eq 0 ] && chown -- portage:portage "${filename}"
}

Fetch () {
	need_arg=true
	FetchCopy "${@}"
}

Add () {
	need_arg=true
	GetFilename "${@}"
	test -r "${filename}" || \
		die "`eval_gettext 'cannot read ${filename}'`"
	MakeTempDir cd
	AddArchive "${filename}" "${tmpdir}"
}

Remove () {
	ClearUpdateEixArgs
	AddLocalMethods
	export KEEP_VIRTUALS=false
	CallUpdateEix
}

Update () {
	FetchCopy "${@}"
	MakeTempSub cd
	AddArchive "${tmpfile}" "${tmpsub}"
}

main_command="${1}"
[ ${#} -gt 0 ] && shift

[ -n "${UID}" ] || UID="`id -u`"

case "${main_command}" in
	update|both)        Update "${@}";;
	fetch*|get|wget)    Fetch "${@}";;
	add*)               Add "${@}";;
	rem*|del*|rm*|sub*) Remove "${@}";;
	*)                  Usage;;
esac

exit 0
