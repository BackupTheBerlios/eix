#!/bin/bash
###########################################################################
#   eix is a small utility for searching ebuilds in the                   #
#   Gentoo Linux portage system. It uses indexing to allow quick searches #
#   in package descriptions with regular expressions.                     #
#                                                                         #
#   https://sourceforge.net/projects/eix                                  #
#                                                                         #
#   Copyright (c)                                                         #
#     Martin Väth <vaeth@mathematik.uni-wuerzburg.de>                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
###########################################################################

. update-eix-functions.sh.in

test -z "${OVERLAYPARENT}" && OVERLAYPARENT="/usr/portage/local"
EIXCACHESNAME="eix-caches.tbz2"

Sanitize () {
	READLINK='' NormalizeNames OVERLAYPARENT \
		|| die '$OVERLAYPARENT must not be empty'
	test -n "${RELATIVE}" && die '$OVERLAYPARENT must start with /'
}
Sanitize

Usage () {
	echo "Usage: ${0##*/} [options] command [FILE]
Handle some remote updates for @PACKAGE_STRING@
The following commands are provided:

update: Fetch the eix-caches of some layman overlays into a temporary file
        resp. into FILE and add them to the eix database.
        To keep this data across update-eix calls, you might want to set
        KEEP_VIRTUALS=true in /etc/eixrc (or in ~/.eixrc)
fetch:  Only fetch the overlays into FILE
add:    Only add the overlays from FILE to the eix database.
remove: Remove all temporarily added virtual overlays from the eix database;
        this is similar to
        	KEEP_VIRTUALS=false update-eix
        but faster (without actual updating where possible).

It is strongly recommended to use the update/fetch commands with very limited
permissions. Permissions are dropped when run as root or with the \"-u nobody\"
option. Don't use \"-u root\".

For \"update\" and \"add\" all corresponding local overlay paths are excluded
from the current database to avoid confusion. The local paths are determined
by prefixing the path
	${OVERLAYPARENT}
You can modify this value by setting the environment variable \$OVERLAYPARENT
or with the -o option. If you do not want this feature, set \$OVERLAYPARENT
to some path not containing any overlays.

Options:
	-O x    Extract from the cache files within FILE only overlay Nr. x,
	        i.e. use cache method eix*:...:x for reading these cache files.
	        Default for x is * (which means all overlays in each files)
	        See \"man eix\" for details on cache method eix*.
	-u USER Call wget as USER. Defaults to \"nobody\" if called as root.
	-o PATH Use PATH as \$OVERLAYPARENT
	-v      Verbose (default)
	-q      Quiet"
	EXITCODE=${1}
	exit "${EXITCODE}"
}

OVERLAYNR='*'
VERBOSE=true
FETCHUSER=''
while getopts 'O:vqu:o:?hH' OPTION; do
	case "${OPTION}" in
		O) OVERLAYNR="${OPTARG}";;
		v) VERBOSE=true;;
		q) VERBOSE=false;;
		u) FETCHUSER="${OPTARG}";;
		o) OVERLAYPARENT="${OPTARG}"; Sanitize;;
		*) Usage 0;;
	esac
done
shift $(( ${OPTIND} - 1 ))

declare -a SUCMD

NEED_ARG=false
FILENAME=''
GetFilename () {
	test ${#} -gt 1 && Usage 1
	if test ${#} -lt 1; then
		${NEED_ARG} && die "Filename argument is mandatory"
		return
	fi
	FILENAME="${1}"
	test -n "${FILENAME}" || die "Filename argument must be nonempty"
	test "${FILENAME:0:1}" = '/' || test "${FILENAME:0:1}" = '~' || \
		FILENAME="$(pwd)/${FILENAME}"
}

CalcSuCmd () {
	local MY_CMD
	MY_CMD="$(type -P "${1}")" || die "${1} cannot be found in $PATH"
	SUCMD=("${MY_CMD}")
	test -n "${FETCHUSER}" || test "${UID}" -ne 0 || FETCHUSER="nobody"
	test -n "${FETCHUSER}" && \
		SUCMD=('/bin/su' '-s' "${MY_CMD}" "${FETCHUSER}")
}

CdDir () {
	cd "${1}" >/dev/null || die "cannot cd to ${TMPDIR}"
}

TMPDIR=''
EXITCODE=0
Cleanup () {
	cd / >/dev/null;
	if test -n "${TMPDIR}"; then
		test -d "${TMPDIR}" && rm -rf -- "${TMPDIR}"
	fi
	TMPDIR=''
	trap '' 0 1 2 15
	exit "${EXITCODE}"
}
MakeTempDir () {
	local COUNT
	test -n "${TMPDIR}" && return
	if type mktemp >/dev/null 2>&1; then
		TMPDIR="$(mktemp -d /tmp/${0##*/}.XXXXXX)" || \
			die "cannot create temporary directory"
	else
		COUNT=0
		while true; do
			test ${COUNT} -eq 9999 && \
				die "found no free temp after 10000 attempts"
			COUNT=$(( ${COUNT} + 1 ))
			TMPDIR="/tmp/${0##*/}.$$.${RANDOM}.${RANDOM}.${RANDOM}"
			test -e "${TMPDIR}" && continue
			mkdir "${TMPDIR}" || die "cannot create ${TMPDIR}"
			break
		done
	fi
	trap Cleanup 0 1 2 15
	chmod 755 "${TMPDIR}"
	test -n "${1}" && CdDir "${TMPDIR}"
}

TMPSUB=''
MakeTempSub () {
	if test -z "${TMPSUB}"; then
		MakeTempDir
		TMPSUB="${TMPDIR}/1"
		( umask 000; mkdir "${TMPSUB}" )
	fi
	test -n "${1}" && CdDir "${TMPSUB}"
}

TMPFILE=''
FetchTemp () {
	local SOURCE="http://dev.gentooexperimental.org/eix_cache"
	SOURCE="${SOURCE}/${EIXCACHESNAME}"
	MakeTempDir cd
	TMPFILE="${TMPDIR}/${EIXCACHESNAME}"
	( umask 000; >"${TMPFILE}" )
	CalcSuCmd wget
	RunCommand "Fetching ${EIXCACHESNAME}" \
		"${SUCMD[@]}" -c "${SOURCE}" || die "could not fetch ${SOURCE}"
}

AddArchive () {
	local I NAME VIRTUAL OVERLAYARG
	RunCommand "Unpacking data" tar xjf "${1}" || die "cannot unpack ${1}"
	ClearUpdateEixArgs
	AddLocalMethods
	for I in *
	do
		NAME="${I//:/_}"
		test "${NAME}" = "${I}" || mv -- "${I}" "${NAME}"
	done
	if test -n "${OVERLAYNR}"; then
		OVERLAYARG=":${OVERLAYNR}"
	else
		OVERLAYARG=''
	fi
	for I in *
	do
		NAME="${I%.eix}"
		NAME="${NAME#_usr_portage_local_}"
		NAME="${NAME//_//}"
		VIRTUAL="(${NAME})"
		AddMethod "${VIRTUAL}" "eix*:${2}/${I}${OVERLAYARG}"
		AddOverlays "${VIRTUAL}"
		AddExcludes "${OVERLAYPARENT}/${NAME}"
	done
	export KEEP_VIRTUALS=true
	CallUpdateEix
}

FetchCopy () {
	GetFilename "${@}"
	FetchTemp
	test -z "${FILENAME}" && return
	(
		test "${UID}" -eq 0 && umask 002
		cp --preserve=timestamps -- "${TMPFILE}" "${FILENAME}"
	)
	test "${UID}" -eq 0 && chown -- portage:portage "${FILENAME}"
}

Fetch () {
	NEED_ARG=true
	FetchCopy "${@}"
}

Add () {
	NEED_ARG=true
	GetFilename "${@}"
	test -r "${FILENAME}" || die "cannot read ${FILENAME}"
	MakeTempDir cd
	AddArchive "${FILENAME}" "${TMPDIR}"
}

Remove () {
	ClearUpdateEixArgs
	AddLocalMethods
	export KEEP_VIRTUALS=false
	CallUpdateEix
}

Update () {
	FetchCopy "${@}"
	MakeTempSub cd
	AddArchive "${TMPFILE}" "${TMPSUB}"
}

MAIN_COMMAND="${1}"
shift

case "${MAIN_COMMAND}" in
	update|both)        Update "${@}";;
	fetch*|get|wget)    Fetch "${@}";;
	add*)               Add "${@}";;
	rem*|del*|rm*|sub*) Remove "${@}";;
	*)                  Usage 1;;
esac

exit 0
