#! /usr/bin/env sh
# This script is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Author and Copyright (c):
#   Martin V\"ath <vaeth@mathematik.uni-wuerzburg.de>
#
# This file must be "source"d by POSIX scripts.
#
# It contains helper functions for update-eix-remote, update-eix-layman,
# and perhaps similar local scripts. (@PACKAGE_STRING@).

local_eprefix_portage_exec="`update-eix --print EPREFIX_PORTAGE_EXEC`"

# This must happen in a function to enforce an empty argument list.
ReadFunctions () {
	local i
	ReadGettext
	for i in "${local_eprefix_portage_exec}/etc/init.d/functions.sh" \
		"${local_eprefix_portage_exec}/sbin/functions.sh"
	do
		test -r "${i}" || continue
		. "${i}"
		return
	done
	printf '%s: %s' "${0##*/}" "`gettext 'cannot read functions.sh'`" >&2
	exit 2
}

die () {
	eerror "${*}"
	exitcode=2
	exit "${exitcode}"
}

PerLine () {
	local i
	while IFS='
' read i
	do
		"${@}" "${i}"
	done
}

local_portdir=''
GetPortdir () {
	[ -n "${local_portdir}" ] && return
	local_portdir="`update-eix --print PORTDIR`"
}

verbose=true

RunCommand () {
	local ret c
	if ${verbose}
	then
		einfo "${1}"
		shift
		"${@}"
		return ${?}
	fi
	ebegin "${1}"
	shift
	"${@}" >/dev/null
	ret=${?}
	c="${*}"
	eend ${ret} "`eval_gettext 'Problems running ${c}'`"
	return ${ret}
}

( eval '[ "$(( 0 + 1 ))" = 1 ]' ) >/dev/null 2>&1 && eval '
expr () {
	echo "$(( ${1} ${2} ${3} ))"
}'

# Usage: Replace [-g] VAR Search Replace
# Option -g means: Replace all occurrences
# Exit status is the number of replacements (or 127 if there are more)
Replace () {
	local ReplaceA_ ReplaceB_ ReplaceC_
	ReplaceA_=''
	ReplaceC_=''
	case "${1}" in
		-*) ReplaceC_=0; shift;;
	esac
	eval "while {
		ReplaceB_=\${${1}%%\"\$2\"*}
		[ \"\${ReplaceB_}\" != \"\${${1}}\" ]
	}
	do
		ReplaceA_=\"\${ReplaceA_}\${ReplaceB_}\${3}\"
		${1}=\${${1}#*\"\$2\"}
		if [ -z \"\${ReplaceC_}\" ]; then
			${1}=\"\${ReplaceA_}\${${1}}\"
			return 1
		fi
		[ \${ReplaceC_} -ge 127 ] || \
			ReplaceC_=\`expr \${ReplaceC_} + 1\`
	done
	${1}=\"\${ReplaceA_}\${${1}}\""
	return ${ReplaceC_}
}

# Usage: Push [-c] VAR Args
# Append all Args to VAR, quoted such that
#    eval "${VAR}" is 'safe' and groups Args correctly.
# With option -c, VAR is cleaned in advance.
Push () {
	local PushA_ PushB_
	case "${1}" in
		-*) shift; eval "${1}=''";;
	esac
	PushA_="${1}"
	shift
	eval "for PushB_
	do
		Replace -g PushB_ \"'\" \"'\\\\''\"
		if [ -z \"\${${PushA_}}\" ]; then
			${PushA_}=\"'\${PushB_}'\"
		else
			${PushA_}=\"\${${PushA_}} '\${PushB_}'\"
		fi
	done"
}

AddUpdateArgs () {
	Push update_eix_args "${@}"
}

AddUpdateQuoting () {
	local k
	k="${1}"
	shift
	Replace -g k '?' '\?'
	Replace -g k '*' '\*'
	Replace -g k '[' '\['
	AddUpdateArgs "${k}" "${@}"
}

AddMethod () {
	AddUpdateArgs '-m'
	AddUpdateQuoting "${1}" "${2}"
}

AddOverlays () {
	local j
	for j
	do
		AddUpdateArgs '-a' "${j}"
	done
}

AddExcludes () {
	local j
	for j
	do
		AddUpdateArgs '-x'
		AddUpdateQuoting "${j}"
	done
}

ClearUpdateEixArgs () {
	update_eix_args=''
}

CallUpdateEix () {
	eval "set -- ${update_eix_args}"
	RunCommand "`gettext 'Calling update-eix'`" update-eix "${@}" || \
		die "`gettext 'update-eix failed'`"
}

AddLocalMethods () {
	local i l
	GetPortdir
	AddMethod "${local_portdir}" "eix"
	for i in `portageq portdir_overlay` ${ADD_OVERLAY}
	do
		l="${i}"
		Replace -g l '\' '\\'
		Replace -g l ':' '\:'
		AddMethod "${i}" "eix::${l}"
	done
}

# Remove optional trailing newline from all variables (arguments).
# This is necessary as some shells won't take ${Var%"[newline]"}
newline_string='
'
Chomp () {
	local ChompA_ ChompB_ ChompC_
	for ChompA_
	do
		eval "ChompB_=\"\${${ChompA_}}\""
		ChompC_="${ChompB_%?}"
		[ "${ChompC_}${newline_string}" = "${ChompB_}" ] &&
			eval "${ChompA_}=\"\${ChompC_}\""
	done
	true
}

# Consider variables (arguments) as paths and normalize them.
# If have_readlink=true (if possible), use readlink to resolve to "true"
# pathnames.
# Return with 1 if at least one variable is empty.
# Set relative to a list of all variables which are relative paths
# (the first token in relative will be a space if the list is not empty).

have_readlink=false
command -v readlink >/dev/null 2>&1 && have_readlink=true
NormalizeNames () {
	local NormA_ NormB_ NormC_ NormD_
	NormD_=0
	relative=''
	for NormC_
	do
		eval "NormA_=\"\${${NormC_}}\""
		if [ -z "${NormA_}" ]; then
			NormD_=1
			continue
		fi
		case "${NormA_}" in
			/*) :;;
			*) relative="${relative} ${NormC_}";;
		esac
		if ${have_readlink}; then
			# Append A to avoid loss of trailing \n in `...`
			NormB_=`readlink -f -- "${NormA_}" ; printf A` && \
				NormB_="${NormB_%A}" && Chomp NormB_ && \
				[ -n "${NormB_}" ] && \
					NormA_="${NormB_}"
		fi
		eval "${NormC_}=\"\${NormA_}\""
		while ! Replace -g "${NormC_}" '//' '/'; do
			:
		done
		eval "[ \"\${${NormC_}}\" = '/' ] || \
			${NormC_}=\"\${${NormC_}%/}\""
	done
	return ${NormD_}
}

read_gettext_status=''
ReadGettext () {
	[ -n "${read_gettext_status}" ] && return ${read_gettext_status}
	case "${USE_NLS-@USE_NLS@}" in
		''|n*|N*|f*|F*|0)
			read_gettext_status=1;;
		*)	ReadGettextSub >/dev/null 2>&1
			read_gettext_status=${?};;
	esac
	if [ ${read_gettext_status} -eq 0 ]
	then
		export TEXTDOMAIN='@TEXTDOMAIN@'
		export TEXTDOMAINDIR='@TEXTDOMAINDIR@'
		return
	fi
	gettext () {
		printf '%s' "${*}"
	}
	eval_gettext () {
		local l
		l="${*}"
		Replace -g l '\' '\\'
		Replace -g l '$(' '\$('
		Replace -g l '`' '\`'
		Replace -g l '"' '\"'
		eval "printf '%s' \"${l}\""
	}
	ngettext () {
		gettext "${@}"
	}
	eval_ngettext () {
		eval_gettext "${@}"
	}
	return 1
}

ReadGettextSub () {
	local i
	. gettext.sh && return
	i="`command -v gettext.sh 2>/dev/null`" && \
		[ -n "${i}" ] && . "${i}" && return
	. /usr/bin/gettext.sh
}

