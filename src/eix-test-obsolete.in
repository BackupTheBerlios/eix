#! /usr/bin/env sh
# This script is part of the eix project and distributed under the
# terms of the GNU General Public License v2.
#
# Author and Copyright (c):
#   Martin V\"ath <vaeth@mathematik.uni-wuerzburg.de>
#
# This script gives a structured output of eix -tTc (@PACKAGE_STRING@).

read_var_prg=eix
. ./eix-functions.sh.in
ReadGettext

nodetails=false

Usage() {
	n="${0##*/}"
	p='@PACKAGE_STRING@'
	eval_gettext 'Usage: ${n} [options] detail|brief
or:    ${n} repo|no-repo|buildtime|no-buildtime
This is a wrapper script for eix (${p}).

It calls eix -tTc several times with various variable settings in order to
display missing packages or packages with obsolete entries in
/etc/portage/package.* in a more organized manner than eix -tTc would do alone.
The speed and displayed details depend on whether you use the argument
"detail" or "brief". Note that the result depends on your settings of the
REDUNDANT_IF_* and NONEXISTENT_IF_* variables.

The following options are available:
	-c  use CHECK_INSTALLED_OVERLAYS=true
	-C  use CHECK_INSTALLED_OVERLAYS=repository
	-d  This can be used instead of the argument "detail"
	-b  This can be used instead of the argument "brief"
	-h  Show this help text

Options -b and -d are meant as to be used in EIX_TEST_OBSOLETE_OPTS to specify
the default behavior.

If neither -c nor -C is used, then CHECK_INSTALLED_OVERLAYS is not modified.
The (recommended) default for CHECK_INSTALLED_OVERLAYS is \"repository\" which
is much faster then CHECK_INSTALLED_OVERLAYS=true but works only reliable for
packages installed with repository information (which is done by all recent
portage versions).

You can check which packages are installed with/without this repository
information by using the argument "repo"/"no-repo".

You can check which packages are installed with/without buildtime
information by using the argument "buildtime"/"no-buildtime".

The arguments can be abbreviated, e.g. instead of "brief" you can just use "br".'
	echo
	exit ${1:-1}
}

Die() {
	printf '%s: %s\n' "${0##*/}" "${1}" >&2
	exit ${2:-1}
}

Eix() {
	if ! NOFOUND_STATUS=1 COUNT_ONLY_PRINTED=false eix -Tq0
	then	[ -z "${1}" ] || printf '%s\n' "${1}"
		return
	fi
	printf '\n%s\n' "${2}"
	if [ ${#} -le 2 ] || ${nodetails}
	then	eix -Tc
		echo
		return
	fi
	shift 2
	for z
	do	(
			for j
			do	[ "${z}" = "${j}" ] && continue
				eval "export ${j}=false"
			done
			Eix '' "`eval_gettext '... considered as ${z}'`"
		)
	done
}

NoKeywords() {
	export \
	REDUNDANT_IF_DOUBLE=false \
	REDUNDANT_IF_MIXED=false \
	REDUNDANT_IF_WEAKER=false \
	REDUNDANT_IF_STRANGE=false \
	REDUNDANT_IF_NO_CHANGE=false \
	REDUNDANT_IF_DOUBLE_LINE=false \
	REDUNDANT_IF_MINUSASTERISK=false
}

NoMask() {
	export \
	REDUNDANT_IF_MASK_NO_CHANGE=false \
	REDUNDANT_IF_DOUBLE_MASKED=false
}

NoUnmask() {
	export \
	REDUNDANT_IF_UNMASK_NO_CHANGE=false \
	REDUNDANT_IF_DOUBLE_UNMASKED=false
}

NoUse() {
	export \
	REDUNDANT_IF_DOUBLE_USE=false
}

NoEnv() {
	export \
	REDUNDANT_IF_DOUBLE_ENV=false
}

NoCflags() {
	export \
	REDUNDANT_IF_DOUBLE_CFLAGS=false
}

NoUninstalled() { export \
	REDUNDANT_IF_IN_KEYWORDS=false \
	REDUNDANT_IF_IN_MASK=false \
	REDUNDANT_IF_IN_UNMASK=false \
	REDUNDANT_IF_IN_USE=false \
	REDUNDANT_IF_IN_ENV=false \
	REDUNDANT_IF_IN_CFLAGS=false
}

ScanVarDbPkg() {
	ReadVar c EPREFIX_INSTALLED
	cd -- "${c}"/var/db/pkg >/dev/null 2>&1 || Die "`gettext \
			'cannot locate your database of installed packages'`"
	n="${1}"
	printf '%s\n\n' "${2}"
	shift 2
	c=0
	for i in *
	do	for j in "${i}"/*
		do	test -d "${j}" || continue
			f=false
			for k
			do	if test -e "${j}/${k}"
				then	f=:
					break
				fi
			done
			if ${f}
			then	${n} || continue
			else	${n} && continue
			fi
			printf '%s\n' "${j}"
			c=`Expr "${c}" + 1`
		done
	done
	if [ ${c} -eq 0 ]
	then	gettext 'none'
		echo
	elif [ ${c} -ne 1 ]
	then	echo
		eval_gettext '(total number of versions listed above: ${c})'
		echo
	fi
	exit 0
}

Repository() {
	if ${1}
	then	ScanVarDbPkg ${1} "`gettext \
'The following package versions are installed with repository information:'`" \
repository REPOSITORY
	else	ScanVarDbPkg ${1} "`gettext \
'The following package versions are installed without repository information:'`" \
repository REPOSITORY
	fi
}

BuildTime() {
	if ${1}
	then	ScanVarDbPkg ${1} "`gettext \
'The following package versions are installed with build-time information:'`" \
BUILD_TIME
	else	ScanVarDbPkg ${1} "`gettext \
'The following package versions are installed without build-time information:'`" \
BUILD_TIME
	fi
}

myarg=''
# Once an option with paths as arguments is introduced, it is probably
# necessary to turn the next command into eval "Push -c ..."
# In the moment this seems not necessary, so we avoid that security ris:
Push -c opt `eix --print EIX_TEST_OBSOLETE_OPTS`
Push opt "${@}"
eval "set -- ${opt}"
OPTIND=1
while getopts "cCdb?hH" opt
do	case "${opt}" in
		c) export CHECK_INSTALLED_OVERLAYS=:;;
		C) export CHECK_INSTALLED_OVERLAYS=repository;;
		d) myarg='detail';;
		b) myarg='brief';;
		*) Usage 0;;
	esac
done
[ ${OPTIND} -gt 1 ] && shift "`Expr ${OPTIND} - 1`"
[ ${#} -gt 1 ] && Usage
[ ${#} -eq 1 ] && myarg="${1}"
case "${myarg:--}" in
'-')
	Usage;;
[nN]*[bBdDtT]*)
	BuildTime false;;
[bB]*[dDtT]*)
	BuildTime :;;
[nN]*[rR]*)
	Repository false;;
r*|R*)
	Repository :;;
[bB]*)
	nodetails=:;;
h*|H*)
	Usage 0;;
esac

eix '-t*!'

ReadVar rump PORTAGE_CONFIGROOT
rump="${rump}/etc/portage/package."
(
	export TEST_FOR_NONEXISTENT=false
	(
		NoMask; NoUnmask; NoUse; NoEnv; NoCflags; NoUninstalled
		Eix "`eval_gettext \
'No redundant entries in ${rump}accept_keywords (or test is off).'`" \
			"`eval_gettext 'Redundant in ${rump}keywords:'`" \
			REDUNDANT_IF_DOUBLE \
			REDUNDANT_IF_MIXED \
			REDUNDANT_IF_WEAKER \
			REDUNDANT_IF_STRANGE \
			REDUNDANT_IF_NO_CHANGE \
			REDUNDANT_IF_DOUBLE_LINE \
			REDUNDANT_IF_MINUSASTERISK
	)
	NoKeywords
	(
		NoUnmask; NoUse; NoEnv; NoCflags; NoUninstalled
		Eix "`eval_gettext \
'No redundant entries in ${rump}mask (or test is off).'`" \
			"`eval_gettext 'Redundant in ${rump}mask:'`" \
			REDUNDANT_IF_MASK_NO_CHANGE \
			REDUNDANT_IF_DOUBLE_MASKED
	)
	NoMask
	(
		NoUse; NoEnv; NoCflags; NoUninstalled
		Eix "`eval_gettext \
'No redundant entries in ${rump}unmask (or test is off).'`" \
			"`eval_gettext 'Redundant in ${rump}unmask:'`" \
			REDUNDANT_IF_UNMASK_NO_CHANGE \
			REDUNDANT_IF_DOUBLE_UNMASKED
	)
	NoUnmask
	(
		NoEnv; NoCflags; NoUninstalled
		Eix "`eval_gettext \
'No redundant entries in ${rump}use (or test is off).'`" \
			"`eval_gettext 'Redundant in ${rump}use:'`" \
	)
	NoUse
	(
		NoCflags; NoUninstalled
		Eix "`eval_gettext \
'No redundant entries in ${rump}env (or test is off).'`" \
			"`eval_gettext 'Redundant in ${rump}env:'`" \
	)
	NoEnv
	(
		NoUninstalled
		Eix "`eval_gettext \
'No redundant entries in ${rump}cflags (or test is off).'`" \
			"`eval_gettext 'Redundant in ${rump}cflags:'`" \
	)
	NoCflags
	(
		export \
		REDUNDANT_IF_IN_MASK=false \
		REDUNDANT_IF_IN_UNMASK=false \
		REDUNDANT_IF_IN_USE=false \
		REDUNDANT_IF_IN_ENV=false \
		REDUNDANT_IF_IN_CFLAGS=false
		Eix "`eval_gettext \
'No uninstalled entries in ${rump}accept_keywords (or test is off).'`" \
			"`eval_gettext 'Not installed but in ${rump}keywords:'`"
	)
	export REDUNDANT_IF_IN_KEYWORDS=false
	(
		export \
		REDUNDANT_IF_IN_UNMASK=false \
		REDUNDANT_IF_IN_USE=false \
		REDUNDANT_IF_IN_ENV=false \
		REDUNDANT_IF_IN_CFLAGS=false
		Eix "`eval_gettext \
'No uninstalled entries in ${rump}mask (or test is off).'`" \
			"`eval_gettext 'Not installed but in ${rump}mask:'`"
	)
	export REDUNDANT_IF_IN_MASK=false
	(
		export \
		REDUNDANT_IF_IN_USE=false \
		REDUNDANT_IF_IN_ENV=false \
		REDUNDANT_IF_IN_CFLAGS=false
		Eix "`eval_gettext \
'No uninstalled entries in ${rump}unmask (or test is off).'`" \
			"`eval_gettext 'Not installed but in ${rump}unmask:'`"
	)
	export REDUNDANT_IF_IN_UNMASK=false
	(
		export \
		REDUNDANT_IF_IN_ENV=false
		REDUNDANT_IF_IN_CFLAGS=false
		Eix "`eval_gettext \
'No uninstalled entries in ${rump}use (or test is off).'`" \
			"`eval_gettext 'Not installed but in ${rump}use:'`"
	)
	export \
	REDUNDANT_IF_IN_USE=false
	(
		export \
		REDUNDANT_IF_IN_CFLAGS=false
		Eix "`eval_gettext \
'No uninstalled entries in ${rump}env (or test is off).'`" \
			"`eval_gettext 'Not installed but in ${rump}env:'`"
	)
	export \
	REDUNDANT_IF_IN_ENV=false
	Eix "`eval_gettext \
'No uninstalled entries in ${rump}cflags (or test is off).'`" \
		"`eval_gettext 'Not installed but in ${rump}cflags:'`"
)
export \
TEST_FOR_REDUNDANCY=false
Eix "`gettext \
	'All installed versions of packages are in the database.'`" \
	"`gettext \
	'Installed packages with a version not in the database (or masked):'`"
