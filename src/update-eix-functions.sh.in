###########################################################################
#   eix is a small utility for searching ebuilds in the                   #
#   Gentoo Linux portage system. It uses indexing to allow quick searches #
#   in package descriptions with regular expressions.                     #
#                                                                         #
#   https://sourceforge.net/projects/eix                                  #
#                                                                         #
#   Copyright (c)                                                         #
#     Martin Väth <vaeth@mathematik.uni-wuerzburg.de>                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
###########################################################################

# This file must be "source"d by bash scripts.
#
# it contains helper functions for update-eix-remote, update-eix-layman,
# and perhaps similar local scripts. (@PACKAGE_STRING@).

LOCAL_EPREFIX_PORTAGE_EXEC="$(update-eix --print EPREFIX_PORTAGE_EXEC)"

if [[ -r "${LOCAL_EPREFIX_PORTAGE_EXEC}/etc/init.d/functions.sh" ]]; then
	source "${LOCAL_EPREFIX_PORTAGE_EXEC}/etc/init.d/functions.sh"
elif [[ -r "${LOCAL_EPREFIX_PORTAGE_EXEC}/sbin/functions.sh" ]]; then
	source "${LOCAL_EPREFIX_PORTAGE_EXEC}/sbin/functions.sh"
else
	echo "${0##*/}: Cannot read functions.sh" >&2
	exit 2
fi

die () {
	eerror "${*}"
	EXITCODE=2
	exit "${EXITCODE}"
}

LOCAL_PORTDIR=''
GetPortdir () {
	[[ "${LOCAL_PORTDIR}" ]] && return
	LOCAL_PORTDIR="$(update-eix --print PORTDIR)"
}

VERBOSE=1

RunCommand () {
	local RET
	if [[ "${VERBOSE}" ]]; then
		einfo "${1}"
		shift
		"${@}"
		return "${?}"
	fi
	ebegin "${1}"
	shift
	"${@}" &>/dev/null
	RET=${?}
	eend ${RET} "Problems running ${@}"
	return "${RET}"
}

declare -a UPDATE_EIX_ARGS

Push () {
	local ARR K
	ARR="${1}"
	shift
	for K; do
		eval ${ARR}[\${#${ARR}[@]}]="\${K}"
	done
}

AddUpdateArgs () {
	Push UPDATE_EIX_ARGS "${@}"
}

AddUpdateQuoting () {
	local K
	K="${1//\\/\\\\}"
	K="${K//\?/\?}"
	K="${K//\*/\*}"
	K="${K//\[/\[}"
	shift
	AddUpdateArgs "${K}" "${@}"
}

AddMethod () {
	AddUpdateArgs '-m'
	AddUpdateQuoting "${1}" "${2}"
}

AddOverlays () {
	local J
	for J; do
		AddUpdateArgs '-a' "${J}"
	done
}

AddExcludes () {
	local J
	for J; do
		AddUpdateArgs '-x'
		AddUpdateQuoting "${J}"
	done
}

ClearUpdateEixArgs () {
	UPDATE_EIX_ARGS=()
}

CallUpdateEix () {
	RunCommand "Calling update-eix" \
		update-eix "${UPDATE_EIX_ARGS[@]}" || die "update-eix failed"
}

AddLocalMethods () {
	local I
	GetPortdir
	AddMethod "${PORTDIR}" "eix"
	for I in $(portageq portdir_overlay) $ADD_OVERLAY
	do
		AddMethod "${I}" "eix::${I}"
	done
}

# Consider variables (arguments) as paths and normalize them.
# If READLINK=readlink (default), resolve even to "true" pathnames.
# Return with 1 if at least one variable is empty.
# Set RELATIVE to a list of all variables which are relative paths
# (the first token in RELATIVE will be a space if the list is not empty).

READLINK="$(type -p readlink)" || READLINK=''
NormalizeNames () {
	local TRUENAME PREV I RSTAT=0
	RELATIVE=''
	for I; do
		eval TRUENAME="\${${I}}"
		if [[ -z "${TRUENAME}" ]]; then
			eval ${I}=''
			RSTAT=1
			continue
		fi
		[[ "${TRUENAME:0:1}" = '/' ]] || RELATIVE="${RELATIVE} ${I}"
		if [[ "${READLINK}" ]]; then
			PREV="${TRUENAME}"
			TRUENAME="$("${READLINK}" -f -- "${TRUENAME}")" \
				|| TRUENAME=''
			[[ "${TRUENAME}" ]] || TRUENAME="${PREV}"
		fi
		PREV=''
		while [[ "${PREV}" != "${TRUENAME}" ]]; do
			PREV="${TRUENAME}"
			TRUENAME="${TRUENAME//\/\///}"
		done
		[[ "${TRUENAME}" != '/' ]] && TRUENAME="${TRUENAME%/}"
		eval ${I}="\${TRUENAME}"
	done
	return ${RSTAT}
}

