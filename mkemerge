#! /usr/bin/env sh

export LC_ALL=C

Die() {
	printf "%s: %s\n" "${0##*/}" "${1}" >&2
	exit ${2:-1}
}

[ "`id -u`" -eq 0 ] || Die "only root may execute this script"
CURR='.'

DISTDIR="`portageq distdir`"
[ -n "${DISTDIR}" ] && test -d "${DISTDIR}" || Die "cannot determine DISTDIR"

GetEdir() {
	local o i j
	o="`portageq portdir_overlay`"
	for i in ${o}
	do
		EDIR="${i}/app-portage/eix"
		for j in "${EDIR}"/eix-*.ebuild
		do
			case "${j##*/}" in
				eix-9999*) continue;;
			esac
			test -f "${j}" || continue
			test -r "${i}/profiles/repo_name" && \
			REPO_NAME=`cat -- "${i}"/profiles/repo_name` || \
			REPO_NAME=''
			return 0
		done
	done
	return 1
}
GetEdir || Die "cannot find app-portage/eix in overlay"

MoveEbuild () {
	test -f "${1}" && return
	local i n
	n=''
	for i in "${EDIR}"/eix-*.ebuild
	do
		case "${i##*/}" in
			eix-9999*) continue;;
		esac
		test -f "${i}" && n="${i}"
	done
	printf "%s\n" "Moving ${n} -> ${1##*/}"
	mv -- "${n}" "${1}" || Die "cannot mv ${n} ${1}"
}

RmOpt() {
	! test -f "${1}" || rm -- "${1}"
}

InstallEbuildVersion () {
	chown portage:portage -- "${1}"
	chmod 664 -- "${1}"
	printf "%s\n" "Moving ${1} -> ${DISTDIR}"
	mv -- "${1}" "${DISTDIR}/${1##*/}"
	MoveEbuild "${EDIR}/eix-${2}.ebuild"
	(
		cd -- "${EDIR}" || Die "cannot change to ${EDIR}"
		RmOpt "Manifest" || Die "cannot remove Manifest"
		printf "%s\n" "ebuild ${EDIR}/eix-${2}.ebuild manifest"
		ebuild -- "eix-${2}.ebuild" manifest || Die "ebuild failed"
	) || exit
	if [ -n "${REPO_NAME}" ] && command -v egencache >/dev/null 2>&1
	then
		printf "%s\n" "egencache --repo=${REPO_NAME} --update"
		egencache --repo="${REPO_NAME}" --update || \
			Die "egencache failed"
	fi
	printf "%s\n" "emerge -1 =app-portage/eix-${2}"
	exec emerge -1 -- "=app-portage/eix-${2}"
	Die "cannot execute emerge"
}

DoFirst () {
	local i j v
	for j in tar.lzma tar.bz2 tar.gz zip tar.Z shar.gz shar
	do
		for i in "${CURR}"/eix-*.${j}
		do
			test -e "${i}" || continue
			v="${i##*/eix-}"
			v="${v%.${j}}"
			InstallEbuildVersion "${i}" "${v}"
			return
		done
	done
	Die "No tarball found in ${CURR}"
}

DoFirst || exit
